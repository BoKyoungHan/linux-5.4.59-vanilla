!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADAPT_SCALE_BASE	page_alloc.c	8058;"	d	file:
ADAPT_SCALE_NPAGES	page_alloc.c	8060;"	d	file:
ADAPT_SCALE_SHIFT	page_alloc.c	8059;"	d	file:
ADD_CACHE_INFO	swap_state.c	63;"	d	file:
ALLOC_CMA	internal.h	525;"	d
ALLOC_CPUSET	internal.h	524;"	d
ALLOC_HARDER	internal.h	522;"	d
ALLOC_HIGH	internal.h	523;"	d
ALLOC_KSWAPD	internal.h	531;"	d
ALLOC_NOFRAGMENT	internal.h	527;"	d
ALLOC_NOFRAGMENT	internal.h	529;"	d
ALLOC_NO_WATERMARKS	internal.h	506;"	d
ALLOC_OOM	internal.h	517;"	d
ALLOC_OOM	internal.h	519;"	d
ALLOC_WMARK_HIGH	internal.h	505;"	d
ALLOC_WMARK_LOW	internal.h	504;"	d
ALLOC_WMARK_MASK	internal.h	509;"	d
ALLOC_WMARK_MIN	internal.h	503;"	d
ARCH_KMALLOC_FLAGS	slab.c	158;"	d	file:
BANDWIDTH_INTERVAL	page-writeback.c	59;"	d	file:
BATCHREFILL_LIMIT	slab.c	259;"	d	file:
BDI_SHOW	backing-dev.c	154;"	d	file:
BIG_CHUNK_GAP	z3fold.c	562;"	d	file:
BITMAP_CHUNK_BITS	page_idle.c	16;"	d	file:
BITMAP_CHUNK_SIZE	page_idle.c	15;"	d	file:
BLOCKS_PER_PAGE	shmem.c	89;"	d	file:
BOGO_DIRENT_SIZE	shmem.c	93;"	d	file:
BOOT_CPUCACHE_ENTRIES	slab.c	380;"	d	file:
BUDDIES_MAX	z3fold.c	/^	BUDDIES_MAX = LAST$/;"	e	enum:buddy	file:
BUDDY_MASK	z3fold.c	66;"	d	file:
BUDDY_SHIFT	z3fold.c	67;"	d	file:
BUILD_EMBED_FIRST_CHUNK	percpu.c	2498;"	d	file:
BUILD_PAGE_FIRST_CHUNK	percpu.c	2503;"	d	file:
BYTES_PER_POINTER	kmemleak.c	112;"	d	file:
BYTES_PER_WORD	slab.c	154;"	d	file:
Bad_file	swapfile.c	/^static const char Bad_file[] = "Bad swap file entry ";$/;"	v	file:
Bad_offset	swapfile.c	/^static const char Bad_offset[] = "Bad swap offset entry ";$/;"	v	file:
CACHE_CACHE	slab.c	206;"	d	file:
CACHE_CREATE_MASK	slab.h	218;"	d
CFLAGS_REMOVE_common.o	kasan/Makefile	/^CFLAGS_REMOVE_common.o = $(CC_FLAGS_FTRACE)$/;"	m
CFLAGS_REMOVE_generic.o	kasan/Makefile	/^CFLAGS_REMOVE_generic.o = $(CC_FLAGS_FTRACE)$/;"	m
CFLAGS_REMOVE_generic_report.o	kasan/Makefile	/^CFLAGS_REMOVE_generic_report.o = $(CC_FLAGS_FTRACE)$/;"	m
CFLAGS_REMOVE_tags.o	kasan/Makefile	/^CFLAGS_REMOVE_tags.o = $(CC_FLAGS_FTRACE)$/;"	m
CFLAGS_common.o	kasan/Makefile	/^CFLAGS_common.o := $(call cc-option, -fno-conserve-stack -fno-stack-protector) -DDISABLE_BRANCH_PROFILING$/;"	m
CFLAGS_generic.o	kasan/Makefile	/^CFLAGS_generic.o := $(call cc-option, -fno-conserve-stack -fno-stack-protector) -DDISABLE_BRANCH_PROFILING$/;"	m
CFLAGS_generic_report.o	kasan/Makefile	/^CFLAGS_generic_report.o := $(call cc-option, -fno-conserve-stack -fno-stack-protector) -DDISABLE_BRANCH_PROFILING$/;"	m
CFLAGS_tags.o	kasan/Makefile	/^CFLAGS_tags.o := $(call cc-option, -fno-conserve-stack -fno-stack-protector) -DDISABLE_BRANCH_PROFILING$/;"	m
CFLGS_OBJFREELIST_SLAB	slab.c	254;"	d	file:
CFLGS_OFF_SLAB	slab.c	255;"	d	file:
CHUNK_SHIFT	z3fold.c	59;"	d	file:
CHUNK_SHIFT	zbud.c	71;"	d	file:
CHUNK_SIZE	z3fold.c	60;"	d	file:
CHUNK_SIZE	zbud.c	72;"	d	file:
CLASS_ALMOST_EMPTY	zsmalloc.c	/^	CLASS_ALMOST_EMPTY,$/;"	e	enum:zs_stat_type	file:
CLASS_ALMOST_FULL	zsmalloc.c	/^	CLASS_ALMOST_FULL,$/;"	e	enum:zs_stat_type	file:
CLASS_BITS	zsmalloc.c	125;"	d	file:
CLASS_EMPTY	zsmalloc.c	/^	CLASS_EMPTY,$/;"	e	enum:zs_stat_type	file:
CLASS_FULL	zsmalloc.c	/^	CLASS_FULL,$/;"	e	enum:zs_stat_type	file:
COMPACT_MAX_DEFER_SHIFT	compaction.c	135;"	d	file:
COMPAT_SYSCALL_DEFINE3	mempolicy.c	/^COMPAT_SYSCALL_DEFINE3(set_mempolicy, int, mode, compat_ulong_t __user *, nmask,$/;"	f
COMPAT_SYSCALL_DEFINE4	mempolicy.c	/^COMPAT_SYSCALL_DEFINE4(migrate_pages, compat_pid_t, pid,$/;"	f
COMPAT_SYSCALL_DEFINE5	mempolicy.c	/^COMPAT_SYSCALL_DEFINE5(get_mempolicy, int __user *, policy,$/;"	f
COMPAT_SYSCALL_DEFINE6	mempolicy.c	/^COMPAT_SYSCALL_DEFINE6(mbind, compat_ulong_t, start, compat_ulong_t, len,$/;"	f
COMPAT_SYSCALL_DEFINE6	migrate.c	/^COMPAT_SYSCALL_DEFINE6(move_pages, pid_t, pid, compat_ulong_t, nr_pages,$/;"	f
COMPAT_SYSCALL_DEFINE6	process_vm_access.c	/^COMPAT_SYSCALL_DEFINE6(process_vm_readv, compat_pid_t, pid,$/;"	f
COMPAT_SYSCALL_DEFINE6	process_vm_access.c	/^COMPAT_SYSCALL_DEFINE6(process_vm_writev, compat_pid_t, pid,$/;"	f
CREATE_TRACE_POINTS	cma.c	22;"	d	file:
CREATE_TRACE_POINTS	compaction.c	45;"	d	file:
CREATE_TRACE_POINTS	debug_page_ref.c	5;"	d	file:
CREATE_TRACE_POINTS	filemap.c	46;"	d	file:
CREATE_TRACE_POINTS	khugepaged.c	54;"	d	file:
CREATE_TRACE_POINTS	migrate.c	54;"	d	file:
CREATE_TRACE_POINTS	oom_kill.c	50;"	d	file:
CREATE_TRACE_POINTS	page_isolation.c	15;"	d	file:
CREATE_TRACE_POINTS	percpu.c	89;"	d	file:
CREATE_TRACE_POINTS	slab_common.c	26;"	d	file:
CREATE_TRACE_POINTS	swap.c	41;"	d	file:
CREATE_TRACE_POINTS	vmscan.c	63;"	d	file:
ClearPageHugeObject	zsmalloc.c	/^static void ClearPageHugeObject(struct page *page)$/;"	f	file:
ClearPageHugeTemporary	hugetlb.c	/^static inline void ClearPageHugeTemporary(struct page *page)$/;"	f	file:
DEBUG	cma.c	19;"	d	file:
DEBUG	slab.c	144;"	d	file:
DEBUG	slab.c	148;"	d	file:
DEBUG_AUGMENT_LOWEST_MATCH_CHECK	vmalloc.c	331;"	d	file:
DEBUG_AUGMENT_PROPAGATE_CHECK	vmalloc.c	330;"	d	file:
DEBUG_DEFAULT_FLAGS	slub.c	172;"	d	file:
DEBUG_METADATA_FLAGS	slub.c	188;"	d	file:
DEFINE_ASAN_LOAD_STORE	kasan/generic.c	230;"	d	file:
DEFINE_ASAN_REPORT_LOAD	kasan/generic_report.c	115;"	d	file:
DEFINE_ASAN_REPORT_STORE	kasan/generic_report.c	122;"	d	file:
DEFINE_ASAN_SET_SHADOW	kasan/generic.c	313;"	d	file:
DEFINE_HWASAN_LOAD_STORE	kasan/tags.c	128;"	d	file:
DIRTY_POLL_THRESH	page-writeback.c	54;"	d	file:
DMAPOOL_DEBUG	dmapool.c	39;"	d	file:
DOWN	slab.h	/^	DOWN,			\/* No slab functionality yet *\/$/;"	e	enum:slab_state
DO_NUMA	ksm.c	47;"	d	file:
DO_NUMA	ksm.c	50;"	d	file:
DO_PAGES_STAT_CHUNK_NR	migrate.c	1756;"	d	file:
DROP	filemap.c	/^	DROP,		\/* Drop ref to page before wait, no check when woken,$/;"	e	enum:behavior	file:
EVICTION_MASK	workingset.c	172;"	d	file:
EVICTION_SHIFT	workingset.c	170;"	d	file:
EXCLUSIVE	filemap.c	/^	EXCLUSIVE,	\/* Hold ref to page and take the bit when woken, like$/;"	e	enum:behavior	file:
EXPORT_SYMBOL	kasan/generic.c	/^EXPORT_SYMBOL(__asan_loadN_noabort);$/;"	v
EXPORT_SYMBOL	kasan/generic.c	/^EXPORT_SYMBOL(__asan_storeN_noabort);$/;"	v
FIRST	z3fold.c	/^	FIRST,$/;"	e	enum:buddy	file:
FIRST	zbud.c	/^	FIRST,$/;"	e	enum:buddy	file:
FLUSHING_CACHED_CHARGE	memcontrol.c	2167;"	d	file:
FL_FIT_TYPE	vmalloc.c	/^	FL_FIT_TYPE = 1,	\/* full fit *\/$/;"	e	enum:fit_type	file:
FORCED_DEBUG	slab.c	146;"	d	file:
FORCED_DEBUG	slab.c	150;"	d	file:
FREELIST_BYTE_INDEX	slab.c	161;"	d	file:
FULL	slab.h	/^	FULL			\/* Everything is working *\/$/;"	e	enum:slab_state
FULLNESS_BITS	zsmalloc.c	124;"	d	file:
F_ALL_SEALS	memfd.c	133;"	d	file:
GDTC_INIT	page-writeback.c	158;"	d	file:
GDTC_INIT	page-writeback.c	218;"	d	file:
GDTC_INIT_NO_WB	page-writeback.c	162;"	d	file:
GDTC_INIT_NO_WB	page-writeback.c	220;"	d	file:
GET_KSM_PAGE_LOCK	ksm.c	/^	GET_KSM_PAGE_LOCK,$/;"	e	enum:get_ksm_page_flags	file:
GET_KSM_PAGE_NOLOCK	ksm.c	/^	GET_KSM_PAGE_NOLOCK,$/;"	e	enum:get_ksm_page_flags	file:
GET_KSM_PAGE_TRYLOCK	ksm.c	/^	GET_KSM_PAGE_TRYLOCK$/;"	e	enum:get_ksm_page_flags	file:
GET_SWAP_RA_VAL	swap_state.c	59;"	d	file:
GFP_BOOT_MASK	internal.h	27;"	d
GFP_CONSTRAINT_MASK	internal.h	30;"	d
GFP_RECLAIM_MASK	internal.h	21;"	d
GFP_SLAB_BUG_MASK	internal.h	33;"	d
GFP_VMALLOC32	vmalloc.c	2696;"	d	file:
GFP_VMALLOC32	vmalloc.c	2698;"	d	file:
GFP_VMALLOC32	vmalloc.c	2704;"	d	file:
GUP_BENCHMARK	gup_benchmark.c	10;"	d	file:
GUP_FAST_BENCHMARK	gup_benchmark.c	8;"	d	file:
GUP_LONGTERM_BENCHMARK	gup_benchmark.c	9;"	d	file:
HANDLE_FLAG_MASK	z3fold.c	94;"	d	file:
HANDLE_PIN_BIT	zsmalloc.c	110;"	d	file:
HEADLESS	z3fold.c	/^	HEADLESS = 0,$/;"	e	enum:buddy	file:
HEX_ASCII	kmemleak.c	180;"	d	file:
HEX_GROUP_SIZE	kmemleak.c	178;"	d	file:
HEX_MAX_LINES	kmemleak.c	182;"	d	file:
HEX_PREFIX	kmemleak.c	174;"	d	file:
HEX_ROW_SIZE	kmemleak.c	176;"	d	file:
HPAGE_RESV_MASK	hugetlb.c	667;"	d	file:
HPAGE_RESV_OWNER	hugetlb.c	665;"	d	file:
HPAGE_RESV_UNMAPPED	hugetlb.c	666;"	d	file:
HSTATE_ATTR	hugetlb.c	2555;"	d	file:
HSTATE_ATTR_RO	hugetlb.c	2552;"	d	file:
ICE_noinline	migrate.c	1155;"	d	file:
ICE_noinline	migrate.c	1157;"	d	file:
ID_STR_LENGTH	slub.c	5710;"	d	file:
INC_CACHE_INFO	swap_state.c	62;"	d	file:
INDEX_NODE	slab.c	224;"	d	file:
INIT_BW	backing-dev.c	282;"	d	file:
INIT_MEMBLOCK_REGIONS	memblock.c	25;"	d	file:
INIT_MEMBLOCK_RESERVED_REGIONS	memblock.c	29;"	d	file:
INIT_MM_CONTEXT	init-mm.c	16;"	d	file:
INIT_PHYSMEM_REGIONS	memblock.c	26;"	d	file:
ISOLATED_BITS	zsmalloc.c	126;"	d	file:
ISOLATE_ABORT	compaction.c	/^	ISOLATE_ABORT,		\/* Abort compaction now *\/$/;"	e	enum:__anon13	file:
ISOLATE_NONE	compaction.c	/^	ISOLATE_NONE,		\/* No pages isolated, continue scanning *\/$/;"	e	enum:__anon13	file:
ISOLATE_SUCCESS	compaction.c	/^	ISOLATE_SUCCESS,	\/* Pages isolated, migrate *\/$/;"	e	enum:__anon13	file:
K	backing-dev.c	104;"	d	file:
K	backing-dev.c	152;"	d	file:
K	backing-dev.c	75;"	d	file:
K	memcontrol.c	1502;"	d	file:
K	oom_kill.c	482;"	d	file:
K	oom_kill.c	935;"	d	file:
K	page_alloc.c	5205;"	d	file:
KASAN_ABI_VERSION	kasan/kasan.h	53;"	d
KASAN_ALLOCA_LEFT	kasan/kasan.h	41;"	d
KASAN_ALLOCA_REDZONE_SIZE	kasan/kasan.h	44;"	d
KASAN_ALLOCA_RIGHT	kasan/kasan.h	42;"	d
KASAN_BIT_MULTI_SHOT	kasan/report.c	47;"	d	file:
KASAN_BIT_REPORTED	kasan/report.c	46;"	d	file:
KASAN_CURRENT_STACK_FRAME_MAGIC	kasan/kasan.h	49;"	d
KASAN_FREE_PAGE	kasan/kasan.h	16;"	d
KASAN_FREE_PAGE	kasan/kasan.h	21;"	d
KASAN_GLOBAL_REDZONE	kasan/kasan.h	27;"	d
KASAN_KMALLOC_FREE	kasan/kasan.h	19;"	d
KASAN_KMALLOC_FREE	kasan/kasan.h	24;"	d
KASAN_KMALLOC_REDZONE	kasan/kasan.h	18;"	d
KASAN_KMALLOC_REDZONE	kasan/kasan.h	23;"	d
KASAN_NR_FREE_STACKS	kasan/kasan.h	101;"	d
KASAN_NR_FREE_STACKS	kasan/kasan.h	99;"	d
KASAN_PAGE_REDZONE	kasan/kasan.h	17;"	d
KASAN_PAGE_REDZONE	kasan/kasan.h	22;"	d
KASAN_SANITIZE	kasan/Makefile	/^KASAN_SANITIZE := n$/;"	m
KASAN_SANITIZE_slab.o	Makefile	/^KASAN_SANITIZE_slab.o := n$/;"	m
KASAN_SANITIZE_slab_common.o	Makefile	/^KASAN_SANITIZE_slab_common.o := n$/;"	m
KASAN_SANITIZE_slub.o	Makefile	/^KASAN_SANITIZE_slub.o := n$/;"	m
KASAN_SHADOW_MASK	kasan/kasan.h	9;"	d
KASAN_SHADOW_SCALE_SIZE	kasan/kasan.h	8;"	d
KASAN_STACK_DEPTH	kasan/kasan.h	91;"	d
KASAN_STACK_LEFT	kasan/kasan.h	33;"	d
KASAN_STACK_MID	kasan/kasan.h	34;"	d
KASAN_STACK_PARTIAL	kasan/kasan.h	36;"	d
KASAN_STACK_RIGHT	kasan/kasan.h	35;"	d
KASAN_TAG_INVALID	kasan/kasan.h	12;"	d
KASAN_TAG_KERNEL	kasan/kasan.h	11;"	d
KASAN_TAG_MAX	kasan/kasan.h	13;"	d
KCOV_INSTRUMENT	kasan/Makefile	/^KCOV_INSTRUMENT := n$/;"	m
KCOV_INSTRUMENT_debug-pagealloc.o	Makefile	/^KCOV_INSTRUMENT_debug-pagealloc.o := n$/;"	m
KCOV_INSTRUMENT_kmemleak.o	Makefile	/^KCOV_INSTRUMENT_kmemleak.o := n$/;"	m
KCOV_INSTRUMENT_memcontrol.o	Makefile	/^KCOV_INSTRUMENT_memcontrol.o := n$/;"	m
KCOV_INSTRUMENT_mmzone.o	Makefile	/^KCOV_INSTRUMENT_mmzone.o := n$/;"	m
KCOV_INSTRUMENT_page_alloc.o	Makefile	/^KCOV_INSTRUMENT_page_alloc.o := n$/;"	m
KCOV_INSTRUMENT_slab.o	Makefile	/^KCOV_INSTRUMENT_slab.o := n$/;"	m
KCOV_INSTRUMENT_slab_common.o	Makefile	/^KCOV_INSTRUMENT_slab_common.o := n$/;"	m
KCOV_INSTRUMENT_slob.o	Makefile	/^KCOV_INSTRUMENT_slob.o := n$/;"	m
KCOV_INSTRUMENT_slub.o	Makefile	/^KCOV_INSTRUMENT_slub.o := n$/;"	m
KCOV_INSTRUMENT_vmstat.o	Makefile	/^KCOV_INSTRUMENT_vmstat.o := n$/;"	m
KMEMLEAK_BLACK	kmemleak.c	127;"	d	file:
KMEMLEAK_GREY	kmemleak.c	126;"	d	file:
KSM_ATTR	ksm.c	2849;"	d	file:
KSM_ATTR_RO	ksm.c	2847;"	d	file:
KSM_FLAG_MASK	ksm.c	218;"	d	file:
KSM_KMEM_CACHE	ksm.c	302;"	d	file:
KSM_RUN_MERGE	ksm.c	291;"	d	file:
KSM_RUN_OFFLINE	ksm.c	293;"	d	file:
KSM_RUN_STOP	ksm.c	290;"	d	file:
KSM_RUN_UNMERGE	ksm.c	292;"	d	file:
LAST	z3fold.c	/^	LAST,$/;"	e	enum:buddy	file:
LAST	zbud.c	/^	LAST$/;"	e	enum:buddy	file:
LAST_SCAN	memfd.c	29;"	d	file:
LATENCY_LIMIT	swapfile.c	266;"	d	file:
LE_FIT_TYPE	vmalloc.c	/^	LE_FIT_TYPE = 2,	\/* left edge fit *\/$/;"	e	enum:fit_type	file:
LRU_ALL	memcontrol.c	3797;"	d	file:
LRU_ALL_ANON	memcontrol.c	3796;"	d	file:
LRU_ALL_FILE	memcontrol.c	3795;"	d	file:
MAGIC_VAL_BITS	zsmalloc.c	127;"	d	file:
MAKE_ALL_LISTS	slab.c	247;"	d	file:
MAKE_LIST	slab.c	241;"	d	file:
MAX	zsmalloc.c	129;"	d	file:
MAX_COMPACT_RETRIES	page_alloc.c	3875;"	d	file:
MAX_GAP	util.c	363;"	d	file:
MAX_MAP_CHUNK	early_ioremap.c	252;"	d	file:
MAX_NODE_LOAD	page_alloc.c	5512;"	d	file:
MAX_OBJS_PER_PAGE	slub.c	192;"	d	file:
MAX_OOM_REAP_RETRIES	oom_kill.c	607;"	d	file:
MAX_PARTIAL	slub.c	170;"	d	file:
MAX_PAUSE	page-writeback.c	48;"	d	file:
MAX_POSSIBLE_PHYSMEM_BITS	zsmalloc.c	91;"	d	file:
MAX_POSSIBLE_PHYSMEM_BITS	zsmalloc.c	97;"	d	file:
MAX_PTE_MAPPED_THP	khugepaged.c	80;"	d	file:
MAX_RECLAIM_RETRIES	internal.h	83;"	d
MAX_SCAN_SIZE	kmemleak.c	110;"	d	file:
MAX_SLABINFO_WRITE	slab.c	4105;"	d	file:
MAX_TRACE	kmemleak.c	106;"	d	file:
MAX_VMPRESSURE_ARGS_LEN	vmpressure.c	342;"	d	file:
MC_TARGET_DEVICE	memcontrol.c	/^	MC_TARGET_DEVICE,$/;"	e	enum:mc_target_type	file:
MC_TARGET_NONE	memcontrol.c	/^	MC_TARGET_NONE = 0,$/;"	e	enum:mc_target_type	file:
MC_TARGET_PAGE	memcontrol.c	/^	MC_TARGET_PAGE,$/;"	e	enum:mc_target_type	file:
MC_TARGET_SWAP	memcontrol.c	/^	MC_TARGET_SWAP,$/;"	e	enum:mc_target_type	file:
MDTC_INIT	page-writeback.c	164;"	d	file:
MDTC_INIT	page-writeback.c	221;"	d	file:
MEMCG_CACHES_MAX_SIZE	memcontrol.c	309;"	d	file:
MEMCG_CACHES_MIN_SIZE	memcontrol.c	308;"	d	file:
MEMCG_DELAY_PRECISION_SHIFT	memcontrol.c	2424;"	d	file:
MEMCG_DELAY_SCALING_SHIFT	memcontrol.c	2425;"	d	file:
MEMCG_MAX_HIGH_DELAY_JIFFIES	memcontrol.c	2379;"	d	file:
MEMFD_TAG_PINNED	memfd.c	28;"	d	file:
MEMFILE_ATTR	hugetlb_cgroup.c	32;"	d	file:
MEMFILE_ATTR	memcontrol.c	230;"	d	file:
MEMFILE_IDX	hugetlb_cgroup.c	31;"	d	file:
MEMFILE_PRIVATE	hugetlb_cgroup.c	30;"	d	file:
MEMFILE_PRIVATE	memcontrol.c	228;"	d	file:
MEMFILE_TYPE	memcontrol.c	229;"	d	file:
MEMORY_FAILURE_FIFO_ORDER	memory-failure.c	1424;"	d	file:
MEMORY_FAILURE_FIFO_SIZE	memory-failure.c	1425;"	d	file:
MEM_CGROUP_CHARGE_TYPE_ANON	memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_ANON,$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_CACHE	memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_CACHE = 0,$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_DROP	memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_DROP,	\/* a page was unused swap cache *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_CHARGE_TYPE_SWAPOUT	memcontrol.c	/^	MEM_CGROUP_CHARGE_TYPE_SWAPOUT,	\/* for accounting swapcache *\/$/;"	e	enum:charge_type	file:
MEM_CGROUP_MAX_RECLAIM_LOOPS	memcontrol.c	208;"	d	file:
MEM_CGROUP_MAX_SOFT_LIMIT_RECLAIM_LOOPS	memcontrol.c	209;"	d	file:
MEM_CGROUP_RECLAIM_RETRIES	memcontrol.c	76;"	d	file:
MFD_ALL_FLAGS	memfd.c	248;"	d	file:
MFD_NAME_MAX_LEN	memfd.c	246;"	d	file:
MFD_NAME_PREFIX	memfd.c	244;"	d	file:
MFD_NAME_PREFIX_LEN	memfd.c	245;"	d	file:
MIDDLE	z3fold.c	/^	MIDDLE,$/;"	e	enum:buddy	file:
MIDDLE_CHUNK_MAPPED	z3fold.c	/^	MIDDLE_CHUNK_MAPPED,$/;"	e	enum:z3fold_page_flags	file:
MIN_GAP	util.c	362;"	d	file:
MIN_PARTIAL	slub.c	163;"	d	file:
MIN_PERCPU_PAGELIST_FRACTION	page_alloc.c	80;"	d	file:
MMAP_LOTSAMISS	filemap.c	2331;"	d	file:
MMINIT_TRACE	internal.h	/^	MMINIT_TRACE$/;"	e	enum:mminit_level
MMINIT_VERIFY	internal.h	/^	MMINIT_VERIFY,$/;"	e	enum:mminit_level
MMINIT_WARNING	internal.h	/^	MMINIT_WARNING,$/;"	e	enum:mminit_level
MM_SLAB_H	slab.h	3;"	d
MM_SLOTS_HASH_BITS	khugepaged.c	75;"	d	file:
MM_SLOTS_HASH_BITS	ksm.c	231;"	d	file:
MOVE_ANON	memcontrol.c	183;"	d	file:
MOVE_FILE	memcontrol.c	184;"	d	file:
MOVE_MASK	memcontrol.c	185;"	d	file:
MPOL_MF_DISCONTIG_OK	mempolicy.c	109;"	d	file:
MPOL_MF_INVERT	mempolicy.c	110;"	d	file:
MSECS_MIN_AGE	kmemleak.c	107;"	d	file:
NCHUNKS	z3fold.c	64;"	d	file:
NCHUNKS	zbud.c	74;"	d	file:
NCHUNKS_ORDER	z3fold.c	57;"	d	file:
NCHUNKS_ORDER	zbud.c	69;"	d	file:
NEEDS_COMPACTING	z3fold.c	/^	NEEDS_COMPACTING,$/;"	e	enum:z3fold_page_flags	file:
NE_FIT_TYPE	vmalloc.c	/^	NE_FIT_TYPE = 4		\/* no edge fit *\/$/;"	e	enum:fit_type	file:
NODE_RECLAIM_FULL	internal.h	472;"	d
NODE_RECLAIM_NOSCAN	internal.h	471;"	d
NODE_RECLAIM_PRIORITY	vmscan.c	4150;"	d	file:
NODE_RECLAIM_SOME	internal.h	473;"	d
NODE_RECLAIM_SUCCESS	internal.h	474;"	d
NOTHING_FIT	vmalloc.c	/^	NOTHING_FIT = 0,$/;"	e	enum:fit_type	file:
NR_CHARGE_TYPE	memcontrol.c	/^	NR_CHARGE_TYPE,$/;"	e	enum:charge_type	file:
NR_DIRTY_BG_THRESHOLD	vmstat.c	/^	NR_DIRTY_BG_THRESHOLD,$/;"	e	enum:writeback_stat_item	file:
NR_DIRTY_THRESHOLD	vmstat.c	/^	NR_DIRTY_THRESHOLD,$/;"	e	enum:writeback_stat_item	file:
NR_VM_WRITEBACK_STAT_ITEMS	vmstat.c	/^	NR_VM_WRITEBACK_STAT_ITEMS,$/;"	e	enum:writeback_stat_item	file:
NR_ZS_FULLNESS	zsmalloc.c	/^	NR_ZS_FULLNESS,$/;"	e	enum:fullness_group	file:
NR_ZS_STAT_TYPE	zsmalloc.c	/^	NR_ZS_STAT_TYPE,$/;"	e	enum:zs_stat_type	file:
NUMA	ksm.c	46;"	d	file:
NUMA	ksm.c	49;"	d	file:
NUMAINFO_EVENTS_TARGET	memcontrol.c	111;"	d	file:
NUMA_STATS_THRESHOLD	vmstat.c	34;"	d	file:
NUM_INIT_LISTS	slab.c	204;"	d	file:
OBJECT_ALLOCATED	kmemleak.c	166;"	d	file:
OBJECT_FULL_SCAN	kmemleak.c	172;"	d	file:
OBJECT_NO_SCAN	kmemleak.c	170;"	d	file:
OBJECT_REPORTED	kmemleak.c	168;"	d	file:
OBJFREELIST_SLAB	slab.c	256;"	d	file:
OBJ_ALLOCATED	zsmalloc.c	/^	OBJ_ALLOCATED,$/;"	e	enum:zs_stat_type	file:
OBJ_ALLOCATED_TAG	zsmalloc.c	119;"	d	file:
OBJ_INDEX_BITS	zsmalloc.c	121;"	d	file:
OBJ_INDEX_MASK	zsmalloc.c	122;"	d	file:
OBJ_TAG_BITS	zsmalloc.c	120;"	d	file:
OBJ_USED	zsmalloc.c	/^	OBJ_USED,$/;"	e	enum:zs_stat_type	file:
OFF_SLAB	slab.c	257;"	d	file:
OOM_ASYNC	memcontrol.c	/^	OOM_ASYNC,$/;"	e	enum:oom_status	file:
OOM_CONTROL	memcontrol.c	232;"	d	file:
OOM_FAILED	memcontrol.c	/^	OOM_FAILED,$/;"	e	enum:oom_status	file:
OOM_SKIPPED	memcontrol.c	/^	OOM_SKIPPED$/;"	e	enum:oom_status	file:
OOM_SUCCESS	memcontrol.c	/^	OOM_SUCCESS,$/;"	e	enum:oom_status	file:
OO_MASK	slub.c	191;"	d	file:
OO_SHIFT	slub.c	190;"	d	file:
Opt_gid	shmem.c	/^	Opt_gid,$/;"	e	enum:shmem_param	file:
Opt_huge	shmem.c	/^	Opt_huge,$/;"	e	enum:shmem_param	file:
Opt_mode	shmem.c	/^	Opt_mode,$/;"	e	enum:shmem_param	file:
Opt_mpol	shmem.c	/^	Opt_mpol,$/;"	e	enum:shmem_param	file:
Opt_nr_blocks	shmem.c	/^	Opt_nr_blocks,$/;"	e	enum:shmem_param	file:
Opt_nr_inodes	shmem.c	/^	Opt_nr_inodes,$/;"	e	enum:shmem_param	file:
Opt_size	shmem.c	/^	Opt_size,$/;"	e	enum:shmem_param	file:
Opt_uid	shmem.c	/^	Opt_uid,$/;"	e	enum:shmem_param	file:
P	percpu-stats.c	19;"	d	file:
PAGEREF_ACTIVATE	vmscan.c	/^	PAGEREF_ACTIVATE,$/;"	e	enum:page_references	file:
PAGEREF_KEEP	vmscan.c	/^	PAGEREF_KEEP,$/;"	e	enum:page_references	file:
PAGEREF_RECLAIM	vmscan.c	/^	PAGEREF_RECLAIM,$/;"	e	enum:page_references	file:
PAGEREF_RECLAIM_CLEAN	vmscan.c	/^	PAGEREF_RECLAIM_CLEAN,$/;"	e	enum:page_references	file:
PAGE_ACTIVATE	vmscan.c	/^	PAGE_ACTIVATE,$/;"	e	enum:__anon3	file:
PAGE_CLAIMED	z3fold.c	/^	PAGE_CLAIMED, \/* by either reclaim or free *\/$/;"	e	enum:z3fold_page_flags	file:
PAGE_CLEAN	vmscan.c	/^	PAGE_CLEAN,$/;"	e	enum:__anon3	file:
PAGE_HEADLESS	z3fold.c	/^	PAGE_HEADLESS = 0,$/;"	e	enum:z3fold_page_flags	file:
PAGE_KEEP	vmscan.c	/^	PAGE_KEEP,$/;"	e	enum:__anon3	file:
PAGE_OWNER_STACK_DEPTH	page_owner.c	20;"	d	file:
PAGE_STALE	z3fold.c	/^	PAGE_STALE,$/;"	e	enum:z3fold_page_flags	file:
PAGE_SUCCESS	vmscan.c	/^	PAGE_SUCCESS,$/;"	e	enum:__anon3	file:
PAGE_WAIT_TABLE_BITS	filemap.c	996;"	d	file:
PAGE_WAIT_TABLE_SIZE	filemap.c	997;"	d	file:
PARTIAL	slab.h	/^	PARTIAL,		\/* SLUB: kmem_cache_node available *\/$/;"	e	enum:slab_state
PARTIAL_NODE	slab.h	/^	PARTIAL_NODE,		\/* SLAB: kmalloc size for node struct available *\/$/;"	e	enum:slab_state
PA_HASH_ORDER	highmem.c	376;"	d	file:
PCPU_EMPTY_POP_PAGES_HIGH	percpu.c	100;"	d	file:
PCPU_EMPTY_POP_PAGES_LOW	percpu.c	99;"	d	file:
PCPU_SETUP_BUG_ON	percpu.c	2287;"	d	file:
PCPU_SETUP_BUG_ON	percpu.c	2380;"	d	file:
PCPU_SLOT_BASE_SHIFT	percpu.c	95;"	d	file:
PCPU_SLOT_FAIL_THRESHOLD	percpu.c	97;"	d	file:
PL	percpu-stats.c	160;"	d	file:
PL	percpu-stats.c	175;"	d	file:
PU	percpu-stats.c	177;"	d	file:
PU	percpu-stats.c	194;"	d	file:
PVM_MAX_KMALLOC_PAGES	process_vm_access.c	60;"	d	file:
PVM_MAX_PP_ARRAY_COUNT	process_vm_access.c	136;"	d	file:
PageHeadHuge	hugetlb.c	/^int PageHeadHuge(struct page *page_head)$/;"	f
PageHuge	hugetlb.c	/^EXPORT_SYMBOL_GPL(PageHuge);$/;"	v
PageHuge	hugetlb.c	/^int PageHuge(struct page *page)$/;"	f
PageHugeObject	zsmalloc.c	/^static int PageHugeObject(struct page *page)$/;"	f	file:
PageHugeTemporary	hugetlb.c	/^static inline bool PageHugeTemporary(struct page *page)$/;"	f	file:
PageMovable	compaction.c	/^EXPORT_SYMBOL(PageMovable);$/;"	v
PageMovable	compaction.c	/^int PageMovable(struct page *page)$/;"	f
QLIST_INIT	kasan/quarantine.c	48;"	d	file:
QUARANTINE_BATCHES	kasan/quarantine.c	92;"	d	file:
QUARANTINE_FRACTION	kasan/quarantine.c	124;"	d	file:
QUARANTINE_PERCPU_SIZE	kasan/quarantine.c	91;"	d	file:
RATELIMIT_CALC_SHIFT	page-writeback.c	61;"	d	file:
REAPTIMEOUT_AC	slab.c	267;"	d	file:
REAPTIMEOUT_NODE	slab.c	268;"	d	file:
RECLAIM_OFF	vmscan.c	4140;"	d	file:
RECLAIM_UNMAP	vmscan.c	4143;"	d	file:
RECLAIM_WRITE	vmscan.c	4142;"	d	file:
RECLAIM_ZONE	vmscan.c	4141;"	d	file:
REDZONE_ALIGN	slab.c	155;"	d	file:
RES_FAILCNT	hugetlb_cgroup.c	/^	RES_FAILCNT,$/;"	e	enum:__anon1	file:
RES_FAILCNT	memcontrol.c	/^	RES_FAILCNT,$/;"	e	enum:__anon4	file:
RES_LIMIT	hugetlb_cgroup.c	/^	RES_LIMIT,$/;"	e	enum:__anon1	file:
RES_LIMIT	memcontrol.c	/^	RES_LIMIT,$/;"	e	enum:__anon4	file:
RES_MAX_USAGE	hugetlb_cgroup.c	/^	RES_MAX_USAGE,$/;"	e	enum:__anon1	file:
RES_MAX_USAGE	memcontrol.c	/^	RES_MAX_USAGE,$/;"	e	enum:__anon4	file:
RES_SOFT_LIMIT	memcontrol.c	/^	RES_SOFT_LIMIT,$/;"	e	enum:__anon4	file:
RES_USAGE	hugetlb_cgroup.c	/^	RES_USAGE,$/;"	e	enum:__anon1	file:
RES_USAGE	memcontrol.c	/^	RES_USAGE,$/;"	e	enum:__anon4	file:
RE_FIT_TYPE	vmalloc.c	/^	RE_FIT_TYPE = 3,	\/* right edge fit *\/$/;"	e	enum:fit_type	file:
SCAN_ADDRESS_RANGE	khugepaged.c	/^	SCAN_ADDRESS_RANGE,$/;"	e	enum:scan_result	file:
SCAN_ALLOC_HUGE_PAGE_FAIL	khugepaged.c	/^	SCAN_ALLOC_HUGE_PAGE_FAIL,$/;"	e	enum:scan_result	file:
SCAN_ANON	vmscan.c	/^	SCAN_ANON,$/;"	e	enum:scan_balance	file:
SCAN_ANY_PROCESS	khugepaged.c	/^	SCAN_ANY_PROCESS,$/;"	e	enum:scan_result	file:
SCAN_CGROUP_CHARGE_FAIL	khugepaged.c	/^	SCAN_CGROUP_CHARGE_FAIL,$/;"	e	enum:scan_result	file:
SCAN_DEL_PAGE_LRU	khugepaged.c	/^	SCAN_DEL_PAGE_LRU,$/;"	e	enum:scan_result	file:
SCAN_EQUAL	vmscan.c	/^	SCAN_EQUAL,$/;"	e	enum:scan_balance	file:
SCAN_EXCEED_NONE_PTE	khugepaged.c	/^	SCAN_EXCEED_NONE_PTE,$/;"	e	enum:scan_result	file:
SCAN_EXCEED_SWAP_PTE	khugepaged.c	/^	SCAN_EXCEED_SWAP_PTE,$/;"	e	enum:scan_result	file:
SCAN_FAIL	khugepaged.c	/^	SCAN_FAIL,$/;"	e	enum:scan_result	file:
SCAN_FILE	vmscan.c	/^	SCAN_FILE,$/;"	e	enum:scan_balance	file:
SCAN_FRACT	vmscan.c	/^	SCAN_FRACT,$/;"	e	enum:scan_balance	file:
SCAN_LACK_REFERENCED_PAGE	khugepaged.c	/^	SCAN_LACK_REFERENCED_PAGE,$/;"	e	enum:scan_result	file:
SCAN_PAGE_ANON	khugepaged.c	/^	SCAN_PAGE_ANON,$/;"	e	enum:scan_result	file:
SCAN_PAGE_COMPOUND	khugepaged.c	/^	SCAN_PAGE_COMPOUND,$/;"	e	enum:scan_result	file:
SCAN_PAGE_COUNT	khugepaged.c	/^	SCAN_PAGE_COUNT,$/;"	e	enum:scan_result	file:
SCAN_PAGE_HAS_PRIVATE	khugepaged.c	/^	SCAN_PAGE_HAS_PRIVATE,$/;"	e	enum:scan_result	file:
SCAN_PAGE_LOCK	khugepaged.c	/^	SCAN_PAGE_LOCK,$/;"	e	enum:scan_result	file:
SCAN_PAGE_LRU	khugepaged.c	/^	SCAN_PAGE_LRU,$/;"	e	enum:scan_result	file:
SCAN_PAGE_NULL	khugepaged.c	/^	SCAN_PAGE_NULL,$/;"	e	enum:scan_result	file:
SCAN_PAGE_RO	khugepaged.c	/^	SCAN_PAGE_RO,$/;"	e	enum:scan_result	file:
SCAN_PMD_NULL	khugepaged.c	/^	SCAN_PMD_NULL,$/;"	e	enum:scan_result	file:
SCAN_PTE_NON_PRESENT	khugepaged.c	/^	SCAN_PTE_NON_PRESENT,$/;"	e	enum:scan_result	file:
SCAN_SCAN_ABORT	khugepaged.c	/^	SCAN_SCAN_ABORT,$/;"	e	enum:scan_result	file:
SCAN_SUCCEED	khugepaged.c	/^	SCAN_SUCCEED,$/;"	e	enum:scan_result	file:
SCAN_SWAP_CACHE_PAGE	khugepaged.c	/^	SCAN_SWAP_CACHE_PAGE,$/;"	e	enum:scan_result	file:
SCAN_TRUNCATED	khugepaged.c	/^	SCAN_TRUNCATED,$/;"	e	enum:scan_result	file:
SCAN_VMA_CHECK	khugepaged.c	/^	SCAN_VMA_CHECK,$/;"	e	enum:scan_result	file:
SCAN_VMA_NULL	khugepaged.c	/^	SCAN_VMA_NULL,$/;"	e	enum:scan_result	file:
SC_PER_PAGE	swap_cgroup.c	20;"	d	file:
SECS_FIRST_SCAN	kmemleak.c	108;"	d	file:
SECS_SCAN_WAIT	kmemleak.c	109;"	d	file:
SECTIONS_SHIFT	mm_init.c	22;"	d	file:
SEQNR_MASK	ksm.c	215;"	d	file:
SHADOW_BLOCKS_PER_ROW	kasan/report.c	40;"	d	file:
SHADOW_BYTES_PER_BLOCK	kasan/report.c	39;"	d	file:
SHADOW_BYTES_PER_ROW	kasan/report.c	41;"	d	file:
SHADOW_ROWS_AROUND_ADDR	kasan/report.c	42;"	d	file:
SHARED	filemap.c	/^	SHARED,		\/* Hold ref to page and check the bit when woken, like$/;"	e	enum:behavior	file:
SHMEM_HUGE_ADVISE	shmem.c	398;"	d	file:
SHMEM_HUGE_ALWAYS	shmem.c	396;"	d	file:
SHMEM_HUGE_DENY	shmem.c	410;"	d	file:
SHMEM_HUGE_FORCE	shmem.c	411;"	d	file:
SHMEM_HUGE_NEVER	shmem.c	395;"	d	file:
SHMEM_HUGE_WITHIN_SIZE	shmem.c	397;"	d	file:
SHMEM_SB	shmem.c	/^static inline struct shmem_sb_info *SHMEM_SB(struct super_block *sb)$/;"	f	file:
SHMEM_SEEN_BLOCKS	shmem.c	120;"	d	file:
SHMEM_SEEN_HUGE	shmem.c	122;"	d	file:
SHMEM_SEEN_INODES	shmem.c	121;"	d	file:
SHORT_SYMLINK_LEN	shmem.c	96;"	d	file:
SHRINKER_REGISTERING	vmscan.c	201;"	d	file:
SHRINK_BATCH	vmscan.c	460;"	d	file:
SHRINK_PROMOTE_MAX	slub.c	4006;"	d	file:
SHUFFLE_ENABLE	shuffle.h	/^	SHUFFLE_ENABLE,$/;"	e	enum:mm_shuffle_ctl
SHUFFLE_FORCE_DISABLE	shuffle.h	/^	SHUFFLE_FORCE_DISABLE,$/;"	e	enum:mm_shuffle_ctl
SHUFFLE_ORDER	shuffle.h	19;"	d
SHUFFLE_RETRY	shuffle.c	104;"	d	file:
SIZE_NODE	slab.c	207;"	d	file:
SLABINFO_RIGHTS	slab_common.c	1410;"	d	file:
SLABINFO_RIGHTS	slab_common.c	1412;"	d	file:
SLAB_ATTR	slub.c	4966;"	d	file:
SLAB_ATTR_RO	slub.c	4962;"	d	file:
SLAB_CACHE_FLAGS	slab.h	207;"	d
SLAB_CACHE_FLAGS	slab.h	211;"	d
SLAB_CACHE_FLAGS	slab.h	214;"	d
SLAB_CORE_FLAGS	slab.h	193;"	d
SLAB_DEBUG_FLAGS	slab.h	198;"	d
SLAB_DEBUG_FLAGS	slab.h	200;"	d
SLAB_DEBUG_FLAGS	slab.h	203;"	d
SLAB_FLAGS_PERMITTED	slab.h	221;"	d
SLAB_MAX_ORDER_HI	slab.c	369;"	d	file:
SLAB_MAX_ORDER_LO	slab.c	370;"	d	file:
SLAB_MERGE_SAME	slab_common.c	56;"	d	file:
SLAB_NEVER_MERGE	slab_common.c	52;"	d	file:
SLAB_NO_CMPXCHG	slub.c	179;"	d	file:
SLAB_OBJ_MAX_NUM	slab.c	170;"	d	file:
SLOB_BREAK1	slob.c	99;"	d	file:
SLOB_BREAK2	slob.c	100;"	d	file:
SLOB_UNIT	slob.c	125;"	d	file:
SLOB_UNITS	slob.c	126;"	d	file:
SLOTS_ALIGN	z3fold.c	68;"	d	file:
SLOTS_CACHE	swap_slots.c	51;"	d	file:
SLOTS_CACHE_RET	swap_slots.c	52;"	d	file:
SLUB_DEBUG_CMPXCHG	slub.c	157;"	d	file:
SLUB_RESILIENCY_TEST	slub.c	154;"	d	file:
SL_ALL	slub.c	/^	SL_ALL,			\/* All slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_CPU	slub.c	/^	SL_CPU,			\/* Only slabs used for cpu caches *\/$/;"	e	enum:slab_stat_type	file:
SL_OBJECTS	slub.c	/^	SL_OBJECTS,		\/* Determine allocated objects not slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_PARTIAL	slub.c	/^	SL_PARTIAL,		\/* Only partially allocated slabs *\/$/;"	e	enum:slab_stat_type	file:
SL_TOTAL	slub.c	/^	SL_TOTAL		\/* Determine object capacity not slabs *\/$/;"	e	enum:slab_stat_type	file:
SOFTLIMIT_EVENTS_TARGET	memcontrol.c	110;"	d	file:
SO_ALL	slub.c	4811;"	d	file:
SO_CPU	slub.c	4813;"	d	file:
SO_OBJECTS	slub.c	4814;"	d	file:
SO_PARTIAL	slub.c	4812;"	d	file:
SO_TOTAL	slub.c	4815;"	d	file:
STABLE_FLAG	ksm.c	217;"	d	file:
STABLE_NODE_CHAIN	ksm.c	176;"	d	file:
STABLE_NODE_DUP_HEAD	ksm.c	229;"	d	file:
STACK_RND_MASK	util.c	304;"	d	file:
STATS	slab.c	145;"	d	file:
STATS	slab.c	149;"	d	file:
STATS_ADD_REAPED	slab.c	275;"	d	file:
STATS_ADD_REAPED	slab.c	299;"	d	file:
STATS_DEC_ACTIVE	slab.c	272;"	d	file:
STATS_DEC_ACTIVE	slab.c	296;"	d	file:
STATS_INC_ACOVERFLOW	slab.c	284;"	d	file:
STATS_INC_ACOVERFLOW	slab.c	304;"	d	file:
STATS_INC_ACTIVE	slab.c	271;"	d	file:
STATS_INC_ACTIVE	slab.c	295;"	d	file:
STATS_INC_ALLOCED	slab.c	273;"	d	file:
STATS_INC_ALLOCED	slab.c	297;"	d	file:
STATS_INC_ALLOCHIT	slab.c	290;"	d	file:
STATS_INC_ALLOCHIT	slab.c	306;"	d	file:
STATS_INC_ALLOCMISS	slab.c	291;"	d	file:
STATS_INC_ALLOCMISS	slab.c	307;"	d	file:
STATS_INC_ERR	slab.c	281;"	d	file:
STATS_INC_ERR	slab.c	301;"	d	file:
STATS_INC_FREEHIT	slab.c	292;"	d	file:
STATS_INC_FREEHIT	slab.c	308;"	d	file:
STATS_INC_FREEMISS	slab.c	293;"	d	file:
STATS_INC_FREEMISS	slab.c	309;"	d	file:
STATS_INC_GROWN	slab.c	274;"	d	file:
STATS_INC_GROWN	slab.c	298;"	d	file:
STATS_INC_NODEALLOCS	slab.c	282;"	d	file:
STATS_INC_NODEALLOCS	slab.c	302;"	d	file:
STATS_INC_NODEFREES	slab.c	283;"	d	file:
STATS_INC_NODEFREES	slab.c	303;"	d	file:
STATS_SET_FREEABLE	slab.c	285;"	d	file:
STATS_SET_FREEABLE	slab.c	305;"	d	file:
STATS_SET_HIGH	slab.c	276;"	d	file:
STATS_SET_HIGH	slab.c	300;"	d	file:
STAT_ATTR	slub.c	5425;"	d	file:
SWAPFILE_CLUSTER	swapfile.c	254;"	d	file:
SWAPFILE_CLUSTER	swapfile.c	258;"	d	file:
SWAP_CLUSTER_COLS	swapfile.c	3000;"	d	file:
SWAP_CLUSTER_INFO_COLS	swapfile.c	2996;"	d	file:
SWAP_CLUSTER_SPACE_COLS	swapfile.c	2998;"	d	file:
SWAP_RA_ADDR	swap_state.c	51;"	d	file:
SWAP_RA_HITS	swap_state.c	49;"	d	file:
SWAP_RA_HITS_MASK	swap_state.c	45;"	d	file:
SWAP_RA_HITS_MAX	swap_state.c	46;"	d	file:
SWAP_RA_VAL	swap_state.c	53;"	d	file:
SWAP_RA_WIN	swap_state.c	50;"	d	file:
SWAP_RA_WIN_MASK	swap_state.c	47;"	d	file:
SWAP_RA_WIN_SHIFT	swap_state.c	44;"	d	file:
SYSCALL_DEFINE0	mlock.c	/^SYSCALL_DEFINE0(munlockall)$/;"	f
SYSCALL_DEFINE1	mlock.c	/^SYSCALL_DEFINE1(mlockall, int, flags)$/;"	f
SYSCALL_DEFINE1	mmap.c	/^SYSCALL_DEFINE1(brk, unsigned long, brk)$/;"	f
SYSCALL_DEFINE1	mmap.c	/^SYSCALL_DEFINE1(old_mmap, struct mmap_arg_struct __user *, arg)$/;"	f
SYSCALL_DEFINE1	mprotect.c	/^SYSCALL_DEFINE1(pkey_free, int, pkey)$/;"	f
SYSCALL_DEFINE1	nommu.c	/^SYSCALL_DEFINE1(brk, unsigned long, brk)$/;"	f
SYSCALL_DEFINE1	nommu.c	/^SYSCALL_DEFINE1(old_mmap, struct mmap_arg_struct __user *, arg)$/;"	f
SYSCALL_DEFINE1	swapfile.c	/^SYSCALL_DEFINE1(swapoff, const char __user *, specialfile)$/;"	f
SYSCALL_DEFINE2	memfd.c	/^SYSCALL_DEFINE2(memfd_create,$/;"	f
SYSCALL_DEFINE2	mlock.c	/^SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len)$/;"	f
SYSCALL_DEFINE2	mlock.c	/^SYSCALL_DEFINE2(munlock, unsigned long, start, size_t, len)$/;"	f
SYSCALL_DEFINE2	mmap.c	/^SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)$/;"	f
SYSCALL_DEFINE2	mprotect.c	/^SYSCALL_DEFINE2(pkey_alloc, unsigned long, flags, unsigned long, init_val)$/;"	f
SYSCALL_DEFINE2	nommu.c	/^SYSCALL_DEFINE2(munmap, unsigned long, addr, size_t, len)$/;"	f
SYSCALL_DEFINE2	swapfile.c	/^SYSCALL_DEFINE2(swapon, const char __user *, specialfile, int, swap_flags)$/;"	f
SYSCALL_DEFINE3	madvise.c	/^SYSCALL_DEFINE3(madvise, unsigned long, start, size_t, len_in, int, behavior)$/;"	f
SYSCALL_DEFINE3	mempolicy.c	/^SYSCALL_DEFINE3(set_mempolicy, int, mode, const unsigned long __user *, nmask,$/;"	f
SYSCALL_DEFINE3	mincore.c	/^SYSCALL_DEFINE3(mincore, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE3	mlock.c	/^SYSCALL_DEFINE3(mlock2, unsigned long, start, size_t, len, int, flags)$/;"	f
SYSCALL_DEFINE3	mprotect.c	/^SYSCALL_DEFINE3(mprotect, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE3	msync.c	/^SYSCALL_DEFINE3(msync, unsigned long, start, size_t, len, int, flags)$/;"	f
SYSCALL_DEFINE3	readahead.c	/^SYSCALL_DEFINE3(readahead, int, fd, loff_t, offset, size_t, count)$/;"	f
SYSCALL_DEFINE4	fadvise.c	/^SYSCALL_DEFINE4(fadvise64, int, fd, loff_t, offset, size_t, len, int, advice)$/;"	f
SYSCALL_DEFINE4	fadvise.c	/^SYSCALL_DEFINE4(fadvise64_64, int, fd, loff_t, offset, loff_t, len, int, advice)$/;"	f
SYSCALL_DEFINE4	mempolicy.c	/^SYSCALL_DEFINE4(migrate_pages, pid_t, pid, unsigned long, maxnode,$/;"	f
SYSCALL_DEFINE4	mprotect.c	/^SYSCALL_DEFINE4(pkey_mprotect, unsigned long, start, size_t, len,$/;"	f
SYSCALL_DEFINE5	mempolicy.c	/^SYSCALL_DEFINE5(get_mempolicy, int __user *, policy,$/;"	f
SYSCALL_DEFINE5	mmap.c	/^SYSCALL_DEFINE5(remap_file_pages, unsigned long, start, unsigned long, size,$/;"	f
SYSCALL_DEFINE5	mremap.c	/^SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,$/;"	f
SYSCALL_DEFINE5	nommu.c	/^SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,$/;"	f
SYSCALL_DEFINE6	mempolicy.c	/^SYSCALL_DEFINE6(mbind, unsigned long, start, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	migrate.c	/^SYSCALL_DEFINE6(move_pages, pid_t, pid, unsigned long, nr_pages,$/;"	f
SYSCALL_DEFINE6	mmap.c	/^SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	nommu.c	/^SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,$/;"	f
SYSCALL_DEFINE6	process_vm_access.c	/^SYSCALL_DEFINE6(process_vm_readv, pid_t, pid, const struct iovec __user *, lvec,$/;"	f
SYSCALL_DEFINE6	process_vm_access.c	/^SYSCALL_DEFINE6(process_vm_writev, pid_t, pid,$/;"	f
SetPageHugeObject	zsmalloc.c	/^static void SetPageHugeObject(struct page *page)$/;"	f	file:
SetPageHugeTemporary	hugetlb.c	/^static inline void SetPageHugeTemporary(struct page *page)$/;"	f	file:
SetZsPageMovable	zsmalloc.c	/^static void SetZsPageMovable(struct zs_pool *pool, struct zspage *zspage) {}$/;"	f	file:
SetZsPageMovable	zsmalloc.c	/^static void SetZsPageMovable(struct zs_pool *pool, struct zspage *zspage)$/;"	f	file:
TASK_RSS_EVENTS_THRESH	memory.c	172;"	d	file:
TEXTS_FOR_ZONES	vmstat.c	1106;"	d	file:
TEXT_FOR_DMA	vmstat.c	1089;"	d	file:
TEXT_FOR_DMA	vmstat.c	1091;"	d	file:
TEXT_FOR_DMA32	vmstat.c	1095;"	d	file:
TEXT_FOR_DMA32	vmstat.c	1097;"	d	file:
TEXT_FOR_HIGHMEM	vmstat.c	1101;"	d	file:
TEXT_FOR_HIGHMEM	vmstat.c	1103;"	d	file:
THRESHOLDS_EVENTS_TARGET	memcontrol.c	109;"	d	file:
TID_STEP	slub.c	1989;"	d	file:
TID_STEP	slub.c	1995;"	d	file:
TOTAL_CHUNKS	z3fold.c	63;"	d	file:
TRACK_ADDRS_COUNT	slub.c	203;"	d	file:
TRACK_ALLOC	slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	e	enum:track_item	file:
TRACK_FREE	slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	e	enum:track_item	file:
TTRS_ANYWAY	swapfile.c	117;"	d	file:
TTRS_FULL	swapfile.c	124;"	d	file:
TTRS_UNMAPPED	swapfile.c	122;"	d	file:
UBSAN_SANITIZE_common.o	kasan/Makefile	/^UBSAN_SANITIZE_common.o := n$/;"	m
UBSAN_SANITIZE_generic.o	kasan/Makefile	/^UBSAN_SANITIZE_generic.o := n$/;"	m
UBSAN_SANITIZE_generic_report.o	kasan/Makefile	/^UBSAN_SANITIZE_generic_report.o := n$/;"	m
UBSAN_SANITIZE_tags.o	kasan/Makefile	/^UBSAN_SANITIZE_tags.o := n$/;"	m
UNSTABLE_FLAG	ksm.c	216;"	d	file:
UP	slab.h	/^	UP,			\/* Slab caches usable but not all extras yet *\/$/;"	e	enum:slab_state
Unused_file	swapfile.c	/^static const char Unused_file[] = "Unused swap file entry ";$/;"	v	file:
Unused_offset	swapfile.c	/^static const char Unused_offset[] = "Unused swap offset entry ";$/;"	v	file:
VMACACHE_HASH	vmacache.c	20;"	d	file:
VMACACHE_SHIFT	vmacache.c	16;"	d	file:
VMACACHE_SHIFT	vmacache.c	18;"	d	file:
VMALLOC_PAGES	vmalloc.c	1387;"	d	file:
VMALLOC_SPACE	vmalloc.c	1382;"	d	file:
VMALLOC_SPACE	vmalloc.c	1384;"	d	file:
VMAP_BBMAP_BITS	vmalloc.c	1393;"	d	file:
VMAP_BBMAP_BITS_MAX	vmalloc.c	1389;"	d	file:
VMAP_BBMAP_BITS_MIN	vmalloc.c	1390;"	d	file:
VMAP_BLOCK_SIZE	vmalloc.c	1398;"	d	file:
VMAP_MAX	vmalloc.c	1392;"	d	file:
VMAP_MAX_ALLOC	vmalloc.c	1388;"	d	file:
VMAP_MIN	vmalloc.c	1391;"	d	file:
VMA_ADD_RESV	hugetlb.c	/^	VMA_ADD_RESV,$/;"	e	enum:vma_resv_mode	file:
VMA_COMMIT_RESV	hugetlb.c	/^	VMA_COMMIT_RESV,$/;"	e	enum:vma_resv_mode	file:
VMA_END_RESV	hugetlb.c	/^	VMA_END_RESV,$/;"	e	enum:vma_resv_mode	file:
VMA_NEEDS_RESV	hugetlb.c	/^	VMA_NEEDS_RESV,$/;"	e	enum:vma_resv_mode	file:
VMPRESSURE_CRITICAL	vmpressure.c	/^	VMPRESSURE_CRITICAL,$/;"	e	enum:vmpressure_levels	file:
VMPRESSURE_HIERARCHY	vmpressure.c	/^	VMPRESSURE_HIERARCHY,$/;"	e	enum:vmpressure_modes	file:
VMPRESSURE_LOCAL	vmpressure.c	/^	VMPRESSURE_LOCAL,$/;"	e	enum:vmpressure_modes	file:
VMPRESSURE_LOW	vmpressure.c	/^	VMPRESSURE_LOW = 0,$/;"	e	enum:vmpressure_levels	file:
VMPRESSURE_MEDIUM	vmpressure.c	/^	VMPRESSURE_MEDIUM,$/;"	e	enum:vmpressure_levels	file:
VMPRESSURE_NO_PASSTHROUGH	vmpressure.c	/^	VMPRESSURE_NO_PASSTHROUGH = 0,$/;"	e	enum:vmpressure_modes	file:
VMPRESSURE_NUM_LEVELS	vmpressure.c	/^	VMPRESSURE_NUM_LEVELS,$/;"	e	enum:vmpressure_levels	file:
VMPRESSURE_NUM_MODES	vmpressure.c	/^	VMPRESSURE_NUM_MODES,$/;"	e	enum:vmpressure_modes	file:
VM_ACCT	shmem.c	90;"	d	file:
VM_COMPLETIONS_PERIOD_LEN	page-writeback.c	154;"	d	file:
VM_NO_KHUGEPAGED	khugepaged.c	311;"	d	file:
WD_PAGE_COUNT	page_alloc.c	2961;"	d	file:
ZHDR_CHUNKS	z3fold.c	62;"	d	file:
ZHDR_SIZE_ALIGNED	z3fold.c	61;"	d	file:
ZHDR_SIZE_ALIGNED	zbud.c	73;"	d	file:
ZSPAGE_MAGIC	zsmalloc.c	61;"	d	file:
ZSWAP_COMPRESSOR_DEFAULT	zswap.c	85;"	d	file:
ZSWAP_PARAM_UNSET	zswap.c	72;"	d	file:
ZSWAP_SWAPCACHE_EXIST	zswap.c	/^	ZSWAP_SWAPCACHE_EXIST,$/;"	e	enum:zswap_get_swap_ret	file:
ZSWAP_SWAPCACHE_FAIL	zswap.c	/^	ZSWAP_SWAPCACHE_FAIL,$/;"	e	enum:zswap_get_swap_ret	file:
ZSWAP_SWAPCACHE_NEW	zswap.c	/^	ZSWAP_SWAPCACHE_NEW,$/;"	e	enum:zswap_get_swap_ret	file:
ZSWAP_ZPOOL_DEFAULT	zswap.c	98;"	d	file:
ZS_ALIGN	zsmalloc.c	69;"	d	file:
ZS_ALMOST_EMPTY	zsmalloc.c	/^	ZS_ALMOST_EMPTY,$/;"	e	enum:fullness_group	file:
ZS_ALMOST_FULL	zsmalloc.c	/^	ZS_ALMOST_FULL,$/;"	e	enum:fullness_group	file:
ZS_EMPTY	zsmalloc.c	/^	ZS_EMPTY,$/;"	e	enum:fullness_group	file:
ZS_FULL	zsmalloc.c	/^	ZS_FULL,$/;"	e	enum:fullness_group	file:
ZS_HANDLE_SIZE	zsmalloc.c	78;"	d	file:
ZS_MAX_ALLOC_SIZE	zsmalloc.c	134;"	d	file:
ZS_MAX_PAGES_PER_ZSPAGE	zsmalloc.c	76;"	d	file:
ZS_MAX_ZSPAGE_ORDER	zsmalloc.c	75;"	d	file:
ZS_MIN_ALLOC_SIZE	zsmalloc.c	131;"	d	file:
ZS_SIZE_CLASSES	zsmalloc.c	150;"	d	file:
ZS_SIZE_CLASS_DELTA	zsmalloc.c	149;"	d	file:
_KMEM	memcontrol.c	/^	_KMEM,$/;"	e	enum:res_type	file:
_MEM	memcontrol.c	/^	_MEM,$/;"	e	enum:res_type	file:
_MEMSWAP	memcontrol.c	/^	_MEMSWAP,$/;"	e	enum:res_type	file:
_MM_PERCPU_INTERNAL_H	percpu-internal.h	3;"	d
_MM_SHUFFLE_H	shuffle.h	4;"	d
_OOM_TYPE	memcontrol.c	/^	_OOM_TYPE,$/;"	e	enum:res_type	file:
_PFN_BITS	zsmalloc.c	101;"	d	file:
_TCP	memcontrol.c	/^	_TCP,$/;"	e	enum:res_type	file:
__CMPXCHG_DOUBLE	slub.c	198;"	d	file:
__ClearPageMovable	compaction.c	/^EXPORT_SYMBOL(__ClearPageMovable);$/;"	v
__ClearPageMovable	compaction.c	/^void __ClearPageMovable(struct page *page)$/;"	f
__MM_CMA_H__	cma.h	3;"	d
__MM_INTERNAL_H	internal.h	8;"	d
__MM_KASAN_KASAN_H	kasan/kasan.h	3;"	d
__OBJECT_POISON	slub.c	196;"	d	file:
__SetPageMovable	compaction.c	/^EXPORT_SYMBOL(__SetPageMovable);$/;"	v
__SetPageMovable	compaction.c	/^void __SetPageMovable(struct page *page, struct address_space *mapping)$/;"	f
____cache_alloc	slab.c	/^static inline void *____cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
____cache_alloc_node	slab.c	/^static inline void *____cache_alloc_node(struct kmem_cache *cachep,$/;"	f	file:
____cache_alloc_node	slab.c	/^static void *____cache_alloc_node(struct kmem_cache *cachep, gfp_t flags,$/;"	f	file:
____cacheline_aligned_in_smp	hugetlb.c	/^struct mutex *hugetlb_fault_mutex_table ____cacheline_aligned_in_smp;$/;"	v	typeref:struct:hugetlb_fault_mutex_table
____cacheline_aligned_in_smp	util.c	/^struct percpu_counter vm_committed_as ____cacheline_aligned_in_smp;$/;"	v	typeref:struct:vm_committed_as
____cacheline_internodealigned_in_smp	sparse.c	/^	____cacheline_internodealigned_in_smp;$/;"	v	typeref:struct:mem_section
___cache_free	slab.c	/^void ___cache_free(struct kmem_cache *cachep, void *objp,$/;"	f
___cache_free	slub.c	/^void ___cache_free(struct kmem_cache *cache, void *x, unsigned long addr)$/;"	f
___slab_alloc	slub.c	/^static void *___slab_alloc(struct kmem_cache *s, gfp_t gfpflags, int node,$/;"	f	file:
__absent_pages_in_range	page_alloc.c	/^unsigned long __init __absent_pages_in_range(int nid,$/;"	f
__access_remote_vm	memory.c	/^int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
__access_remote_vm	nommu.c	/^int __access_remote_vm(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
__account_locked_vm	util.c	/^EXPORT_SYMBOL_GPL(__account_locked_vm);$/;"	v
__account_locked_vm	util.c	/^int __account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc,$/;"	f
__activate_page	swap.c	/^static void __activate_page(struct page *page, struct lruvec *lruvec,$/;"	f	file:
__add_memory	memory_hotplug.c	/^int __ref __add_memory(int nid, u64 start, u64 size)$/;"	f
__add_pages	memory_hotplug.c	/^int __ref __add_pages(int nid, unsigned long pfn, unsigned long nr_pages,$/;"	f
__add_partial	slub.c	/^__add_partial(struct kmem_cache_node *n, struct page *page, int tail)$/;"	f	file:
__add_to_page_cache_locked	filemap.c	/^static int __add_to_page_cache_locked(struct page *page,$/;"	f	file:
__addr_to_pcpu_ptr	percpu.c	105;"	d	file:
__addr_to_pcpu_ptr	percpu.c	118;"	d	file:
__alloc_alien_cache	slab.c	/^static struct alien_cache *__alloc_alien_cache(int node, int entries,$/;"	f	file:
__alloc_bootmem_huge_page	hugetlb.c	/^int __alloc_bootmem_huge_page(struct hstate *h)$/;"	f
__alloc_contig_migrate_range	page_alloc.c	/^static int __alloc_contig_migrate_range(struct compact_control *cc,$/;"	f	file:
__alloc_gigantic_page	hugetlb.c	/^static int __alloc_gigantic_page(unsigned long start_pfn,$/;"	f	file:
__alloc_pages_cpuset_fallback	page_alloc.c	/^__alloc_pages_cpuset_fallback(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_direct_compact	page_alloc.c	/^__alloc_pages_direct_compact(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_direct_reclaim	page_alloc.c	/^__alloc_pages_direct_reclaim(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_may_oom	page_alloc.c	/^__alloc_pages_may_oom(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_pages_nodemask	page_alloc.c	/^EXPORT_SYMBOL(__alloc_pages_nodemask);$/;"	v
__alloc_pages_nodemask	page_alloc.c	/^__alloc_pages_nodemask(gfp_t gfp_mask, unsigned int order, int preferred_nid,$/;"	f
__alloc_pages_slowpath	page_alloc.c	/^__alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__alloc_percpu	percpu.c	/^EXPORT_SYMBOL_GPL(__alloc_percpu);$/;"	v
__alloc_percpu	percpu.c	/^void __percpu *__alloc_percpu(size_t size, size_t align)$/;"	f
__alloc_percpu_gfp	percpu.c	/^EXPORT_SYMBOL_GPL(__alloc_percpu_gfp);$/;"	v
__alloc_percpu_gfp	percpu.c	/^void __percpu *__alloc_percpu_gfp(size_t size, size_t align, gfp_t gfp)$/;"	f
__alloc_reserved_percpu	percpu.c	/^void __percpu *__alloc_reserved_percpu(size_t size, size_t align)$/;"	f
__alloc_vmap_area	vmalloc.c	/^__alloc_vmap_area(unsigned long size, unsigned long align,$/;"	f	file:
__anon_vma_prepare	rmap.c	/^int __anon_vma_prepare(struct vm_area_struct *vma)$/;"	f
__asan_alloca_poison	kasan/generic.c	/^EXPORT_SYMBOL(__asan_alloca_poison);$/;"	v
__asan_alloca_poison	kasan/generic.c	/^void __asan_alloca_poison(unsigned long addr, size_t size)$/;"	f
__asan_allocas_unpoison	kasan/generic.c	/^EXPORT_SYMBOL(__asan_allocas_unpoison);$/;"	v
__asan_allocas_unpoison	kasan/generic.c	/^void __asan_allocas_unpoison(const void *stack_top, const void *stack_bottom)$/;"	f
__asan_handle_no_return	kasan/generic.c	/^EXPORT_SYMBOL(__asan_handle_no_return);$/;"	v
__asan_handle_no_return	kasan/generic.c	/^void __asan_handle_no_return(void) {}$/;"	f
__asan_loadN	kasan/generic.c	/^EXPORT_SYMBOL(__asan_loadN);$/;"	v
__asan_loadN	kasan/generic.c	/^void __asan_loadN(unsigned long addr, size_t size)$/;"	f
__asan_register_globals	kasan/generic.c	/^EXPORT_SYMBOL(__asan_register_globals);$/;"	v
__asan_register_globals	kasan/generic.c	/^void __asan_register_globals(struct kasan_global *globals, size_t size)$/;"	f
__asan_report_load_n_noabort	kasan/generic_report.c	/^EXPORT_SYMBOL(__asan_report_load_n_noabort);$/;"	v
__asan_report_load_n_noabort	kasan/generic_report.c	/^void __asan_report_load_n_noabort(unsigned long addr, size_t size)$/;"	f
__asan_report_store_n_noabort	kasan/generic_report.c	/^EXPORT_SYMBOL(__asan_report_store_n_noabort);$/;"	v
__asan_report_store_n_noabort	kasan/generic_report.c	/^void __asan_report_store_n_noabort(unsigned long addr, size_t size)$/;"	f
__asan_storeN	kasan/generic.c	/^EXPORT_SYMBOL(__asan_storeN);$/;"	v
__asan_storeN	kasan/generic.c	/^void __asan_storeN(unsigned long addr, size_t size)$/;"	f
__asan_unregister_globals	kasan/generic.c	/^EXPORT_SYMBOL(__asan_unregister_globals);$/;"	v
__asan_unregister_globals	kasan/generic.c	/^void __asan_unregister_globals(struct kasan_global *globals, size_t size)$/;"	f
__basepage_index	hugetlb.c	/^pgoff_t __basepage_index(struct page *page)$/;"	f
__buffer_migrate_page	migrate.c	/^static int __buffer_migrate_page(struct address_space *mapping,$/;"	f	file:
__build_all_zonelists	page_alloc.c	/^static void __build_all_zonelists(void *data)$/;"	f	file:
__cache_free	slab.c	/^static __always_inline void __cache_free(struct kmem_cache *cachep, void *objp,$/;"	f	file:
__cache_free_alien	slab.c	/^static int __cache_free_alien(struct kmem_cache *cachep, void *objp,$/;"	f	file:
__cacheline_aligned	filemap.c	/^static wait_queue_head_t page_wait_table[PAGE_WAIT_TABLE_SIZE] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned	sparse.c	/^static u16 section_to_node_table[NR_MEM_SECTIONS] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned	sparse.c	/^static u8 section_to_node_table[NR_MEM_SECTIONS] __cacheline_aligned;$/;"	v	file:
__cacheline_aligned_in_smp	vmstat.c	/^atomic_long_t vm_node_stat[NR_VM_NODE_STAT_ITEMS] __cacheline_aligned_in_smp;$/;"	v
__cacheline_aligned_in_smp	vmstat.c	/^atomic_long_t vm_numa_stat[NR_VM_NUMA_STAT_ITEMS] __cacheline_aligned_in_smp;$/;"	v
__cacheline_aligned_in_smp	vmstat.c	/^atomic_long_t vm_zone_stat[NR_VM_ZONE_STAT_ITEMS] __cacheline_aligned_in_smp;$/;"	v
__cancel_dirty_page	page-writeback.c	/^EXPORT_SYMBOL(__cancel_dirty_page);$/;"	v
__cancel_dirty_page	page-writeback.c	/^void __cancel_dirty_page(struct page *page)$/;"	f
__check_element	mempool.c	/^static void __check_element(mempool_t *pool, void *element, size_t size)$/;"	f	file:
__check_heap_object	slab.c	/^void __check_heap_object(const void *ptr, unsigned long n, struct page *page,$/;"	f
__check_heap_object	slub.c	/^void __check_heap_object(const void *ptr, unsigned long n, struct page *page,$/;"	f
__check_object_size	usercopy.c	/^EXPORT_SYMBOL(__check_object_size);$/;"	v
__check_object_size	usercopy.c	/^void __check_object_size(const void *ptr, unsigned long n, bool to_user)$/;"	f
__cleancache_get_page	cleancache.c	/^EXPORT_SYMBOL(__cleancache_get_page);$/;"	v
__cleancache_get_page	cleancache.c	/^int __cleancache_get_page(struct page *page)$/;"	f
__cleancache_init_fs	cleancache.c	/^EXPORT_SYMBOL(__cleancache_init_fs);$/;"	v
__cleancache_init_fs	cleancache.c	/^void __cleancache_init_fs(struct super_block *sb)$/;"	f
__cleancache_init_shared_fs	cleancache.c	/^EXPORT_SYMBOL(__cleancache_init_shared_fs);$/;"	v
__cleancache_init_shared_fs	cleancache.c	/^void __cleancache_init_shared_fs(struct super_block *sb)$/;"	f
__cleancache_invalidate_fs	cleancache.c	/^EXPORT_SYMBOL(__cleancache_invalidate_fs);$/;"	v
__cleancache_invalidate_fs	cleancache.c	/^void __cleancache_invalidate_fs(struct super_block *sb)$/;"	f
__cleancache_invalidate_inode	cleancache.c	/^EXPORT_SYMBOL(__cleancache_invalidate_inode);$/;"	v
__cleancache_invalidate_inode	cleancache.c	/^void __cleancache_invalidate_inode(struct address_space *mapping)$/;"	f
__cleancache_invalidate_page	cleancache.c	/^EXPORT_SYMBOL(__cleancache_invalidate_page);$/;"	v
__cleancache_invalidate_page	cleancache.c	/^void __cleancache_invalidate_page(struct address_space *mapping,$/;"	f
__cleancache_put_page	cleancache.c	/^EXPORT_SYMBOL(__cleancache_put_page);$/;"	v
__cleancache_put_page	cleancache.c	/^void __cleancache_put_page(struct page *page)$/;"	f
__clear_shadow_entry	truncate.c	/^static inline void __clear_shadow_entry(struct address_space *mapping,$/;"	f	file:
__cmpxchg_double_slab	slub.c	/^static inline bool __cmpxchg_double_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
__collapse_huge_page_copy	khugepaged.c	/^static void __collapse_huge_page_copy(pte_t *pte, struct page *page,$/;"	f	file:
__collapse_huge_page_isolate	khugepaged.c	/^static int __collapse_huge_page_isolate(struct vm_area_struct *vma,$/;"	f	file:
__collapse_huge_page_swapin	khugepaged.c	/^static bool __collapse_huge_page_swapin(struct mm_struct *mm,$/;"	f	file:
__compact_finished	compaction.c	/^static enum compact_result __compact_finished(struct compact_control *cc)$/;"	f	file:
__compaction_suitable	compaction.c	/^static enum compact_result __compaction_suitable(struct zone *zone, int order,$/;"	f	file:
__copy_gigantic_page	migrate.c	/^static void __copy_gigantic_page(struct page *dst, struct page *src,$/;"	f	file:
__copy_page_owner	page_owner.c	/^void __copy_page_owner(struct page *oldpage, struct page *newpage)$/;"	f
__count_memcg_events	memcontrol.c	/^void __count_memcg_events(struct mem_cgroup *memcg, enum vm_event_item idx,$/;"	f
__dec_node_page_state	vmstat.c	/^EXPORT_SYMBOL(__dec_node_page_state);$/;"	v
__dec_node_page_state	vmstat.c	/^void __dec_node_page_state(struct page *page, enum node_stat_item item)$/;"	f
__dec_node_state	vmstat.c	/^void __dec_node_state(struct pglist_data *pgdat, enum node_stat_item item)$/;"	f
__dec_zone_page_state	vmstat.c	/^EXPORT_SYMBOL(__dec_zone_page_state);$/;"	v
__dec_zone_page_state	vmstat.c	/^void __dec_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
__dec_zone_state	vmstat.c	/^void __dec_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
__del_from_avail_list	swapfile.c	/^static void __del_from_avail_list(struct swap_info_struct *p)$/;"	f	file:
__delete_from_page_cache	filemap.c	/^void __delete_from_page_cache(struct page *page, void *shadow)$/;"	f
__delete_from_swap_cache	swap_state.c	/^void __delete_from_swap_cache(struct page *page, swp_entry_t entry)$/;"	f
__delete_object	kmemleak.c	/^static void __delete_object(struct kmemleak_object *object)$/;"	f	file:
__do_cache_alloc	slab.c	/^__do_cache_alloc(struct kmem_cache *cache, gfp_t flags)$/;"	f	file:
__do_cache_alloc	slab.c	/^__do_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
__do_fault	memory.c	/^static vm_fault_t __do_fault(struct vm_fault *vmf)$/;"	f	file:
__do_huge_pmd_anonymous_page	huge_memory.c	/^static vm_fault_t __do_huge_pmd_anonymous_page(struct vm_fault *vmf,$/;"	f	file:
__do_kmalloc	slab.c	/^static __always_inline void *__do_kmalloc(size_t size, gfp_t flags,$/;"	f	file:
__do_kmalloc_node	slab.c	/^__do_kmalloc_node(size_t size, gfp_t flags, int node, unsigned long caller)$/;"	f	file:
__do_kmalloc_node	slob.c	/^__do_kmalloc_node(size_t size, gfp_t gfp, int node, unsigned long caller)$/;"	f	file:
__do_krealloc	slab_common.c	/^static __always_inline void *__do_krealloc(const void *p, size_t new_size,$/;"	f	file:
__do_munmap	mmap.c	/^int __do_munmap(struct mm_struct *mm, unsigned long start, size_t len,$/;"	f
__do_page_cache_readahead	readahead.c	/^unsigned int __do_page_cache_readahead(struct address_space *mapping,$/;"	f
__do_tune_cpucache	slab.c	/^static int __do_tune_cpucache(struct kmem_cache *cachep, int limit,$/;"	f	file:
__drain_alien_cache	slab.c	/^static void __drain_alien_cache(struct kmem_cache *cachep,$/;"	f	file:
__drain_swap_slots_cache	swap_slots.c	/^static void __drain_swap_slots_cache(unsigned int type)$/;"	f	file:
__dump_page	debug.c	/^void __dump_page(struct page *page, const char *reason)$/;"	f
__dump_page_owner	page_owner.c	/^void __dump_page_owner(struct page *page)$/;"	f
__early_ioremap	early_ioremap.c	/^__early_ioremap(resource_size_t phys_addr, unsigned long size, pgprot_t prot)$/;"	f	file:
__early_pfn_to_nid	page_alloc.c	/^int __meminit __early_pfn_to_nid(unsigned long pfn,$/;"	f
__earlyonly_bootmem_alloc	sparse-vmemmap.c	/^static void * __ref __earlyonly_bootmem_alloc(int node,$/;"	f	file:
__encode_handle	z3fold.c	/^static unsigned long __encode_handle(struct z3fold_header *zhdr,$/;"	f	file:
__filemap_fdatawait_range	filemap.c	/^static void __filemap_fdatawait_range(struct address_space *mapping,$/;"	f	file:
__filemap_fdatawrite	filemap.c	/^static inline int __filemap_fdatawrite(struct address_space *mapping,$/;"	f	file:
__filemap_fdatawrite_range	filemap.c	/^int __filemap_fdatawrite_range(struct address_space *mapping, loff_t start,$/;"	f
__filemap_set_wb_err	filemap.c	/^EXPORT_SYMBOL(__filemap_set_wb_err);$/;"	v
__filemap_set_wb_err	filemap.c	/^void __filemap_set_wb_err(struct address_space *mapping, int err)$/;"	f
__find_buddy_pfn	internal.h	/^__find_buddy_pfn(unsigned long page_pfn, unsigned int order)$/;"	f
__find_max_addr	memblock.c	/^static phys_addr_t __init_memblock __find_max_addr(phys_addr_t limit)$/;"	f	file:
__find_vmap_area	vmalloc.c	/^static struct vmap_area *__find_vmap_area(unsigned long addr)$/;"	f	file:
__first_valid_page	page_isolation.c	/^__first_valid_page(unsigned long pfn, unsigned long nr_pages)$/;"	f	file:
__flush_cpu_slab	slub.c	/^static inline void __flush_cpu_slab(struct kmem_cache *s, int cpu)$/;"	f	file:
__follow_pte_pmd	memory.c	/^static int __follow_pte_pmd(struct mm_struct *mm, unsigned long address,$/;"	f	file:
__fragmentation_index	vmstat.c	/^static int __fragmentation_index(unsigned int order, struct contig_page_info *info)$/;"	f	file:
__free_cluster	swapfile.c	/^static void __free_cluster(struct swap_info_struct *si, unsigned long idx)$/;"	f	file:
__free_huge_page	hugetlb.c	/^static void __free_huge_page(struct page *page)$/;"	f	file:
__free_memory_core	memblock.c	/^static unsigned long __init __free_memory_core(phys_addr_t start,$/;"	f	file:
__free_one_page	page_alloc.c	/^static inline void __free_one_page(struct page *page,$/;"	f	file:
__free_page_ext	page_ext.c	/^static void __free_page_ext(unsigned long pfn)$/;"	f	file:
__free_pages	page_alloc.c	/^EXPORT_SYMBOL(__free_pages);$/;"	v
__free_pages	page_alloc.c	/^void __free_pages(struct page *page, unsigned int order)$/;"	f
__free_pages_core	page_alloc.c	/^void __free_pages_core(struct page *page, unsigned int order)$/;"	f
__free_pages_memory	memblock.c	/^static void __init __free_pages_memory(unsigned long start, unsigned long end)$/;"	f	file:
__free_pages_ok	page_alloc.c	/^static void __free_pages_ok(struct page *page, unsigned int order)$/;"	f	file:
__free_slab	slub.c	/^static void __free_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
__free_vmap_area	vmalloc.c	/^static void __free_vmap_area(struct vmap_area *va)$/;"	f	file:
__free_zspage	zsmalloc.c	/^static void __free_zspage(struct zs_pool *pool, struct size_class *class,$/;"	f	file:
__frontswap_clear	frontswap.c	/^static inline void __frontswap_clear(struct swap_info_struct *sis,$/;"	f	file:
__frontswap_curr_pages	frontswap.c	/^static unsigned long __frontswap_curr_pages(void)$/;"	f	file:
__frontswap_init	frontswap.c	/^EXPORT_SYMBOL(__frontswap_init);$/;"	v
__frontswap_init	frontswap.c	/^void __frontswap_init(unsigned type, unsigned long *map)$/;"	f
__frontswap_invalidate_area	frontswap.c	/^EXPORT_SYMBOL(__frontswap_invalidate_area);$/;"	v
__frontswap_invalidate_area	frontswap.c	/^void __frontswap_invalidate_area(unsigned type)$/;"	f
__frontswap_invalidate_page	frontswap.c	/^EXPORT_SYMBOL(__frontswap_invalidate_page);$/;"	v
__frontswap_invalidate_page	frontswap.c	/^void __frontswap_invalidate_page(unsigned type, pgoff_t offset)$/;"	f
__frontswap_load	frontswap.c	/^EXPORT_SYMBOL(__frontswap_load);$/;"	v
__frontswap_load	frontswap.c	/^int __frontswap_load(struct page *page)$/;"	f
__frontswap_set	frontswap.c	/^static inline void __frontswap_set(struct swap_info_struct *sis,$/;"	f	file:
__frontswap_shrink	frontswap.c	/^static int __frontswap_shrink(unsigned long target_pages,$/;"	f	file:
__frontswap_store	frontswap.c	/^EXPORT_SYMBOL(__frontswap_store);$/;"	v
__frontswap_store	frontswap.c	/^int __frontswap_store(struct page *page)$/;"	f
__frontswap_test	frontswap.c	/^EXPORT_SYMBOL(__frontswap_test);$/;"	v
__frontswap_test	frontswap.c	/^bool __frontswap_test(struct swap_info_struct *sis,$/;"	f
__frontswap_unuse_pages	frontswap.c	/^static int __frontswap_unuse_pages(unsigned long total, unsigned long *unused,$/;"	f	file:
__fs_reclaim_acquire	page_alloc.c	/^void __fs_reclaim_acquire(void)$/;"	f
__fs_reclaim_map	page_alloc.c	/^static struct lockdep_map __fs_reclaim_map =$/;"	v	typeref:struct:lockdep_map	file:
__fs_reclaim_release	page_alloc.c	/^void __fs_reclaim_release(void)$/;"	f
__generic_file_write_iter	filemap.c	/^EXPORT_SYMBOL(__generic_file_write_iter);$/;"	v
__generic_file_write_iter	filemap.c	/^ssize_t __generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)$/;"	f
__get_any_page	memory-failure.c	/^static int __get_any_page(struct page *p, unsigned long pfn, int flags)$/;"	f	file:
__get_fault_gfp_mask	memory.c	/^static gfp_t __get_fault_gfp_mask(struct vm_area_struct *vma)$/;"	f	file:
__get_free_pages	page_alloc.c	/^EXPORT_SYMBOL(__get_free_pages);$/;"	v
__get_free_pages	page_alloc.c	/^unsigned long __get_free_pages(gfp_t gfp_mask, unsigned int order)$/;"	f
__get_locked_pte	memory.c	/^pte_t *__get_locked_pte(struct mm_struct *mm, unsigned long addr,$/;"	f
__get_pfnblock_flags_mask	page_alloc.c	/^static __always_inline unsigned long __get_pfnblock_flags_mask(struct page *page,$/;"	f	file:
__get_user_pages	gup.c	/^static long __get_user_pages(struct task_struct *tsk, struct mm_struct *mm,$/;"	f	file:
__get_user_pages_fast	gup.c	/^EXPORT_SYMBOL_GPL(__get_user_pages_fast);$/;"	v
__get_user_pages_fast	gup.c	/^int __get_user_pages_fast(unsigned long start, int nr_pages, int write,$/;"	f
__get_user_pages_locked	gup.c	/^static __always_inline long __get_user_pages_locked(struct task_struct *tsk,$/;"	f	file:
__get_user_pages_locked	gup.c	/^static long __get_user_pages_locked(struct task_struct *tsk,$/;"	f	file:
__get_vm_area	vmalloc.c	/^EXPORT_SYMBOL_GPL(__get_vm_area);$/;"	v
__get_vm_area	vmalloc.c	/^struct vm_struct *__get_vm_area(unsigned long size, unsigned long flags,$/;"	f
__get_vm_area_caller	vmalloc.c	/^struct vm_struct *__get_vm_area_caller(unsigned long size, unsigned long flags,$/;"	f
__get_vm_area_node	vmalloc.c	/^static struct vm_struct *__get_vm_area_node(unsigned long size,$/;"	f	file:
__get_vma_policy	mempolicy.c	/^struct mempolicy *__get_vma_policy(struct vm_area_struct *vma,$/;"	f
__gfp_pfmemalloc_flags	page_alloc.c	/^static inline int __gfp_pfmemalloc_flags(gfp_t gfp_mask)$/;"	f	file:
__gup_benchmark_ioctl	gup_benchmark.c	/^static int __gup_benchmark_ioctl(unsigned int cmd,$/;"	f	file:
__gup_device_huge	gup.c	/^static int __gup_device_huge(unsigned long pfn, unsigned long addr,$/;"	f	file:
__gup_device_huge_pmd	gup.c	/^static int __gup_device_huge_pmd(pmd_t orig, pmd_t *pmdp, unsigned long addr,$/;"	f	file:
__gup_device_huge_pud	gup.c	/^static int __gup_device_huge_pud(pud_t orig, pud_t *pudp, unsigned long addr,$/;"	f	file:
__gup_device_huge_pud	gup.c	/^static int __gup_device_huge_pud(pud_t pud, pud_t *pudp, unsigned long addr,$/;"	f	file:
__gup_longterm_locked	gup.c	/^static __always_inline long __gup_longterm_locked(struct task_struct *tsk,$/;"	f	file:
__gup_longterm_locked	gup.c	/^static long __gup_longterm_locked(struct task_struct *tsk,$/;"	f	file:
__gup_longterm_unlocked	gup.c	/^static int __gup_longterm_unlocked(unsigned long start, int nr_pages,$/;"	f	file:
__handle_mm_fault	memory.c	/^static vm_fault_t __handle_mm_fault(struct vm_area_struct *vma,$/;"	f	file:
__highest_present_section_nr	sparse.c	/^unsigned long __highest_present_section_nr;$/;"	v
__hugetlb_cgroup_file_init	hugetlb_cgroup.c	/^static void __init __hugetlb_cgroup_file_init(int idx)$/;"	f	file:
__hwasan_loadN_noabort	kasan/tags.c	/^EXPORT_SYMBOL(__hwasan_loadN_noabort);$/;"	v
__hwasan_loadN_noabort	kasan/tags.c	/^void __hwasan_loadN_noabort(unsigned long addr, unsigned long size)$/;"	f
__hwasan_storeN_noabort	kasan/tags.c	/^EXPORT_SYMBOL(__hwasan_storeN_noabort);$/;"	v
__hwasan_storeN_noabort	kasan/tags.c	/^void __hwasan_storeN_noabort(unsigned long addr, unsigned long size)$/;"	f
__hwasan_tag_memory	kasan/tags.c	/^EXPORT_SYMBOL(__hwasan_tag_memory);$/;"	v
__hwasan_tag_memory	kasan/tags.c	/^void __hwasan_tag_memory(unsigned long addr, u8 tag, unsigned long size)$/;"	f
__idx	z3fold.c	/^static inline int __idx(struct z3fold_header *zhdr, enum buddy bud)$/;"	f	file:
__inc_node_page_state	vmstat.c	/^EXPORT_SYMBOL(__inc_node_page_state);$/;"	v
__inc_node_page_state	vmstat.c	/^void __inc_node_page_state(struct page *page, enum node_stat_item item)$/;"	f
__inc_node_state	vmstat.c	/^void __inc_node_state(struct pglist_data *pgdat, enum node_stat_item item)$/;"	f
__inc_numa_state	vmstat.c	/^void __inc_numa_state(struct zone *zone,$/;"	f
__inc_zone_page_state	vmstat.c	/^EXPORT_SYMBOL(__inc_zone_page_state);$/;"	v
__inc_zone_page_state	vmstat.c	/^void __inc_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
__inc_zone_state	vmstat.c	/^void __inc_zone_state(struct zone *zone, enum zone_stat_item item)$/;"	f
__init_single_page	page_alloc.c	/^static void __meminit __init_single_page(struct page *page, unsigned long pfn,$/;"	f	file:
__initconst	percpu.c	/^const char * const pcpu_fc_names[PCPU_FC_NR] __initconst = {$/;"	v
__initconst	slab_common.c	/^const struct kmalloc_info_struct kmalloc_info[] __initconst = {$/;"	v	typeref:struct:kmalloc_info
__initdata	early_ioremap.c	/^static int after_paging_init __initdata;$/;"	v	file:
__initdata	early_ioremap.c	/^static int early_ioremap_debug __initdata;$/;"	v	file:
__initdata	early_ioremap.c	/^static unsigned long prev_size[FIX_BTMAPS_SLOTS] __initdata;$/;"	v	file:
__initdata	early_ioremap.c	/^static unsigned long slot_virt[FIX_BTMAPS_SLOTS] __initdata;$/;"	v	file:
__initdata	early_ioremap.c	/^static void __iomem *prev_map[FIX_BTMAPS_SLOTS] __initdata;$/;"	v	file:
__initdata	memblock.c	/^static int reset_managed_pages_done __initdata;$/;"	v	file:
__initdata	memcontrol.c	/^static int really_do_swap_account __initdata = 1;$/;"	v	file:
__initdata	memcontrol.c	/^static int really_do_swap_account __initdata;$/;"	v	file:
__initdata	memtest.c	/^static u64 patterns[] __initdata = {$/;"	v	file:
__initdata	memtest.c	/^static unsigned int memtest_pattern __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static atomic_t pgdat_init_n_undone __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long arch_zone_highest_possible_pfn[MAX_NR_ZONES] __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long arch_zone_lowest_possible_pfn[MAX_NR_ZONES] __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long dma_reserve __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long nr_all_pages __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long nr_kernel_pages __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long required_kernelcore __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long required_kernelcore_percent __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long required_movablecore __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long required_movablecore_percent __initdata;$/;"	v	file:
__initdata	page_alloc.c	/^static unsigned long zone_movable_pfn[MAX_NUMNODES] __initdata;$/;"	v	file:
__initdata	percpu.c	/^enum pcpu_fc pcpu_chosen_fc __initdata = PCPU_FC_AUTO;$/;"	v	typeref:enum:pcpu_chosen_fc
__initdata	slab.c	/^static bool slab_max_order_set __initdata;$/;"	v	file:
__initdata	usercopy.c	/^static bool enable_checks __initdata = true;$/;"	v	file:
__initdata	vmalloc.c	/^static struct vm_struct *vmlist __initdata;$/;"	v	typeref:struct:vmlist	file:
__initdata_memblock	memblock.c	/^int memblock_debug __initdata_memblock;$/;"	v
__initdata_memblock	memblock.c	/^static bool system_has_some_mirror __initdata_memblock = false;$/;"	v	file:
__initdata_memblock	memblock.c	/^static int memblock_can_resize __initdata_memblock;$/;"	v	file:
__initdata_memblock	memblock.c	/^static int memblock_memory_in_slab __initdata_memblock = 0;$/;"	v	file:
__initdata_memblock	memblock.c	/^static int memblock_reserved_in_slab __initdata_memblock = 0;$/;"	v	file:
__initdata_memblock	memblock.c	/^static struct memblock_region memblock_memory_init_regions[INIT_MEMBLOCK_REGIONS] __initdata_memblock;$/;"	v	typeref:struct:memblock_memory_init_regions	file:
__initdata_memblock	memblock.c	/^static struct memblock_region memblock_physmem_init_regions[INIT_PHYSMEM_REGIONS] __initdata_memblock;$/;"	v	typeref:struct:memblock_physmem_init_regions	file:
__initdata_memblock	memblock.c	/^static struct memblock_region memblock_reserved_init_regions[INIT_MEMBLOCK_RESERVED_REGIONS] __initdata_memblock;$/;"	v	typeref:struct:memblock_reserved_init_regions	file:
__initdata_memblock	memblock.c	/^struct memblock memblock __initdata_memblock = {$/;"	v	typeref:struct:memblock
__insert_vm_struct	mmap.c	/^static void __insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
__install_special_mapping	mmap.c	/^static struct vm_area_struct *__install_special_mapping($/;"	f	file:
__invalidate_reclaim_iterators	memcontrol.c	/^static void __invalidate_reclaim_iterators(struct mem_cgroup *from,$/;"	f	file:
__is_kernel_percpu_address	percpu.c	/^bool __is_kernel_percpu_address(unsigned long addr, unsigned long *can_addr)$/;"	f
__is_page_sharing_candidate	ksm.c	/^bool __is_page_sharing_candidate(struct stable_node *stable_node, int offset)$/;"	f	file:
__isolate_free_page	page_alloc.c	/^int __isolate_free_page(struct page *page, unsigned int order)$/;"	f
__isolate_lru_page	vmscan.c	/^int __isolate_lru_page(struct page *page, isolate_mode_t mode)$/;"	f
__kasan_check_read	kasan/common.c	/^EXPORT_SYMBOL(__kasan_check_read);$/;"	v
__kasan_check_read	kasan/common.c	/^bool __kasan_check_read(const volatile void *p, unsigned int size)$/;"	f
__kasan_check_write	kasan/common.c	/^EXPORT_SYMBOL(__kasan_check_write);$/;"	v
__kasan_check_write	kasan/common.c	/^bool __kasan_check_write(const volatile void *p, unsigned int size)$/;"	f
__kasan_kmalloc	kasan/common.c	/^static void *__kasan_kmalloc(struct kmem_cache *cache, const void *object,$/;"	f	file:
__kasan_report	kasan/report.c	/^void __kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)$/;"	f
__kasan_slab_free	kasan/common.c	/^static bool __kasan_slab_free(struct kmem_cache *cache, void *object,$/;"	f	file:
__kasan_unpoison_stack	kasan/common.c	/^static void __kasan_unpoison_stack(struct task_struct *task, const void *sp)$/;"	f	file:
__kernel_map_pages	page_poison.c	/^void __kernel_map_pages(struct page *page, int numpages, int enable)$/;"	f
__khugepaged_enter	khugepaged.c	/^int __khugepaged_enter(struct mm_struct *mm)$/;"	f
__khugepaged_exit	khugepaged.c	/^void __khugepaged_exit(struct mm_struct *mm)$/;"	f
__kmalloc	slab.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	slab.c	/^void *__kmalloc(size_t size, gfp_t flags)$/;"	f
__kmalloc	slob.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	slob.c	/^void *__kmalloc(size_t size, gfp_t gfp)$/;"	f
__kmalloc	slub.c	/^EXPORT_SYMBOL(__kmalloc);$/;"	v
__kmalloc	slub.c	/^void *__kmalloc(size_t size, gfp_t flags)$/;"	f
__kmalloc_node	slab.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	slab.c	/^void *__kmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
__kmalloc_node	slob.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	slob.c	/^void *__kmalloc_node(size_t size, gfp_t gfp, int node)$/;"	f
__kmalloc_node	slub.c	/^EXPORT_SYMBOL(__kmalloc_node);$/;"	v
__kmalloc_node	slub.c	/^void *__kmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
__kmalloc_node_track_caller	slab.c	/^EXPORT_SYMBOL(__kmalloc_node_track_caller);$/;"	v
__kmalloc_node_track_caller	slab.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t flags,$/;"	f
__kmalloc_node_track_caller	slob.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t gfp,$/;"	f
__kmalloc_node_track_caller	slub.c	/^void *__kmalloc_node_track_caller(size_t size, gfp_t gfpflags,$/;"	f
__kmalloc_track_caller	slab.c	/^EXPORT_SYMBOL(__kmalloc_track_caller);$/;"	v
__kmalloc_track_caller	slab.c	/^void *__kmalloc_track_caller(size_t size, gfp_t flags, unsigned long caller)$/;"	f
__kmalloc_track_caller	slob.c	/^void *__kmalloc_track_caller(size_t size, gfp_t gfp, unsigned long caller)$/;"	f
__kmalloc_track_caller	slub.c	/^void *__kmalloc_track_caller(size_t size, gfp_t gfpflags, unsigned long caller)$/;"	f
__kmap_atomic_idx	highmem.c	/^EXPORT_PER_CPU_SYMBOL(__kmap_atomic_idx);$/;"	v
__kmem_cache_alias	slab.c	/^__kmem_cache_alias(const char *name, unsigned int size, unsigned int align,$/;"	f
__kmem_cache_alias	slab.h	/^__kmem_cache_alias(const char *name, unsigned int size, unsigned int align,$/;"	f
__kmem_cache_alias	slub.c	/^__kmem_cache_alias(const char *name, unsigned int size, unsigned int align,$/;"	f
__kmem_cache_alloc_bulk	slab_common.c	/^int __kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t nr,$/;"	f
__kmem_cache_create	slab.c	/^int __kmem_cache_create(struct kmem_cache *cachep, slab_flags_t flags)$/;"	f
__kmem_cache_create	slob.c	/^int __kmem_cache_create(struct kmem_cache *c, slab_flags_t flags)$/;"	f
__kmem_cache_create	slub.c	/^int __kmem_cache_create(struct kmem_cache *s, slab_flags_t flags)$/;"	f
__kmem_cache_empty	slab.c	/^bool __kmem_cache_empty(struct kmem_cache *s)$/;"	f
__kmem_cache_empty	slub.c	/^bool __kmem_cache_empty(struct kmem_cache *s)$/;"	f
__kmem_cache_free	slob.c	/^static void __kmem_cache_free(void *b, int size)$/;"	f	file:
__kmem_cache_free_bulk	slab_common.c	/^void __kmem_cache_free_bulk(struct kmem_cache *s, size_t nr, void **p)$/;"	f
__kmem_cache_release	slab.c	/^void __kmem_cache_release(struct kmem_cache *cachep)$/;"	f
__kmem_cache_release	slob.c	/^void __kmem_cache_release(struct kmem_cache *c)$/;"	f
__kmem_cache_release	slub.c	/^void __kmem_cache_release(struct kmem_cache *s)$/;"	f
__kmem_cache_shrink	slab.c	/^int __kmem_cache_shrink(struct kmem_cache *cachep)$/;"	f
__kmem_cache_shrink	slob.c	/^int __kmem_cache_shrink(struct kmem_cache *d)$/;"	f
__kmem_cache_shrink	slub.c	/^int __kmem_cache_shrink(struct kmem_cache *s)$/;"	f
__kmem_cache_shutdown	slab.c	/^int __kmem_cache_shutdown(struct kmem_cache *cachep)$/;"	f
__kmem_cache_shutdown	slob.c	/^int __kmem_cache_shutdown(struct kmem_cache *c)$/;"	f
__kmem_cache_shutdown	slub.c	/^int __kmem_cache_shutdown(struct kmem_cache *s)$/;"	f
__kmemcg_cache_deactivate	slab.c	/^void __kmemcg_cache_deactivate(struct kmem_cache *cachep)$/;"	f
__kmemcg_cache_deactivate	slub.c	/^void __kmemcg_cache_deactivate(struct kmem_cache *s)$/;"	f
__kmemcg_cache_deactivate_after_rcu	slab.c	/^void __kmemcg_cache_deactivate_after_rcu(struct kmem_cache *s)$/;"	f
__kmemcg_cache_deactivate_after_rcu	slub.c	/^void __kmemcg_cache_deactivate_after_rcu(struct kmem_cache *s)$/;"	f
__kmemleak_do_cleanup	kmemleak.c	/^static void __kmemleak_do_cleanup(void)$/;"	f	file:
__krealloc	slab_common.c	/^EXPORT_SYMBOL(__krealloc);$/;"	v
__krealloc	slab_common.c	/^void *__krealloc(const void *p, size_t new_size, gfp_t flags)$/;"	f
__ksize	slab.c	/^EXPORT_SYMBOL(__ksize);$/;"	v
__ksize	slab.c	/^size_t __ksize(const void *objp)$/;"	f
__ksize	slob.c	/^EXPORT_SYMBOL(__ksize);$/;"	v
__ksize	slob.c	/^size_t __ksize(const void *block)$/;"	f
__ksize	slub.c	/^EXPORT_SYMBOL(__ksize);$/;"	v
__ksize	slub.c	/^size_t __ksize(const void *object)$/;"	f
__ksm_enter	ksm.c	/^int __ksm_enter(struct mm_struct *mm)$/;"	f
__ksm_exit	ksm.c	/^void __ksm_exit(struct mm_struct *mm)$/;"	f
__late_clear_fixmap	early_ioremap.c	/^static inline void __init __late_clear_fixmap(enum fixed_addresses idx)$/;"	f	file:
__late_set_fixmap	early_ioremap.c	/^static inline void __init __late_set_fixmap(enum fixed_addresses idx,$/;"	f	file:
__latent_entropy	page_alloc.c	/^volatile unsigned long latent_entropy __latent_entropy;$/;"	v
__list_lru_init	list_lru.c	/^EXPORT_SYMBOL_GPL(__list_lru_init);$/;"	v
__list_lru_init	list_lru.c	/^int __list_lru_init(struct list_lru *lru, bool memcg_aware,$/;"	f
__list_lru_walk_one	list_lru.c	/^__list_lru_walk_one(struct list_lru_node *nlru, int memcg_idx,$/;"	f	file:
__lock_page	filemap.c	/^EXPORT_SYMBOL(__lock_page);$/;"	v
__lock_page	filemap.c	/^void __lock_page(struct page *__page)$/;"	f
__lock_page_killable	filemap.c	/^EXPORT_SYMBOL_GPL(__lock_page_killable);$/;"	v
__lock_page_killable	filemap.c	/^int __lock_page_killable(struct page *__page)$/;"	f
__lock_page_or_retry	filemap.c	/^int __lock_page_or_retry(struct page *page, struct mm_struct *mm,$/;"	f
__lookup_swap_cgroup	swap_cgroup.c	/^static struct swap_cgroup *__lookup_swap_cgroup(struct swap_cgroup_ctrl *ctrl,$/;"	f	file:
__lru_cache_activate_page	swap.c	/^static void __lru_cache_activate_page(struct page *page)$/;"	f	file:
__lru_cache_add	swap.c	/^static void __lru_cache_add(struct page *page)$/;"	f	file:
__mcopy_atomic	userfaultfd.c	/^static __always_inline ssize_t __mcopy_atomic(struct mm_struct *dst_mm,$/;"	f	file:
__mcopy_atomic_hugetlb	userfaultfd.c	/^static __always_inline ssize_t __mcopy_atomic_hugetlb(struct mm_struct *dst_mm,$/;"	f	file:
__mem_cgroup_clear_mc	memcontrol.c	/^static void __mem_cgroup_clear_mc(void)$/;"	f	file:
__mem_cgroup_free	memcontrol.c	/^static void __mem_cgroup_free(struct mem_cgroup *memcg)$/;"	f	file:
__mem_cgroup_insert_exceeded	memcontrol.c	/^static void __mem_cgroup_insert_exceeded(struct mem_cgroup_per_node *mz,$/;"	f	file:
__mem_cgroup_largest_soft_limit_node	memcontrol.c	/^__mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_node *mctz)$/;"	f	file:
__mem_cgroup_remove_exceeded	memcontrol.c	/^static void __mem_cgroup_remove_exceeded(struct mem_cgroup_per_node *mz,$/;"	f	file:
__mem_cgroup_threshold	memcontrol.c	/^static void __mem_cgroup_threshold(struct mem_cgroup *memcg, bool swap)$/;"	f	file:
__mem_cgroup_usage_register_event	memcontrol.c	/^static int __mem_cgroup_usage_register_event(struct mem_cgroup *memcg,$/;"	f	file:
__mem_cgroup_usage_unregister_event	memcontrol.c	/^static void __mem_cgroup_usage_unregister_event(struct mem_cgroup *memcg,$/;"	f	file:
__memblock_dump_all	memblock.c	/^void __init_memblock __memblock_dump_all(void)$/;"	f
__memblock_find_range_bottom_up	memblock.c	/^__memblock_find_range_bottom_up(phys_addr_t start, phys_addr_t end,$/;"	f	file:
__memblock_find_range_top_down	memblock.c	/^__memblock_find_range_top_down(phys_addr_t start, phys_addr_t end,$/;"	f	file:
__memblock_free_late	memblock.c	/^void __init __memblock_free_late(phys_addr_t base, phys_addr_t size)$/;"	f
__memcg_destroy_list_lru_node	list_lru.c	/^static void __memcg_destroy_list_lru_node(struct list_lru_memcg *memcg_lrus,$/;"	f	file:
__memcg_init_list_lru_node	list_lru.c	/^static int __memcg_init_list_lru_node(struct list_lru_memcg *memcg_lrus,$/;"	f	file:
__memcg_kmem_charge	memcontrol.c	/^int __memcg_kmem_charge(struct page *page, gfp_t gfp, int order)$/;"	f
__memcg_kmem_charge_memcg	memcontrol.c	/^int __memcg_kmem_charge_memcg(struct page *page, gfp_t gfp, int order,$/;"	f
__memcg_kmem_uncharge	memcontrol.c	/^void __memcg_kmem_uncharge(struct page *page, int order)$/;"	f
__memcg_kmem_uncharge_memcg	memcontrol.c	/^void __memcg_kmem_uncharge_memcg(struct mem_cgroup *memcg,$/;"	f
__meminitdata	mm_init.c	/^static struct notifier_block compute_batch_nb __meminitdata = {$/;"	v	typeref:struct:compute_batch_nb	file:
__meminitdata	page_alloc.c	/^static bool mirrored_kernelcore __meminitdata;$/;"	v	file:
__meminitdata	page_alloc.c	/^static struct mminit_pfnnid_cache early_pfnnid_cache __meminitdata;$/;"	v	typeref:struct:early_pfnnid_cache	file:
__meminitdata	sparse.c	/^static void *sparsemap_buf __meminitdata;$/;"	v	file:
__meminitdata	sparse.c	/^static void *sparsemap_buf_end __meminitdata;$/;"	v	file:
__memory_events_show	memcontrol.c	/^static void __memory_events_show(struct seq_file *m, atomic_long_t *events)$/;"	f	file:
__might_fault	memory.c	/^EXPORT_SYMBOL(__might_fault);$/;"	v
__might_fault	memory.c	/^void __might_fault(const char *file, int line)$/;"	f
__migration_entry_wait	migrate.c	/^void __migration_entry_wait(struct mm_struct *mm, pte_t *ptep,$/;"	f
__mincore_unmapped_range	mincore.c	/^static int __mincore_unmapped_range(unsigned long addr, unsigned long end,$/;"	f	file:
__mlock_posix_error_return	mlock.c	/^static int __mlock_posix_error_return(long retval)$/;"	f	file:
__mm_populate	gup.c	/^int __mm_populate(unsigned long start, unsigned long len, int ignore_errors)$/;"	f
__mmu_notifier_change_pte	mmu_notifier.c	/^void __mmu_notifier_change_pte(struct mm_struct *mm, unsigned long address,$/;"	f
__mmu_notifier_clear_flush_young	mmu_notifier.c	/^int __mmu_notifier_clear_flush_young(struct mm_struct *mm,$/;"	f
__mmu_notifier_clear_young	mmu_notifier.c	/^int __mmu_notifier_clear_young(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_range	mmu_notifier.c	/^void __mmu_notifier_invalidate_range(struct mm_struct *mm,$/;"	f
__mmu_notifier_invalidate_range_end	mmu_notifier.c	/^void __mmu_notifier_invalidate_range_end(struct mmu_notifier_range *range,$/;"	f
__mmu_notifier_invalidate_range_start	mmu_notifier.c	/^int __mmu_notifier_invalidate_range_start(struct mmu_notifier_range *range)$/;"	f
__mmu_notifier_invalidate_range_start_map	mmu_notifier.c	/^struct lockdep_map __mmu_notifier_invalidate_range_start_map = {$/;"	v	typeref:struct:lockdep_map
__mmu_notifier_mm_destroy	mmu_notifier.c	/^void __mmu_notifier_mm_destroy(struct mm_struct *mm)$/;"	f
__mmu_notifier_register	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(__mmu_notifier_register);$/;"	v
__mmu_notifier_register	mmu_notifier.c	/^int __mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
__mmu_notifier_release	mmu_notifier.c	/^void __mmu_notifier_release(struct mm_struct *mm)$/;"	f
__mmu_notifier_test_young	mmu_notifier.c	/^int __mmu_notifier_test_young(struct mm_struct *mm,$/;"	f
__mod_lruvec_slab_state	memcontrol.c	/^void __mod_lruvec_slab_state(void *p, enum node_stat_item idx, int val)$/;"	f
__mod_lruvec_state	memcontrol.c	/^void __mod_lruvec_state(struct lruvec *lruvec, enum node_stat_item idx,$/;"	f
__mod_memcg_state	memcontrol.c	/^void __mod_memcg_state(struct mem_cgroup *memcg, int idx, int val)$/;"	f
__mod_node_page_state	vmstat.c	/^EXPORT_SYMBOL(__mod_node_page_state);$/;"	v
__mod_node_page_state	vmstat.c	/^void __mod_node_page_state(struct pglist_data *pgdat, enum node_stat_item item,$/;"	f
__mod_zone_page_state	vmstat.c	/^EXPORT_SYMBOL(__mod_zone_page_state);$/;"	v
__mod_zone_page_state	vmstat.c	/^void __mod_zone_page_state(struct zone *zone, enum zone_stat_item item,$/;"	f
__mpol_dup	mempolicy.c	/^struct mempolicy *__mpol_dup(struct mempolicy *old)$/;"	f
__mpol_equal	mempolicy.c	/^bool __mpol_equal(struct mempolicy *a, struct mempolicy *b)$/;"	f
__mpol_put	mempolicy.c	/^void __mpol_put(struct mempolicy *p)$/;"	f
__munlock_isolate_lru_page	mlock.c	/^static bool __munlock_isolate_lru_page(struct page *page, bool getpage)$/;"	f	file:
__munlock_isolated_page	mlock.c	/^static void __munlock_isolated_page(struct page *page)$/;"	f	file:
__munlock_isolation_failed	mlock.c	/^static void __munlock_isolation_failed(struct page *page)$/;"	f	file:
__munlock_pagevec	mlock.c	/^static void __munlock_pagevec(struct pagevec *pvec, struct zone *zone)$/;"	f	file:
__munlock_pagevec_fill	mlock.c	/^static unsigned long __munlock_pagevec_fill(struct pagevec *pvec,$/;"	f	file:
__must_hold	workingset.c	/^					  void *arg) __must_hold(lru_lock)$/;"	f
__need_fs_reclaim	page_alloc.c	/^static bool __need_fs_reclaim(gfp_t gfp_mask)$/;"	f	file:
__next_mem_pfn_range	memblock.c	/^void __init_memblock __next_mem_pfn_range(int *idx, int nid,$/;"	f
__next_mem_pfn_range_in_zone	memblock.c	/^__next_mem_pfn_range_in_zone(u64 *idx, struct zone *zone,$/;"	f
__next_mem_range	memblock.c	/^void __init_memblock __next_mem_range(u64 *idx, int nid,$/;"	f
__next_mem_range_rev	memblock.c	/^void __init_memblock __next_mem_range_rev(u64 *idx, int nid,$/;"	f
__next_reserved_mem_region	memblock.c	/^void __init_memblock __next_reserved_mem_region(u64 *idx,$/;"	f
__next_zones_zonelist	mmzone.c	/^struct zoneref *__next_zones_zonelist(struct zoneref *z,$/;"	f
__node_reclaim	vmscan.c	/^static int __node_reclaim(struct pglist_data *pgdat, gfp_t gfp_mask, unsigned int order)$/;"	f	file:
__nr_hugepages_store_common	hugetlb.c	/^static ssize_t __nr_hugepages_store_common(bool obey_mempolicy,$/;"	f	file:
__offline_isolated_pages	page_alloc.c	/^__offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
__offline_pages	memory_hotplug.c	/^static int __ref __offline_pages(unsigned long start_pfn,$/;"	f	file:
__online_page_free	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__online_page_free);$/;"	v
__online_page_free	memory_hotplug.c	/^void __online_page_free(struct page *page)$/;"	f
__online_page_increment_counters	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__online_page_increment_counters);$/;"	v
__online_page_increment_counters	memory_hotplug.c	/^void __online_page_increment_counters(struct page *page)$/;"	f
__online_page_set_limits	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(__online_page_set_limits);$/;"	v
__online_page_set_limits	memory_hotplug.c	/^void __online_page_set_limits(struct page *page)$/;"	f
__oom_kill_process	oom_kill.c	/^static void __oom_kill_process(struct task_struct *victim, const char *message)$/;"	f	file:
__oom_reap_task_mm	oom_kill.c	/^bool __oom_reap_task_mm(struct mm_struct *mm)$/;"	f
__p4d_alloc	memory.c	/^int __p4d_alloc(struct mm_struct *mm, pgd_t *pgd, unsigned long address)$/;"	f
__page_aligned_bss	kasan/init.c	/^p4d_t kasan_early_shadow_p4d[MAX_PTRS_PER_P4D] __page_aligned_bss;$/;"	v
__page_aligned_bss	kasan/init.c	/^pmd_t kasan_early_shadow_pmd[PTRS_PER_PMD] __page_aligned_bss;$/;"	v
__page_aligned_bss	kasan/init.c	/^pte_t kasan_early_shadow_pte[PTRS_PER_PTE] __page_aligned_bss;$/;"	v
__page_aligned_bss	kasan/init.c	/^pud_t kasan_early_shadow_pud[PTRS_PER_PUD] __page_aligned_bss;$/;"	v
__page_aligned_bss	kasan/init.c	/^unsigned char kasan_early_shadow_page[PAGE_SIZE] __page_aligned_bss;$/;"	v
__page_cache_alloc	filemap.c	/^EXPORT_SYMBOL(__page_cache_alloc);$/;"	v
__page_cache_alloc	filemap.c	/^struct page *__page_cache_alloc(gfp_t gfp)$/;"	f
__page_cache_release	swap.c	/^static void __page_cache_release(struct page *page)$/;"	f	file:
__page_check_anon_rmap	rmap.c	/^static void __page_check_anon_rmap(struct page *page,$/;"	f	file:
__page_file_index	swapfile.c	/^EXPORT_SYMBOL_GPL(__page_file_index);$/;"	v
__page_file_index	swapfile.c	/^pgoff_t __page_file_index(struct page *page)$/;"	f
__page_file_mapping	swapfile.c	/^EXPORT_SYMBOL_GPL(__page_file_mapping);$/;"	v
__page_file_mapping	swapfile.c	/^struct address_space *__page_file_mapping(struct page *page)$/;"	f
__page_frag_cache_drain	page_alloc.c	/^EXPORT_SYMBOL(__page_frag_cache_drain);$/;"	v
__page_frag_cache_drain	page_alloc.c	/^void __page_frag_cache_drain(struct page *page, unsigned int count)$/;"	f
__page_frag_cache_refill	page_alloc.c	/^static struct page *__page_frag_cache_refill(struct page_frag_cache *nc,$/;"	f	file:
__page_mapcount	util.c	/^EXPORT_SYMBOL_GPL(__page_mapcount);$/;"	v
__page_mapcount	util.c	/^int __page_mapcount(struct page *page)$/;"	f
__page_ref_freeze	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_freeze);$/;"	v
__page_ref_freeze	debug_page_ref.c	/^void __page_ref_freeze(struct page *page, int v, int ret)$/;"	f
__page_ref_mod	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_mod);$/;"	v
__page_ref_mod	debug_page_ref.c	/^void __page_ref_mod(struct page *page, int v)$/;"	f
__page_ref_mod_and_return	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_mod_and_return);$/;"	v
__page_ref_mod_and_return	debug_page_ref.c	/^void __page_ref_mod_and_return(struct page *page, int v, int ret)$/;"	f
__page_ref_mod_and_test	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_mod_and_test);$/;"	v
__page_ref_mod_and_test	debug_page_ref.c	/^void __page_ref_mod_and_test(struct page *page, int v, int ret)$/;"	f
__page_ref_mod_unless	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_mod_unless);$/;"	v
__page_ref_mod_unless	debug_page_ref.c	/^void __page_ref_mod_unless(struct page *page, int v, int u)$/;"	f
__page_ref_set	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_set);$/;"	v
__page_ref_set	debug_page_ref.c	/^void __page_ref_set(struct page *page, int v)$/;"	f
__page_ref_unfreeze	debug_page_ref.c	/^EXPORT_SYMBOL(__page_ref_unfreeze);$/;"	v
__page_ref_unfreeze	debug_page_ref.c	/^void __page_ref_unfreeze(struct page *page, int v)$/;"	f
__page_rmapping	util.c	/^static inline void *__page_rmapping(struct page *page)$/;"	f	file:
__page_set_anon_rmap	rmap.c	/^static void __page_set_anon_rmap(struct page *page,$/;"	f	file:
__pageblock_pfn_to_page	page_alloc.c	/^struct page *__pageblock_pfn_to_page(unsigned long start_pfn,$/;"	f
__pagevec_lru_add	swap.c	/^EXPORT_SYMBOL(__pagevec_lru_add);$/;"	v
__pagevec_lru_add	swap.c	/^void __pagevec_lru_add(struct pagevec *pvec)$/;"	f
__pagevec_lru_add_fn	swap.c	/^static void __pagevec_lru_add_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
__pagevec_release	swap.c	/^EXPORT_SYMBOL(__pagevec_release);$/;"	v
__pagevec_release	swap.c	/^void __pagevec_release(struct pagevec *pvec)$/;"	f
__paint_it	kmemleak.c	/^static void __paint_it(struct kmemleak_object *object, int color)$/;"	f	file:
__parse_numa_zonelist_order	page_alloc.c	/^static int __parse_numa_zonelist_order(char *s)$/;"	f	file:
__pcpu_chunk_move	percpu.c	/^static void __pcpu_chunk_move(struct pcpu_chunk *chunk, int slot,$/;"	f	file:
__pcpu_map_pages	percpu-vm.c	/^static int __pcpu_map_pages(unsigned long addr, struct page **pages,$/;"	f	file:
__pcpu_ptr_to_addr	percpu.c	111;"	d	file:
__pcpu_ptr_to_addr	percpu.c	119;"	d	file:
__pcpu_size_to_slot	percpu.c	/^static int __pcpu_size_to_slot(int size)$/;"	f	file:
__pcpu_unmap_pages	percpu-vm.c	/^static void __pcpu_unmap_pages(unsigned long addr, int nr_pages)$/;"	f	file:
__per_cpu_offset	percpu.c	/^EXPORT_SYMBOL(__per_cpu_offset);$/;"	v
__perform_reclaim	page_alloc.c	/^__perform_reclaim(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
__pmd_alloc	memory.c	/^int __pmd_alloc(struct mm_struct *mm, pud_t *pud, unsigned long address)$/;"	f
__pmd_trans_huge_lock	huge_memory.c	/^spinlock_t *__pmd_trans_huge_lock(pmd_t *pmd, struct vm_area_struct *vma)$/;"	f
__poison_element	mempool.c	/^static void __poison_element(void *element, size_t size)$/;"	f	file:
__populate_section_memmap	sparse-vmemmap.c	/^struct page * __meminit __populate_section_memmap(unsigned long pfn,$/;"	f
__populate_section_memmap	sparse.c	/^struct page __init *__populate_section_memmap(unsigned long pfn,$/;"	f
__probe_kernel_read	maccess.c	/^long __probe_kernel_read(void *dst, const void *src, size_t size)$/;"	f
__probe_kernel_write	maccess.c	/^long __probe_kernel_write(void *dst, const void *src, size_t size)$/;"	f
__probe_user_read	maccess.c	/^long __probe_user_read(void *dst, const void __user *src, size_t size)$/;"	f
__probe_user_write	maccess.c	/^long __probe_user_write(void __user *dst, const void *src, size_t size)$/;"	f
__pte_alloc	memory.c	/^int __pte_alloc(struct mm_struct *mm, pmd_t *pmd)$/;"	f
__pte_alloc_kernel	memory.c	/^int __pte_alloc_kernel(pmd_t *pmd)$/;"	f
__pud_alloc	memory.c	/^int __pud_alloc(struct mm_struct *mm, p4d_t *p4d, unsigned long address)$/;"	f
__pud_trans_huge_lock	huge_memory.c	/^spinlock_t *__pud_trans_huge_lock(pud_t *pud, struct vm_area_struct *vma)$/;"	f
__purge_vmap_area_lazy	vmalloc.c	/^static bool __purge_vmap_area_lazy(unsigned long start, unsigned long end)$/;"	f	file:
__put_anon_vma	rmap.c	/^void __put_anon_vma(struct anon_vma *anon_vma)$/;"	f
__put_compound_page	swap.c	/^static void __put_compound_page(struct page *page)$/;"	f	file:
__put_devmap_managed_page	memremap.c	/^EXPORT_SYMBOL(__put_devmap_managed_page);$/;"	v
__put_devmap_managed_page	memremap.c	/^void __put_devmap_managed_page(struct page *page)$/;"	f
__put_page	swap.c	/^EXPORT_SYMBOL(__put_page);$/;"	v
__put_page	swap.c	/^void __put_page(struct page *page)$/;"	f
__put_single_page	swap.c	/^static void __put_single_page(struct page *page)$/;"	f	file:
__putback_lru_fast	mlock.c	/^static void __putback_lru_fast(struct pagevec *pvec, int pgrescued)$/;"	f	file:
__putback_lru_fast_prepare	mlock.c	/^static bool __putback_lru_fast_prepare(struct page *page, struct pagevec *pvec,$/;"	f	file:
__read_mostly	cleancache.c	/^static const struct cleancache_ops *cleancache_ops __read_mostly;$/;"	v	typeref:struct:cleancache_ops	file:
__read_mostly	compaction.c	/^int sysctl_compact_unevictable_allowed __read_mostly = 1;$/;"	v
__read_mostly	debug.c	/^static bool page_init_poisoning __read_mostly = true;$/;"	v	file:
__read_mostly	frontswap.c	/^static bool frontswap_tmem_exclusive_gets_enabled __read_mostly;$/;"	v	file:
__read_mostly	frontswap.c	/^static bool frontswap_writethrough_enabled __read_mostly;$/;"	v	file:
__read_mostly	frontswap.c	/^static struct frontswap_ops *frontswap_ops __read_mostly;$/;"	v	typeref:struct:frontswap_ops	file:
__read_mostly	highmem.c	/^atomic_long_t _totalhigh_pages __read_mostly;$/;"	v
__read_mostly	huge_memory.c	/^struct page *huge_zero_page __read_mostly;$/;"	v	typeref:struct:huge_zero_page
__read_mostly	huge_memory.c	/^unsigned long transparent_hugepage_flags __read_mostly =$/;"	v
__read_mostly	hugetlb.c	/^int hugetlb_max_hstate __read_mostly;$/;"	v
__read_mostly	hugetlb.c	/^static unsigned int minimum_order __read_mostly = UINT_MAX;$/;"	v	file:
__read_mostly	hugetlb_cgroup.c	/^static struct hugetlb_cgroup *root_h_cgroup __read_mostly;$/;"	v	typeref:struct:root_h_cgroup	file:
__read_mostly	khugepaged.c	/^static struct kmem_cache *mm_slot_cache __read_mostly;$/;"	v	typeref:struct:mm_slot_cache	file:
__read_mostly	khugepaged.c	/^static unsigned int khugepaged_alloc_sleep_millisecs __read_mostly = 60000;$/;"	v	file:
__read_mostly	khugepaged.c	/^static unsigned int khugepaged_max_ptes_none __read_mostly;$/;"	v	file:
__read_mostly	khugepaged.c	/^static unsigned int khugepaged_max_ptes_swap __read_mostly;$/;"	v	file:
__read_mostly	khugepaged.c	/^static unsigned int khugepaged_pages_to_scan __read_mostly;$/;"	v	file:
__read_mostly	khugepaged.c	/^static unsigned int khugepaged_scan_sleep_millisecs __read_mostly = 10000;$/;"	v	file:
__read_mostly	ksm.c	/^static bool ksm_use_zero_pages __read_mostly;$/;"	v	file:
__read_mostly	ksm.c	/^static unsigned int zero_checksum __read_mostly;$/;"	v	file:
__read_mostly	memcontrol.c	/^int do_swap_account __read_mostly;$/;"	v
__read_mostly	memcontrol.c	/^static struct mem_cgroup_tree soft_limit_tree __read_mostly;$/;"	v	typeref:struct:soft_limit_tree	file:
__read_mostly	memcontrol.c	/^struct cgroup_subsys memory_cgrp_subsys __read_mostly;$/;"	v	typeref:struct:memory_cgrp_subsys
__read_mostly	memcontrol.c	/^struct mem_cgroup *root_mem_cgroup __read_mostly;$/;"	v	typeref:struct:root_mem_cgroup
__read_mostly	memory-failure.c	/^atomic_long_t num_poisoned_pages __read_mostly = ATOMIC_LONG_INIT(0);$/;"	v
__read_mostly	memory-failure.c	/^int sysctl_memory_failure_early_kill __read_mostly = 0;$/;"	v
__read_mostly	memory-failure.c	/^int sysctl_memory_failure_recovery __read_mostly = 1;$/;"	v
__read_mostly	memory.c	/^int randomize_va_space __read_mostly =$/;"	v
__read_mostly	memory.c	/^static unsigned long fault_around_bytes __read_mostly =$/;"	v	file:
__read_mostly	memory.c	/^unsigned long highest_memmap_pfn __read_mostly;$/;"	v
__read_mostly	memory.c	/^unsigned long zero_pfn __read_mostly;$/;"	v
__read_mostly	mmap.c	/^int mmap_rnd_bits __read_mostly = CONFIG_ARCH_MMAP_RND_BITS;$/;"	v
__read_mostly	mmap.c	/^int mmap_rnd_compat_bits __read_mostly = CONFIG_ARCH_MMAP_RND_COMPAT_BITS;$/;"	v
__read_mostly	oom_kill.c	/^static bool oom_killer_disabled __read_mostly;$/;"	v	file:
__read_mostly	page_alloc.c	/^atomic_long_t _totalram_pages __read_mostly;$/;"	v
__read_mostly	page_alloc.c	/^bool _debug_pagealloc_enabled_early __read_mostly$/;"	v
__read_mostly	page_alloc.c	/^gfp_t gfp_allowed_mask __read_mostly = GFP_BOOT_MASK;$/;"	v
__read_mostly	page_alloc.c	/^int page_group_by_mobility_disabled __read_mostly;$/;"	v
__read_mostly	page_alloc.c	/^int watermark_boost_factor __read_mostly = 15000;$/;"	v
__read_mostly	page_alloc.c	/^int watermark_boost_factor __read_mostly;$/;"	v
__read_mostly	page_alloc.c	/^nodemask_t node_states[NR_NODE_STATES] __read_mostly = {$/;"	v
__read_mostly	page_alloc.c	/^unsigned int nr_node_ids __read_mostly = MAX_NUMNODES;$/;"	v
__read_mostly	page_alloc.c	/^unsigned int nr_online_nodes __read_mostly = 1;$/;"	v
__read_mostly	page_alloc.c	/^unsigned int pageblock_order __read_mostly;$/;"	v
__read_mostly	page_alloc.c	/^unsigned long totalcma_pages __read_mostly;$/;"	v
__read_mostly	page_alloc.c	/^unsigned long totalreserve_pages __read_mostly;$/;"	v
__read_mostly	page_poison.c	/^static bool want_page_poisoning __read_mostly;$/;"	v	file:
__read_mostly	percpu.c	/^static bool pcpu_async_enabled __read_mostly;$/;"	v	file:
__read_mostly	percpu.c	/^unsigned long __per_cpu_offset[NR_CPUS] __read_mostly;$/;"	v
__read_mostly	shmem.c	/^static int shmem_huge __read_mostly;$/;"	v	file:
__read_mostly	slab.c	/^static int use_alien_caches __read_mostly = 1;$/;"	v	file:
__read_mostly	swap_state.c	/^static bool enable_vma_readahead __read_mostly = true;$/;"	v	file:
__read_mostly	swap_state.c	/^static unsigned int nr_swapper_spaces[MAX_SWAPFILES] __read_mostly;$/;"	v	file:
__read_mostly	swap_state.c	/^struct address_space *swapper_spaces[MAX_SWAPFILES] __read_mostly;$/;"	v	typeref:struct:swapper_spaces
__read_mostly	util.c	/^int sysctl_max_map_count __read_mostly = DEFAULT_MAX_MAP_COUNT;$/;"	v
__read_mostly	util.c	/^int sysctl_overcommit_memory __read_mostly = OVERCOMMIT_GUESS;$/;"	v
__read_mostly	util.c	/^int sysctl_overcommit_ratio __read_mostly = 50;$/;"	v
__read_mostly	util.c	/^unsigned long sysctl_admin_reserve_kbytes __read_mostly = 1UL << 13; \/* 8MB *\/$/;"	v
__read_mostly	util.c	/^unsigned long sysctl_overcommit_kbytes __read_mostly;$/;"	v
__read_mostly	util.c	/^unsigned long sysctl_user_reserve_kbytes __read_mostly = 1UL << 17; \/* 128MB *\/$/;"	v
__read_mostly	vmalloc.c	/^static bool vmap_initialized __read_mostly;$/;"	v	file:
__read_mostly	vmstat.c	/^int sysctl_stat_interval __read_mostly = HZ;$/;"	v
__read_mostly	workingset.c	/^static unsigned int bucket_order __read_mostly;$/;"	v	file:
__read_swap_cache_async	swap_state.c	/^struct page *__read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
__reenable_swap_slots_cache	swap_slots.c	/^static void __reenable_swap_slots_cache(void)$/;"	f	file:
__release_memory_resource	memory_hotplug.c	/^static void __release_memory_resource(resource_size_t start,$/;"	f	file:
__release_z3fold_page	z3fold.c	/^static void __release_z3fold_page(struct z3fold_header *zhdr, bool locked)$/;"	f	file:
__releases	nommu.c	/^	__releases(nommu_region_sem)$/;"	f
__remove_mapping	vmscan.c	/^static int __remove_mapping(struct address_space *mapping, struct page *page,$/;"	f	file:
__remove_memory	memory_hotplug.c	/^void __remove_memory(int nid, u64 start, u64 size)$/;"	f
__remove_object	kmemleak.c	/^static void __remove_object(struct kmemleak_object *object)$/;"	f	file:
__remove_pages	memory_hotplug.c	/^void __remove_pages(unsigned long pfn, unsigned long nr_pages,$/;"	f
__remove_section	memory_hotplug.c	/^static void __remove_section(unsigned long pfn, unsigned long nr_pages,$/;"	f	file:
__remove_shared_vm_struct	mmap.c	/^static void __remove_shared_vm_struct(struct vm_area_struct *vma,$/;"	f	file:
__reset_isolation_pfn	compaction.c	/^__reset_isolation_pfn(struct zone *zone, unsigned long pfn, bool check_source,$/;"	f	file:
__reset_isolation_suitable	compaction.c	/^static void __reset_isolation_suitable(struct zone *zone)$/;"	f	file:
__reset_page_owner	page_owner.c	/^void __reset_page_owner(struct page *page, unsigned int order)$/;"	f
__rmqueue	page_alloc.c	/^__rmqueue(struct zone *zone, unsigned int order, int migratetype,$/;"	f	file:
__rmqueue_cma_fallback	page_alloc.c	/^static __always_inline struct page *__rmqueue_cma_fallback(struct zone *zone,$/;"	f	file:
__rmqueue_cma_fallback	page_alloc.c	/^static inline struct page *__rmqueue_cma_fallback(struct zone *zone,$/;"	f	file:
__rmqueue_fallback	page_alloc.c	/^__rmqueue_fallback(struct zone *zone, int order, int start_migratetype,$/;"	f	file:
__rmqueue_pcplist	page_alloc.c	/^static struct page *__rmqueue_pcplist(struct zone *zone, int migratetype,$/;"	f	file:
__rmqueue_smallest	page_alloc.c	/^struct page *__rmqueue_smallest(struct zone *zone, unsigned int order,$/;"	f	file:
__ro_after_init	mmap.c	/^pgprot_t protection_map[16] __ro_after_init = {$/;"	v
__ro_after_init	percpu.c	/^const unsigned long *pcpu_unit_offsets __ro_after_init;	\/* cpu -> unit offset *\/$/;"	v
__ro_after_init	percpu.c	/^int pcpu_nr_slots __ro_after_init;$/;"	v
__ro_after_init	percpu.c	/^static const int *pcpu_unit_map __ro_after_init;		\/* cpu -> unit *\/$/;"	v	file:
__ro_after_init	percpu.c	/^static const size_t *pcpu_group_sizes __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static const unsigned long *pcpu_group_offsets __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static int pcpu_atom_size __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static int pcpu_nr_groups __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static int pcpu_nr_units __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static int pcpu_unit_pages __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static int pcpu_unit_size __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static size_t pcpu_chunk_struct_size __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static unsigned int pcpu_high_unit_cpu __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^static unsigned int pcpu_low_unit_cpu __ro_after_init;$/;"	v	file:
__ro_after_init	percpu.c	/^struct list_head *pcpu_slot __ro_after_init; \/* chunk list slots *\/$/;"	v	typeref:struct:pcpu_slot
__ro_after_init	percpu.c	/^struct pcpu_chunk *pcpu_first_chunk __ro_after_init;$/;"	v	typeref:struct:pcpu_first_chunk
__ro_after_init	percpu.c	/^struct pcpu_chunk *pcpu_reserved_chunk __ro_after_init;$/;"	v	typeref:struct:pcpu_reserved_chunk
__ro_after_init	percpu.c	/^void *pcpu_base_addr __ro_after_init;$/;"	v
__ro_after_init	shuffle.c	/^static unsigned long shuffle_state __ro_after_init;$/;"	v	file:
__ro_after_init	slab_common.c	/^bool usercopy_fallback __ro_after_init =$/;"	v
__ro_after_init	slab_common.c	/^kmalloc_caches[NR_KMALLOC_TYPES][KMALLOC_SHIFT_HIGH + 1] __ro_after_init =$/;"	v	typeref:struct:kmalloc_caches
__ro_after_init	slab_common.c	/^static u8 size_index[24] __ro_after_init = {$/;"	v	file:
__root_caches_node	slab.h	/^			struct list_head __root_caches_node;$/;"	m	struct:memcg_cache_params::__anon8::__anon9	typeref:struct:memcg_cache_params::__anon8::__anon9::list_head
__save_stack_trace	kmemleak.c	/^static int __save_stack_trace(unsigned long *trace)$/;"	f	file:
__section_nr	sparse.c	/^unsigned long __section_nr(struct mem_section *ms)$/;"	f
__set_page_dirty_no_writeback	page-writeback.c	/^int __set_page_dirty_no_writeback(struct page *page)$/;"	f
__set_page_dirty_nobuffers	page-writeback.c	/^EXPORT_SYMBOL(__set_page_dirty_nobuffers);$/;"	v
__set_page_dirty_nobuffers	page-writeback.c	/^int __set_page_dirty_nobuffers(struct page *page)$/;"	f
__set_page_owner	page_owner.c	/^noinline void __set_page_owner(struct page *page, unsigned int order,$/;"	f
__set_page_owner_handle	page_owner.c	/^static inline void __set_page_owner_handle(struct page *page,$/;"	f	file:
__set_page_owner_migrate_reason	page_owner.c	/^void __set_page_owner_migrate_reason(struct page *page, int reason)$/;"	f
__setup_per_zone_wmarks	page_alloc.c	/^static void __setup_per_zone_wmarks(void)$/;"	f	file:
__shmem_file_setup	shmem.c	/^static struct file *__shmem_file_setup(struct vfsmount *mnt, const char *name, loff_t size,$/;"	f	file:
__should_fail_alloc_page	page_alloc.c	/^static bool __should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
__should_fail_alloc_page	page_alloc.c	/^static inline bool __should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
__should_failslab	failslab.c	/^bool __should_failslab(struct kmem_cache *s, gfp_t gfpflags)$/;"	f
__shuffle_free_memory	shuffle.c	/^void __meminit __shuffle_free_memory(pg_data_t *pgdat)$/;"	f
__shuffle_zone	shuffle.c	/^void __meminit __shuffle_zone(struct zone *z)$/;"	f
__slab_alloc	slub.c	/^static void *__slab_alloc(struct kmem_cache *s, gfp_t gfpflags, int node,$/;"	f	file:
__slab_error	slab.c	/^static void __slab_error(const char *function, struct kmem_cache *cachep,$/;"	f	file:
__slab_free	slub.c	/^static void __slab_free(struct kmem_cache *s, struct page *page,$/;"	f	file:
__soft_offline_page	memory-failure.c	/^static int __soft_offline_page(struct page *page, int flags)$/;"	f	file:
__split_huge_page	huge_memory.c	/^static void __split_huge_page(struct page *page, struct list_head *list,$/;"	f	file:
__split_huge_page_tail	huge_memory.c	/^static void __split_huge_page_tail(struct page *head, int tail,$/;"	f	file:
__split_huge_pmd	huge_memory.c	/^void __split_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f
__split_huge_pmd_locked	huge_memory.c	/^static void __split_huge_pmd_locked(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
__split_huge_pud	huge_memory.c	/^void __split_huge_pud(struct vm_area_struct *vma, pud_t *pud,$/;"	f
__split_huge_pud_locked	huge_memory.c	/^static void __split_huge_pud_locked(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
__split_huge_zero_page_pmd	huge_memory.c	/^static void __split_huge_zero_page_pmd(struct vm_area_struct *vma,$/;"	f	file:
__split_page_owner	page_owner.c	/^void __split_page_owner(struct page *page, unsigned int order)$/;"	f
__split_vma	mmap.c	/^int __split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__stable_node_chain	ksm.c	/^static struct page *__stable_node_chain(struct stable_node **_stable_node_dup,$/;"	f	file:
__stable_node_dup_del	ksm.c	/^static inline void __stable_node_dup_del(struct stable_node *dup)$/;"	f	file:
__swap_count	swapfile.c	/^int __swap_count(swp_entry_t entry)$/;"	f
__swap_duplicate	swapfile.c	/^static int __swap_duplicate(swp_entry_t entry, unsigned char usage)$/;"	f	file:
__swap_entry_free	swapfile.c	/^static unsigned char __swap_entry_free(struct swap_info_struct *p,$/;"	f	file:
__swap_entry_free_locked	swapfile.c	/^static unsigned char __swap_entry_free_locked(struct swap_info_struct *p,$/;"	f	file:
__swap_info_get	swapfile.c	/^static struct swap_info_struct *__swap_info_get(swp_entry_t entry)$/;"	f	file:
__swap_writepage	page_io.c	/^int __swap_writepage(struct page *page, struct writeback_control *wbc,$/;"	f
__swapin_nr_pages	swap_state.c	/^static unsigned int __swapin_nr_pages(unsigned long prev_offset,$/;"	f	file:
__swp_swapcount	swapfile.c	/^int __swp_swapcount(swp_entry_t entry)$/;"	f
__task_will_free_mem	oom_kill.c	/^static inline bool __task_will_free_mem(struct task_struct *task)$/;"	f	file:
__test_page_isolated_in_pageblock	page_isolation.c	/^__test_page_isolated_in_pageblock(unsigned long pfn, unsigned long end_pfn,$/;"	f	file:
__test_set_page_writeback	page-writeback.c	/^EXPORT_SYMBOL(__test_set_page_writeback);$/;"	v
__test_set_page_writeback	page-writeback.c	/^int __test_set_page_writeback(struct page *page, bool keep_write)$/;"	f
__thp_get_unmapped_area	huge_memory.c	/^static unsigned long __thp_get_unmapped_area(struct file *filp,$/;"	f	file:
__tlb_remove_page_size	mmu_gather.c	/^bool __tlb_remove_page_size(struct mmu_gather *tlb, struct page *page, int page_size)$/;"	f
__try_online_node	memory_hotplug.c	/^static int __try_online_node(int nid, u64 start, bool set_node_online)$/;"	f	file:
__try_to_reclaim_swap	swapfile.c	/^static int __try_to_reclaim_swap(struct swap_info_struct *si,$/;"	f	file:
__unlock_page_memcg	memcontrol.c	/^void __unlock_page_memcg(struct mem_cgroup *memcg)$/;"	f
__unmap_and_move	migrate.c	/^static int __unmap_and_move(struct page *page, struct page *newpage,$/;"	f	file:
__unmap_hugepage_range	hugetlb.c	/^void __unmap_hugepage_range(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
__unmap_hugepage_range_final	hugetlb.c	/^void __unmap_hugepage_range_final(struct mmu_gather *tlb,$/;"	f
__vfree	vmalloc.c	/^static void __vfree(const void *addr)$/;"	f	file:
__vfree_deferred	vmalloc.c	/^static inline void __vfree_deferred(const void *addr)$/;"	f	file:
__vm_enough_memory	util.c	/^int __vm_enough_memory(struct mm_struct *mm, long pages, int cap_sys_admin)$/;"	f
__vm_insert_mixed	memory.c	/^static vm_fault_t __vm_insert_mixed(struct vm_area_struct *vma,$/;"	f	file:
__vm_map_pages	memory.c	/^static int __vm_map_pages(struct vm_area_struct *vma, struct page **pages,$/;"	f	file:
__vm_munmap	mmap.c	/^static int __vm_munmap(unsigned long start, size_t len, bool downgrade)$/;"	f	file:
__vma_address	internal.h	/^__vma_address(struct page *page, struct vm_area_struct *vma)$/;"	f
__vma_adjust	mmap.c	/^int __vma_adjust(struct vm_area_struct *vma, unsigned long start,$/;"	f
__vma_link	mmap.c	/^__vma_link(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
__vma_link_file	mmap.c	/^static void __vma_link_file(struct vm_area_struct *vma)$/;"	f	file:
__vma_link_list	util.c	/^void __vma_link_list(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__vma_link_rb	mmap.c	/^void __vma_link_rb(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
__vma_rb_erase	mmap.c	/^static void __vma_rb_erase(struct vm_area_struct *vma, struct rb_root *root)$/;"	f	file:
__vma_reservation_common	hugetlb.c	/^static long __vma_reservation_common(struct hstate *h,$/;"	f	file:
__vma_unlink_common	mmap.c	/^static __always_inline void __vma_unlink_common(struct mm_struct *mm,$/;"	f	file:
__vma_unlink_prev	mmap.c	/^static inline void __vma_unlink_prev(struct mm_struct *mm,$/;"	f	file:
__vmalloc	nommu.c	/^EXPORT_SYMBOL(__vmalloc);$/;"	v
__vmalloc	nommu.c	/^void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc	vmalloc.c	/^EXPORT_SYMBOL(__vmalloc);$/;"	v
__vmalloc	vmalloc.c	/^void *__vmalloc(unsigned long size, gfp_t gfp_mask, pgprot_t prot)$/;"	f
__vmalloc_area_node	vmalloc.c	/^static void *__vmalloc_area_node(struct vm_struct *area, gfp_t gfp_mask,$/;"	f	file:
__vmalloc_node	vmalloc.c	/^static void *__vmalloc_node(unsigned long size, unsigned long align,$/;"	f	file:
__vmalloc_node_flags	nommu.c	/^void *__vmalloc_node_flags(unsigned long size, int node, gfp_t flags)$/;"	f
__vmalloc_node_flags	vmalloc.c	/^static inline void *__vmalloc_node_flags(unsigned long size,$/;"	f	file:
__vmalloc_node_flags_caller	vmalloc.c	/^void *__vmalloc_node_flags_caller(unsigned long size, int node, gfp_t flags,$/;"	f
__vmalloc_node_range	vmalloc.c	/^EXPORT_SYMBOL_GPL(__vmalloc_node_range);$/;"	v
__vmalloc_node_range	vmalloc.c	/^void *__vmalloc_node_range(unsigned long size, unsigned long align,$/;"	f
__vunmap	vmalloc.c	/^static void __vunmap(const void *addr, int deallocate_pages)$/;"	f	file:
__walk_page_range	pagewalk.c	/^static int __walk_page_range(unsigned long start, unsigned long end,$/;"	f	file:
__wb_calc_thresh	page-writeback.c	/^static unsigned long __wb_calc_thresh(struct dirty_throttle_control *dtc)$/;"	f	file:
__wb_update_bandwidth	page-writeback.c	/^static void __wb_update_bandwidth(struct dirty_throttle_control *gdtc,$/;"	f	file:
__wb_writeout_inc	page-writeback.c	/^static inline void __wb_writeout_inc(struct bdi_writeback *wb)$/;"	f	file:
__writepage	page-writeback.c	/^static int __writepage(struct page *page, struct writeback_control *wbc,$/;"	f	file:
__z3fold_alloc	z3fold.c	/^static inline struct z3fold_header *__z3fold_alloc(struct z3fold_pool *pool,$/;"	f	file:
__zone_watermark_ok	page_alloc.c	/^bool __zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,$/;"	f
__zs_compact	zsmalloc.c	/^static void __zs_compact(struct zs_pool *pool, struct size_class *class)$/;"	f	file:
__zs_cpu_down	zsmalloc.c	/^static inline void __zs_cpu_down(struct mapping_area *area)$/;"	f	file:
__zs_cpu_up	zsmalloc.c	/^static inline int __zs_cpu_up(struct mapping_area *area)$/;"	f	file:
__zs_map_object	zsmalloc.c	/^static inline void *__zs_map_object(struct mapping_area *area,$/;"	f	file:
__zs_map_object	zsmalloc.c	/^static void *__zs_map_object(struct mapping_area *area,$/;"	f	file:
__zs_unmap_object	zsmalloc.c	/^static inline void __zs_unmap_object(struct mapping_area *area,$/;"	f	file:
__zs_unmap_object	zsmalloc.c	/^static void __zs_unmap_object(struct mapping_area *area,$/;"	f	file:
__zswap_param_set	zswap.c	/^static int __zswap_param_set(const char *val, const struct kernel_param *kp,$/;"	f	file:
__zswap_pool_create_fallback	zswap.c	/^static __init struct zswap_pool *__zswap_pool_create_fallback(void)$/;"	f	file:
__zswap_pool_current	zswap.c	/^static struct zswap_pool *__zswap_pool_current(void)$/;"	f	file:
__zswap_pool_empty	zswap.c	/^static void __zswap_pool_empty(struct kref *kref)$/;"	f	file:
__zswap_pool_release	zswap.c	/^static void __zswap_pool_release(struct work_struct *work)$/;"	f	file:
_debug_guardpage_enabled	page_alloc.c	/^DEFINE_STATIC_KEY_FALSE(_debug_guardpage_enabled);$/;"	v
_debug_guardpage_minorder	page_alloc.c	/^unsigned int _debug_guardpage_minorder;$/;"	v
_debug_pagealloc_enabled	page_alloc.c	/^DEFINE_STATIC_KEY_FALSE(_debug_pagealloc_enabled);$/;"	v
_debug_pagealloc_enabled	page_alloc.c	/^EXPORT_SYMBOL(_debug_pagealloc_enabled);$/;"	v
_debug_pagealloc_enabled_early	page_alloc.c	/^EXPORT_SYMBOL(_debug_pagealloc_enabled_early);$/;"	v
_deferred_grow_zone	page_alloc.c	/^_deferred_grow_zone(struct zone *zone, unsigned int order)$/;"	f	file:
_enable_swap_info	swapfile.c	/^static void _enable_swap_info(struct swap_info_struct *p)$/;"	f	file:
_install_special_mapping	mmap.c	/^struct vm_area_struct *_install_special_mapping($/;"	f
_node_numa_mem_	page_alloc.c	/^int _node_numa_mem_[MAX_NUMNODES];$/;"	v
_numa_mem_	page_alloc.c	/^EXPORT_PER_CPU_SYMBOL(_numa_mem_);$/;"	v
_swap_info_get	swapfile.c	/^static struct swap_info_struct *_swap_info_get(swp_entry_t entry)$/;"	f	file:
_totalhigh_pages	highmem.c	/^EXPORT_SYMBOL(_totalhigh_pages);$/;"	v
_totalram_pages	page_alloc.c	/^EXPORT_SYMBOL(_totalram_pages);$/;"	v
_vm_unmap_aliases	vmalloc.c	/^static void _vm_unmap_aliases(unsigned long start, unsigned long end, int flush)$/;"	f	file:
absent_pages_in_range	page_alloc.c	/^unsigned long __init absent_pages_in_range(unsigned long start_pfn,$/;"	f
ac	slab.c	/^	struct array_cache ac;$/;"	m	struct:alien_cache	typeref:struct:alien_cache::array_cache	file:
ac_classzone_idx	internal.h	122;"	d
access_addr	kasan/kasan.h	/^	const void *access_addr;$/;"	m	struct:kasan_access_info
access_process_vm	memory.c	/^EXPORT_SYMBOL_GPL(access_process_vm);$/;"	v
access_process_vm	memory.c	/^int access_process_vm(struct task_struct *tsk, unsigned long addr,$/;"	f
access_process_vm	nommu.c	/^EXPORT_SYMBOL_GPL(access_process_vm);$/;"	v
access_process_vm	nommu.c	/^int access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, int len,$/;"	f
access_remote_vm	memory.c	/^int access_remote_vm(struct mm_struct *mm, unsigned long addr,$/;"	f
access_remote_vm	nommu.c	/^int access_remote_vm(struct mm_struct *mm, unsigned long addr,$/;"	f
access_size	kasan/kasan.h	/^	size_t access_size;$/;"	m	struct:kasan_access_info
account_locked_vm	util.c	/^EXPORT_SYMBOL_GPL(account_locked_vm);$/;"	v
account_locked_vm	util.c	/^int account_locked_vm(struct mm_struct *mm, unsigned long pages, bool inc)$/;"	f
account_page_cleaned	page-writeback.c	/^void account_page_cleaned(struct page *page, struct address_space *mapping,$/;"	f
account_page_dirtied	page-writeback.c	/^void account_page_dirtied(struct page *page, struct address_space *mapping)$/;"	f
account_page_redirty	page-writeback.c	/^EXPORT_SYMBOL(account_page_redirty);$/;"	v
account_page_redirty	page-writeback.c	/^void account_page_redirty(struct page *page)$/;"	f
accountable_mapping	mmap.c	/^static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)$/;"	f	file:
acct_stack_growth	mmap.c	/^static int acct_stack_growth(struct vm_area_struct *vma,$/;"	f	file:
acquire_slab	slub.c	/^static inline void *acquire_slab(struct kmem_cache *s,$/;"	f	file:
action	memory-failure.c	/^	int (*action)(struct page *p, unsigned long pfn);$/;"	m	struct:page_state	file:
action_name	memory-failure.c	/^static const char *action_name[] = {$/;"	v	file:
action_page_types	memory-failure.c	/^static const char * const action_page_types[] = {$/;"	v	file:
action_result	memory-failure.c	/^static void action_result(unsigned long pfn, enum mf_action_page_type type,$/;"	f	file:
activate_page	swap.c	/^void activate_page(struct page *page)$/;"	f
activate_page_drain	swap.c	/^static inline void activate_page_drain(int cpu)$/;"	f	file:
activate_page_drain	swap.c	/^static void activate_page_drain(int cpu)$/;"	f	file:
active_objs	slab.h	/^	unsigned long active_objs;$/;"	m	struct:slabinfo
active_slabs	slab.h	/^	unsigned long active_slabs;$/;"	m	struct:slabinfo
add_element	mempool.c	/^static __always_inline void add_element(mempool_t *pool, void *element)$/;"	f	file:
add_full	slub.c	/^static inline void add_full(struct kmem_cache *s, struct kmem_cache_node *n,$/;"	f	file:
add_full	slub.c	/^static void add_full(struct kmem_cache *s,$/;"	f	file:
add_location	slub.c	/^static int add_location(struct loc_track *t, struct kmem_cache *s,$/;"	f	file:
add_memory	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(add_memory);$/;"	v
add_memory	memory_hotplug.c	/^int add_memory(int nid, u64 start, u64 size)$/;"	f
add_memory_resource	memory_hotplug.c	/^int __ref add_memory_resource(int nid, struct resource *res)$/;"	f
add_mm_counter_fast	memory.c	/^static void add_mm_counter_fast(struct mm_struct *mm, int member, int val)$/;"	f	file:
add_mm_rss_vec	memory.c	/^static inline void add_mm_rss_vec(struct mm_struct *mm, int *rss)$/;"	f	file:
add_nommu_region	nommu.c	/^static void add_nommu_region(struct vm_region *region)$/;"	f	file:
add_page_for_migration	migrate.c	/^static int add_page_for_migration(struct mm_struct *mm, unsigned long addr,$/;"	f	file:
add_page_wait_queue	filemap.c	/^EXPORT_SYMBOL_GPL(add_page_wait_queue);$/;"	v
add_page_wait_queue	filemap.c	/^void add_page_wait_queue(struct page *page, wait_queue_entry_t *waiter)$/;"	f
add_partial	slub.c	/^static inline void add_partial(struct kmem_cache_node *n,$/;"	f	file:
add_scan_area	kmemleak.c	/^static void add_scan_area(unsigned long ptr, size_t size, gfp_t gfp)$/;"	f	file:
add_swap_count_continuation	swapfile.c	/^int add_swap_count_continuation(swp_entry_t entry, gfp_t gfp_mask)$/;"	f
add_swap_extent	swapfile.c	/^EXPORT_SYMBOL_GPL(add_swap_extent);$/;"	v
add_swap_extent	swapfile.c	/^add_swap_extent(struct swap_info_struct *sis, unsigned long start_page,$/;"	f
add_to_avail_list	swapfile.c	/^static void add_to_avail_list(struct swap_info_struct *p)$/;"	f	file:
add_to_free_area_random	shuffle.c	/^void add_to_free_area_random(struct page *page, struct free_area *area,$/;"	f
add_to_kill	memory-failure.c	/^static void add_to_kill(struct task_struct *tsk, struct page *p,$/;"	f	file:
add_to_page_cache_locked	filemap.c	/^EXPORT_SYMBOL(add_to_page_cache_locked);$/;"	v
add_to_page_cache_locked	filemap.c	/^int add_to_page_cache_locked(struct page *page, struct address_space *mapping,$/;"	f
add_to_page_cache_lru	filemap.c	/^EXPORT_SYMBOL_GPL(add_to_page_cache_lru);$/;"	v
add_to_page_cache_lru	filemap.c	/^int add_to_page_cache_lru(struct page *page, struct address_space *mapping,$/;"	f
add_to_swap	swap_state.c	/^int add_to_swap(struct page *page)$/;"	f
add_to_swap_cache	swap_state.c	/^int add_to_swap_cache(struct page *page, swp_entry_t entry, gfp_t gfp)$/;"	f
add_to_unbuddied	z3fold.c	/^static inline void add_to_unbuddied(struct z3fold_pool *pool,$/;"	f	file:
add_total	swap_state.c	/^	unsigned long add_total;$/;"	m	struct:__anon23	file:
add_vma_to_mm	nommu.c	/^static void add_vma_to_mm(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
addr	gup_benchmark.c	/^	__u64 addr;$/;"	m	struct:gup_benchmark	file:
addr	memory-failure.c	/^	unsigned long addr;$/;"	m	struct:to_kill	file:
addr	mmap.c	/^	unsigned long addr;$/;"	m	struct:mmap_arg_struct	file:
addr	nommu.c	/^	unsigned long addr;$/;"	m	struct:mmap_arg_struct	file:
addr	slub.c	/^	unsigned long addr;	\/* Called from address *\/$/;"	m	struct:track	file:
addr	slub.c	/^	unsigned long addr;$/;"	m	struct:location	file:
addr_has_shadow	kasan/kasan.h	/^static inline bool addr_has_shadow(const void *addr)$/;"	f
addr_to_vb_idx	vmalloc.c	/^static unsigned long addr_to_vb_idx(unsigned long addr)$/;"	f	file:
address	khugepaged.c	/^	unsigned long address;$/;"	m	struct:khugepaged_scan	file:
address	ksm.c	/^	unsigned long address;		\/* + low bits used for flags below *\/$/;"	m	struct:rmap_item	file:
address	ksm.c	/^	unsigned long address;$/;"	m	struct:ksm_scan	file:
addrs	slub.c	/^	unsigned long addrs[TRACK_ADDRS_COUNT];	\/* Called from address *\/$/;"	m	struct:track	file:
adj_init_size	page_alloc.c	7551;"	d	file:
adj_init_size	page_alloc.c	7564;"	d	file:
adjust_managed_page_count	page_alloc.c	/^EXPORT_SYMBOL(adjust_managed_page_count);$/;"	v
adjust_managed_page_count	page_alloc.c	/^void adjust_managed_page_count(struct page *page, long count)$/;"	f
adjust_pool_surplus	hugetlb.c	/^static int adjust_pool_surplus(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
adjust_range_if_pmd_sharing_possible	hugetlb.c	/^void adjust_range_if_pmd_sharing_possible(struct vm_area_struct *vma,$/;"	f
adjust_va_to_fit_type	vmalloc.c	/^adjust_va_to_fit_type(struct vmap_area *va,$/;"	f	file:
adjust_zone_range_for_zone_movable	page_alloc.c	/^static void __init adjust_zone_range_for_zone_movable(int nid,$/;"	f	file:
age_active_anon	vmscan.c	/^static void age_active_anon(struct pglist_data *pgdat,$/;"	f	file:
alias_list	slub.c	/^static struct saved_alias *alias_list;$/;"	v	typeref:struct:saved_alias	file:
aliases	slub.c	/^SLAB_ATTR_RO(aliases);$/;"	v
aliases_show	slub.c	/^static ssize_t aliases_show(struct kmem_cache *s, char *buf)$/;"	f	file:
alien	slab.h	/^	struct alien_cache **alien;	\/* on other nodes *\/$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::alien_cache
alien_cache	slab.c	/^struct alien_cache {$/;"	s	file:
align	slab.h	/^	unsigned int align;	\/* Alignment as calculated *\/$/;"	m	struct:kmem_cache
align	slub.c	/^SLAB_ATTR_RO(align);$/;"	v
align_show	slub.c	/^static ssize_t align_show(struct kmem_cache *s, char *buf)$/;"	f	file:
aligned_vread	vmalloc.c	/^static int aligned_vread(char *buf, char *addr, unsigned long count)$/;"	f	file:
aligned_vwrite	vmalloc.c	/^static int aligned_vwrite(char *buf, char *addr, unsigned long count)$/;"	f	file:
all_vm_events	vmstat.c	/^EXPORT_SYMBOL_GPL(all_vm_events);$/;"	v
all_vm_events	vmstat.c	/^void all_vm_events(unsigned long *ret)$/;"	f
alloc_alien_cache	slab.c	/^static inline struct alien_cache **alloc_alien_cache(int node,$/;"	f	file:
alloc_alien_cache	slab.c	/^static struct alien_cache **alloc_alien_cache(int node, int limit, gfp_t gfp)$/;"	f	file:
alloc_arraycache	slab.c	/^static struct array_cache *alloc_arraycache(int node, int entries,$/;"	f	file:
alloc_block	slab.c	/^static __always_inline int alloc_block(struct kmem_cache *cachep,$/;"	f	file:
alloc_buddy_huge_page	hugetlb.c	/^static struct page *alloc_buddy_huge_page(struct hstate *h,$/;"	f	file:
alloc_buddy_huge_page_with_mpol	hugetlb.c	/^struct page *alloc_buddy_huge_page_with_mpol(struct hstate *h,$/;"	f	file:
alloc_calls	slub.c	/^SLAB_ATTR_RO(alloc_calls);$/;"	v
alloc_calls_show	slub.c	/^static ssize_t alloc_calls_show(struct kmem_cache *s, char *buf)$/;"	f	file:
alloc_cluster	swapfile.c	/^static void alloc_cluster(struct swap_info_struct *si, unsigned long idx)$/;"	f	file:
alloc_consistency_checks	slub.c	/^static inline int alloc_consistency_checks(struct kmem_cache *s,$/;"	f	file:
alloc_context	internal.h	/^struct alloc_context {$/;"	s
alloc_contig_range	page_alloc.c	/^int alloc_contig_range(unsigned long start, unsigned long end,$/;"	f
alloc_debug_processing	slub.c	/^static inline int alloc_debug_processing(struct kmem_cache *s,$/;"	f	file:
alloc_debug_processing	slub.c	/^static noinline int alloc_debug_processing(struct kmem_cache *s,$/;"	f	file:
alloc_flags	internal.h	/^	const unsigned int alloc_flags;	\/* alloc flags of a direct compactor *\/$/;"	m	struct:compact_control
alloc_flags_nofragment	page_alloc.c	/^alloc_flags_nofragment(struct zone *zone, gfp_t gfp_mask)$/;"	f	file:
alloc_fresh_huge_page	hugetlb.c	/^static struct page *alloc_fresh_huge_page(struct hstate *h,$/;"	f	file:
alloc_gigantic_page	hugetlb.c	/^static struct page *alloc_gigantic_page(struct hstate *h, gfp_t gfp_mask,$/;"	f	file:
alloc_huge_page	hugetlb.c	/^struct page *alloc_huge_page(struct vm_area_struct *vma,$/;"	f
alloc_huge_page_node	hugetlb.c	/^struct page *alloc_huge_page_node(struct hstate *h, int nid)$/;"	f
alloc_huge_page_nodemask	hugetlb.c	/^struct page *alloc_huge_page_nodemask(struct hstate *h, int preferred_nid,$/;"	f
alloc_huge_page_vma	hugetlb.c	/^struct page *alloc_huge_page_vma(struct hstate *h, struct vm_area_struct *vma,$/;"	f
alloc_hugepage_direct_gfpmask	huge_memory.c	/^static inline gfp_t alloc_hugepage_direct_gfpmask(struct vm_area_struct *vma)$/;"	f	file:
alloc_hugepage_khugepaged_gfpmask	khugepaged.c	/^static inline gfp_t alloc_hugepage_khugepaged_gfpmask(void)$/;"	f	file:
alloc_khugepaged_hugepage	khugepaged.c	/^static inline struct page *alloc_khugepaged_hugepage(void)$/;"	f	file:
alloc_kmem_cache_cpus	slab.c	/^static struct array_cache __percpu *alloc_kmem_cache_cpus($/;"	f	file:
alloc_kmem_cache_cpus	slub.c	/^static inline int alloc_kmem_cache_cpus(struct kmem_cache *s)$/;"	f	file:
alloc_large_system_hash	page_alloc.c	/^void *__init alloc_large_system_hash(const char *tablename,$/;"	f
alloc_loc_track	slub.c	/^static int alloc_loc_track(struct loc_track *t, unsigned long max, gfp_t flags)$/;"	f	file:
alloc_map	percpu-internal.h	/^	unsigned long		*alloc_map;	\/* allocation map *\/$/;"	m	struct:pcpu_chunk
alloc_mem_cgroup_per_node_info	memcontrol.c	/^static int alloc_mem_cgroup_per_node_info(struct mem_cgroup *memcg, int node)$/;"	f	file:
alloc_migrate_huge_page	hugetlb.c	/^struct page *alloc_migrate_huge_page(struct hstate *h, gfp_t gfp_mask,$/;"	f
alloc_migrate_target	page_isolation.c	/^struct page *alloc_migrate_target(struct page *page, unsigned long private)$/;"	f
alloc_misplaced_dst_page	migrate.c	/^static struct page *alloc_misplaced_dst_page(struct page *page,$/;"	f	file:
alloc_mm_slot	khugepaged.c	/^static inline struct mm_slot *alloc_mm_slot(void)$/;"	f	file:
alloc_mm_slot	ksm.c	/^static inline struct mm_slot *alloc_mm_slot(void)$/;"	f	file:
alloc_new_node_page	mempolicy.c	/^struct page *alloc_new_node_page(struct page *page, unsigned long node)$/;"	f
alloc_new_pmd	mremap.c	/^static pmd_t *alloc_new_pmd(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
alloc_node_mem_map	page_alloc.c	/^static void __ref alloc_node_mem_map(struct pglist_data *pgdat) { }$/;"	f	file:
alloc_node_mem_map	page_alloc.c	/^static void __ref alloc_node_mem_map(struct pglist_data *pgdat)$/;"	f	file:
alloc_node_page_ext	page_ext.c	/^static int __init alloc_node_page_ext(int nid)$/;"	f	file:
alloc_page_ext	page_ext.c	/^static void *__meminit alloc_page_ext(size_t size, int nid)$/;"	f	file:
alloc_page_interleave	mempolicy.c	/^static struct page *alloc_page_interleave(gfp_t gfp, unsigned order,$/;"	f	file:
alloc_pages_current	mempolicy.c	/^EXPORT_SYMBOL(alloc_pages_current);$/;"	v
alloc_pages_current	mempolicy.c	/^struct page *alloc_pages_current(gfp_t gfp, unsigned order)$/;"	f
alloc_pages_exact	page_alloc.c	/^EXPORT_SYMBOL(alloc_pages_exact);$/;"	v
alloc_pages_exact	page_alloc.c	/^void *alloc_pages_exact(size_t size, gfp_t gfp_mask)$/;"	f
alloc_pages_exact_nid	page_alloc.c	/^void * __meminit alloc_pages_exact_nid(int nid, size_t size, gfp_t gfp_mask)$/;"	f
alloc_pages_vma	mempolicy.c	/^EXPORT_SYMBOL(alloc_pages_vma);$/;"	v
alloc_pages_vma	mempolicy.c	/^alloc_pages_vma(gfp_t gfp, int order, struct vm_area_struct *vma,$/;"	f
alloc_pool_huge_page	hugetlb.c	/^static int alloc_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
alloc_rmap_item	ksm.c	/^static inline struct rmap_item *alloc_rmap_item(void)$/;"	f	file:
alloc_set_pte	memory.c	/^vm_fault_t alloc_set_pte(struct vm_fault *vmf, struct mem_cgroup *memcg,$/;"	f
alloc_slab_page	slub.c	/^static inline struct page *alloc_slab_page(struct kmem_cache *s,$/;"	f	file:
alloc_slabmgmt	slab.c	/^static void *alloc_slabmgmt(struct kmem_cache *cachep,$/;"	f	file:
alloc_sleep_millisecs_attr	khugepaged.c	/^static struct kobj_attribute alloc_sleep_millisecs_attr =$/;"	v	typeref:struct:kobj_attribute	file:
alloc_sleep_millisecs_show	khugepaged.c	/^static ssize_t alloc_sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
alloc_sleep_millisecs_store	khugepaged.c	/^static ssize_t alloc_sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
alloc_slots	z3fold.c	/^static inline struct z3fold_buddy_slots *alloc_slots(struct z3fold_pool *pool,$/;"	f	file:
alloc_stable_node	ksm.c	/^static inline struct stable_node *alloc_stable_node(void)$/;"	f	file:
alloc_stable_node_chain	ksm.c	/^static struct stable_node *alloc_stable_node_chain(struct stable_node *dup,$/;"	f	file:
alloc_surplus_huge_page	hugetlb.c	/^static struct page *alloc_surplus_huge_page(struct hstate *h, gfp_t gfp_mask,$/;"	f	file:
alloc_swap_info	swapfile.c	/^static struct swap_info_struct *alloc_swap_info(void)$/;"	f	file:
alloc_swap_slot_cache	swap_slots.c	/^static int alloc_swap_slot_cache(unsigned int cpu)$/;"	f	file:
alloc_track	kasan/kasan.h	/^	struct kasan_track alloc_track;$/;"	m	struct:kasan_alloc_meta	typeref:struct:kasan_alloc_meta::kasan_track
alloc_vm_area	nommu.c	/^EXPORT_SYMBOL_GPL(alloc_vm_area);$/;"	v
alloc_vm_area	nommu.c	/^struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)$/;"	f
alloc_vm_area	vmalloc.c	/^EXPORT_SYMBOL_GPL(alloc_vm_area);$/;"	v
alloc_vm_area	vmalloc.c	/^struct vm_struct *alloc_vm_area(size_t size, pte_t **ptes)$/;"	f
alloc_vmap_area	vmalloc.c	/^static struct vmap_area *alloc_vmap_area(unsigned long size,$/;"	f	file:
alloc_zspage	zsmalloc.c	/^static struct zspage *alloc_zspage(struct zs_pool *pool,$/;"	f	file:
allocate_slab	slub.c	/^static struct page *allocate_slab(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
allocation	dmapool.c	/^	size_t allocation;$/;"	m	struct:dma_pool	file:
allow_direct_reclaim	vmscan.c	/^static bool allow_direct_reclaim(pg_data_t *pgdat)$/;"	f	file:
alternate_node_alloc	slab.c	/^static inline void *alternate_node_alloc(struct kmem_cache *cachep,$/;"	f	file:
alternate_node_alloc	slab.c	/^static void *alternate_node_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
altmap_alloc_block_buf	sparse-vmemmap.c	/^void * __meminit altmap_alloc_block_buf(unsigned long size,$/;"	f
anon_vma	ksm.c	/^		struct anon_vma *anon_vma;	\/* when stable *\/$/;"	m	union:rmap_item::__anon18	typeref:struct:rmap_item::__anon18::anon_vma	file:
anon_vma_alloc	rmap.c	/^static inline struct anon_vma *anon_vma_alloc(void)$/;"	f	file:
anon_vma_cachep	rmap.c	/^static struct kmem_cache *anon_vma_cachep;$/;"	v	typeref:struct:kmem_cache	file:
anon_vma_chain_alloc	rmap.c	/^static inline struct anon_vma_chain *anon_vma_chain_alloc(gfp_t gfp)$/;"	f	file:
anon_vma_chain_cachep	rmap.c	/^static struct kmem_cache *anon_vma_chain_cachep;$/;"	v	typeref:struct:kmem_cache	file:
anon_vma_chain_free	rmap.c	/^static void anon_vma_chain_free(struct anon_vma_chain *anon_vma_chain)$/;"	f	file:
anon_vma_chain_link	rmap.c	/^static void anon_vma_chain_link(struct vm_area_struct *vma,$/;"	f	file:
anon_vma_clone	rmap.c	/^int anon_vma_clone(struct vm_area_struct *dst, struct vm_area_struct *src)$/;"	f
anon_vma_compatible	mmap.c	/^static int anon_vma_compatible(struct vm_area_struct *a, struct vm_area_struct *b)$/;"	f	file:
anon_vma_ctor	rmap.c	/^static void anon_vma_ctor(void *data)$/;"	f	file:
anon_vma_fork	rmap.c	/^int anon_vma_fork(struct vm_area_struct *vma, struct vm_area_struct *pvma)$/;"	f
anon_vma_free	rmap.c	/^static inline void anon_vma_free(struct anon_vma *anon_vma)$/;"	f	file:
anon_vma_init	rmap.c	/^void __init anon_vma_init(void)$/;"	f
anon_vma_interval_tree_insert	interval_tree.c	/^void anon_vma_interval_tree_insert(struct anon_vma_chain *node,$/;"	f
anon_vma_interval_tree_iter_first	interval_tree.c	/^anon_vma_interval_tree_iter_first(struct rb_root_cached *root,$/;"	f
anon_vma_interval_tree_iter_next	interval_tree.c	/^anon_vma_interval_tree_iter_next(struct anon_vma_chain *node,$/;"	f
anon_vma_interval_tree_post_update_vma	mmap.c	/^anon_vma_interval_tree_post_update_vma(struct vm_area_struct *vma)$/;"	f	file:
anon_vma_interval_tree_pre_update_vma	mmap.c	/^anon_vma_interval_tree_pre_update_vma(struct vm_area_struct *vma)$/;"	f	file:
anon_vma_interval_tree_remove	interval_tree.c	/^void anon_vma_interval_tree_remove(struct anon_vma_chain *node,$/;"	f
anon_vma_interval_tree_verify	interval_tree.c	/^void anon_vma_interval_tree_verify(struct anon_vma_chain *node)$/;"	f
any_slab_objects	slub.c	/^static int any_slab_objects(struct kmem_cache *s)$/;"	f	file:
apply_mlockall_flags	mlock.c	/^static int apply_mlockall_flags(int flags)$/;"	f	file:
apply_policy_zone	mempolicy.c	/^static int apply_policy_zone(struct mempolicy *policy, enum zone_type zone)$/;"	f	file:
apply_to_p4d_range	memory.c	/^static int apply_to_p4d_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
apply_to_page_range	memory.c	/^EXPORT_SYMBOL_GPL(apply_to_page_range);$/;"	v
apply_to_page_range	memory.c	/^int apply_to_page_range(struct mm_struct *mm, unsigned long addr,$/;"	f
apply_to_pmd_range	memory.c	/^static int apply_to_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
apply_to_pte_range	memory.c	/^static int apply_to_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
apply_to_pud_range	memory.c	/^static int apply_to_pud_range(struct mm_struct *mm, p4d_t *p4d,$/;"	f	file:
apply_vma_lock_flags	mlock.c	/^static int apply_vma_lock_flags(unsigned long start, size_t len,$/;"	f	file:
arch_filter_pgprot	mmap.c	/^static inline pgprot_t arch_filter_pgprot(pgprot_t prot)$/;"	f	file:
arch_get_mmap_base	mmap.c	2085;"	d	file:
arch_get_mmap_end	mmap.c	2081;"	d	file:
arch_get_unmapped_area	mmap.c	/^arch_get_unmapped_area(struct file *filp, unsigned long addr,$/;"	f
arch_get_unmapped_area	nommu.c	/^unsigned long arch_get_unmapped_area(struct file *file, unsigned long addr,$/;"	f
arch_get_unmapped_area_topdown	mmap.c	/^arch_get_unmapped_area_topdown(struct file *filp, unsigned long addr,$/;"	f
arch_kasan_get_tag	kasan/kasan.h	200;"	d
arch_kasan_reset_tag	kasan/kasan.h	197;"	d
arch_kasan_set_tag	kasan/kasan.h	/^static inline const void *arch_kasan_set_tag(const void *addr, u8 tag)$/;"	f
arch_mmap_check	mmap.c	59;"	d	file:
arch_mmap_rnd	util.c	/^unsigned long arch_mmap_rnd(void)$/;"	f
arch_pick_mmap_layout	util.c	/^void arch_pick_mmap_layout(struct mm_struct *mm, struct rlimit *rlim_stack)$/;"	f
arch_randomize_brk	util.c	/^unsigned long arch_randomize_brk(struct mm_struct *mm)$/;"	f
arch_reserved_kernel_pages	page_alloc.c	/^static unsigned long __init arch_reserved_kernel_pages(void)$/;"	f	file:
area_list	kmemleak.c	/^	struct hlist_head area_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::hlist_head	file:
array_cache	slab.c	/^struct array_cache {$/;"	s	file:
assign_tag	kasan/common.c	/^static u8 assign_tag(struct kmem_cache *cache, const void *object,$/;"	f	file:
async_free_zspage	zsmalloc.c	/^static void async_free_zspage(struct work_struct *work)$/;"	f	file:
attr	failslab.c	/^	struct fault_attr attr;$/;"	m	struct:__anon6	typeref:struct:__anon6::fault_attr	file:
attr	page_alloc.c	/^	struct fault_attr attr;$/;"	m	struct:__anon7	typeref:struct:__anon7::fault_attr	file:
attr	slub.c	/^	struct attribute attr;$/;"	m	struct:slab_attribute	typeref:struct:slab_attribute::attribute	file:
augment_tree_propagate_check	vmalloc.c	/^augment_tree_propagate_check(struct rb_node *n)$/;"	f	file:
augment_tree_propagate_from	vmalloc.c	/^augment_tree_propagate_from(struct vmap_area *va)$/;"	f	file:
avail	page-writeback.c	/^	unsigned long		avail;		\/* dirtyable *\/$/;"	m	struct:dirty_throttle_control	file:
avail	slab.c	/^	unsigned int avail;$/;"	m	struct:array_cache	file:
avc_last_pgoff	interval_tree.c	/^static inline unsigned long avc_last_pgoff(struct anon_vma_chain *avc)$/;"	f	file:
avc_start_pgoff	interval_tree.c	/^static inline unsigned long avc_start_pgoff(struct anon_vma_chain *avc)$/;"	f	file:
bad_page	page_alloc.c	/^static void bad_page(struct page *page, const char *reason,$/;"	f	file:
bad_range	page_alloc.c	/^static inline int __maybe_unused bad_range(struct zone *zone, struct page *page)$/;"	f	file:
bad_range	page_alloc.c	/^static int __maybe_unused bad_range(struct zone *zone, struct page *page)$/;"	f	file:
balance_dirty_pages	page-writeback.c	/^static void balance_dirty_pages(struct bdi_writeback *wb,$/;"	f	file:
balance_dirty_pages_ratelimited	page-writeback.c	/^EXPORT_SYMBOL(balance_dirty_pages_ratelimited);$/;"	v
balance_dirty_pages_ratelimited	page-writeback.c	/^void balance_dirty_pages_ratelimited(struct address_space *mapping)$/;"	f
balance_pgdat	vmscan.c	/^static int balance_pgdat(pg_data_t *pgdat, int order, int classzone_idx)$/;"	f	file:
balloon_aops	balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_aops);$/;"	v
balloon_aops	balloon_compaction.c	/^const struct address_space_operations balloon_aops = {$/;"	v	typeref:struct:address_space_operations
balloon_page_alloc	balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_alloc);$/;"	v
balloon_page_alloc	balloon_compaction.c	/^struct page *balloon_page_alloc(void)$/;"	f
balloon_page_dequeue	balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_dequeue);$/;"	v
balloon_page_dequeue	balloon_compaction.c	/^struct page *balloon_page_dequeue(struct balloon_dev_info *b_dev_info)$/;"	f
balloon_page_enqueue	balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_enqueue);$/;"	v
balloon_page_enqueue	balloon_compaction.c	/^void balloon_page_enqueue(struct balloon_dev_info *b_dev_info,$/;"	f
balloon_page_enqueue_one	balloon_compaction.c	/^static void balloon_page_enqueue_one(struct balloon_dev_info *b_dev_info,$/;"	f	file:
balloon_page_isolate	balloon_compaction.c	/^bool balloon_page_isolate(struct page *page, isolate_mode_t mode)$/;"	f
balloon_page_list_dequeue	balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_list_dequeue);$/;"	v
balloon_page_list_dequeue	balloon_compaction.c	/^size_t balloon_page_list_dequeue(struct balloon_dev_info *b_dev_info,$/;"	f
balloon_page_list_enqueue	balloon_compaction.c	/^EXPORT_SYMBOL_GPL(balloon_page_list_enqueue);$/;"	v
balloon_page_list_enqueue	balloon_compaction.c	/^size_t balloon_page_list_enqueue(struct balloon_dev_info *b_dev_info,$/;"	f
balloon_page_migrate	balloon_compaction.c	/^int balloon_page_migrate(struct address_space *mapping,$/;"	f
balloon_page_putback	balloon_compaction.c	/^void balloon_page_putback(struct page *page)$/;"	f
base_addr	percpu-internal.h	/^	void			*base_addr;	\/* base address of this chunk *\/$/;"	m	struct:pcpu_chunk
base_pfn	cma.h	/^	unsigned long   base_pfn;$/;"	m	struct:cma
batchcount	slab.c	/^	unsigned int batchcount;$/;"	m	struct:array_cache	file:
batchcount	slab.h	/^	unsigned int batchcount;$/;"	m	struct:slabinfo
bdi_alloc_node	backing-dev.c	/^EXPORT_SYMBOL(bdi_alloc_node);$/;"	v
bdi_alloc_node	backing-dev.c	/^struct backing_dev_info *bdi_alloc_node(gfp_t gfp_mask, int node_id)$/;"	f
bdi_class	backing-dev.c	/^static struct class *bdi_class;$/;"	v	typeref:struct:class	file:
bdi_class_init	backing-dev.c	/^postcore_initcall(bdi_class_init);$/;"	v
bdi_class_init	backing-dev.c	/^static __init int bdi_class_init(void)$/;"	f	file:
bdi_debug_init	backing-dev.c	/^static inline void bdi_debug_init(void)$/;"	f	file:
bdi_debug_init	backing-dev.c	/^static void bdi_debug_init(void)$/;"	f	file:
bdi_debug_register	backing-dev.c	/^static inline void bdi_debug_register(struct backing_dev_info *bdi,$/;"	f	file:
bdi_debug_register	backing-dev.c	/^static void bdi_debug_register(struct backing_dev_info *bdi, const char *name)$/;"	f	file:
bdi_debug_root	backing-dev.c	/^static struct dentry *bdi_debug_root;$/;"	v	typeref:struct:dentry	file:
bdi_debug_stats	backing-dev.c	/^DEFINE_SHOW_ATTRIBUTE(bdi_debug_stats);$/;"	v
bdi_debug_stats_show	backing-dev.c	/^static int bdi_debug_stats_show(struct seq_file *m, void *v)$/;"	f	file:
bdi_debug_unregister	backing-dev.c	/^static inline void bdi_debug_unregister(struct backing_dev_info *bdi)$/;"	f	file:
bdi_debug_unregister	backing-dev.c	/^static void bdi_debug_unregister(struct backing_dev_info *bdi)$/;"	f	file:
bdi_dev	backing-dev.c	/^ATTRIBUTE_GROUPS(bdi_dev);$/;"	v
bdi_dev_attrs	backing-dev.c	/^static struct attribute *bdi_dev_attrs[] = {$/;"	v	typeref:struct:attribute	file:
bdi_dev_name	backing-dev.c	/^EXPORT_SYMBOL_GPL(bdi_dev_name);$/;"	v
bdi_dev_name	backing-dev.c	/^const char *bdi_dev_name(struct backing_dev_info *bdi)$/;"	f
bdi_get_by_id	backing-dev.c	/^struct backing_dev_info *bdi_get_by_id(u64 id)$/;"	f
bdi_id_cursor	backing-dev.c	/^static u64 bdi_id_cursor;$/;"	v	file:
bdi_init	backing-dev.c	/^static int bdi_init(struct backing_dev_info *bdi)$/;"	f	file:
bdi_list	backing-dev.c	/^LIST_HEAD(bdi_list);$/;"	v
bdi_lock	backing-dev.c	/^DEFINE_SPINLOCK(bdi_lock);$/;"	v
bdi_lookup_rb_node	backing-dev.c	/^static struct rb_node **bdi_lookup_rb_node(u64 id, struct rb_node **parentp)$/;"	f	file:
bdi_min_ratio	page-writeback.c	/^static unsigned int bdi_min_ratio;$/;"	v	file:
bdi_put	backing-dev.c	/^EXPORT_SYMBOL(bdi_put);$/;"	v
bdi_put	backing-dev.c	/^void bdi_put(struct backing_dev_info *bdi)$/;"	f
bdi_register	backing-dev.c	/^EXPORT_SYMBOL(bdi_register);$/;"	v
bdi_register	backing-dev.c	/^int bdi_register(struct backing_dev_info *bdi, const char *fmt, ...)$/;"	f
bdi_register_owner	backing-dev.c	/^EXPORT_SYMBOL(bdi_register_owner);$/;"	v
bdi_register_owner	backing-dev.c	/^int bdi_register_owner(struct backing_dev_info *bdi, struct device *owner)$/;"	f
bdi_register_va	backing-dev.c	/^EXPORT_SYMBOL(bdi_register_va);$/;"	v
bdi_register_va	backing-dev.c	/^int bdi_register_va(struct backing_dev_info *bdi, const char *fmt, va_list args)$/;"	f
bdi_remove_from_list	backing-dev.c	/^static void bdi_remove_from_list(struct backing_dev_info *bdi)$/;"	f	file:
bdi_set_max_ratio	page-writeback.c	/^EXPORT_SYMBOL(bdi_set_max_ratio);$/;"	v
bdi_set_max_ratio	page-writeback.c	/^int bdi_set_max_ratio(struct backing_dev_info *bdi, unsigned max_ratio)$/;"	f
bdi_set_min_ratio	page-writeback.c	/^int bdi_set_min_ratio(struct backing_dev_info *bdi, unsigned int min_ratio)$/;"	f
bdi_tree	backing-dev.c	/^static struct rb_root bdi_tree = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
bdi_unknown_name	backing-dev.c	/^static const char *bdi_unknown_name = "(unknown)";$/;"	v	file:
bdi_unregister	backing-dev.c	/^void bdi_unregister(struct backing_dev_info *bdi)$/;"	f
bdi_wq	backing-dev.c	/^struct workqueue_struct *bdi_wq;$/;"	v	typeref:struct:workqueue_struct
beg	kasan/kasan.h	/^	const void *beg;		\/* Address of the beginning of the global variable. *\/$/;"	m	struct:kasan_global
behavior	filemap.c	/^enum behavior {$/;"	g	file:
bg_thresh	page-writeback.c	/^	unsigned long		bg_thresh;	\/* dirty background threshold *\/$/;"	m	struct:dirty_throttle_control	file:
bit_nr	filemap.c	/^	int bit_nr;$/;"	m	struct:wait_page_key	file:
bit_nr	filemap.c	/^	int bit_nr;$/;"	m	struct:wait_page_queue	file:
bitmap	cma.h	/^	unsigned long   *bitmap;$/;"	m	struct:cma
block_dump	page-writeback.c	/^int block_dump;$/;"	v
block_end_pfn	compaction.c	49;"	d	file:
block_start_pfn	compaction.c	48;"	d	file:
blocks	shmem.c	/^	unsigned long long blocks;$/;"	m	struct:shmem_options	file:
boost_watermark	page_alloc.c	/^static inline void boost_watermark(struct zone *zone)$/;"	f	file:
bootstrap	slub.c	/^static struct kmem_cache * __init bootstrap(struct kmem_cache *static_cache)$/;"	f	file:
bound_map	percpu-internal.h	/^	unsigned long		*bound_map;	\/* boundary map *\/$/;"	m	struct:pcpu_chunk
boundary	dmapool.c	/^	size_t boundary;$/;"	m	struct:dma_pool	file:
break_cow	ksm.c	/^static void break_cow(struct rmap_item *rmap_item)$/;"	f	file:
break_ksm	ksm.c	/^static int break_ksm(struct vm_area_struct *vma, unsigned long addr)$/;"	f	file:
browse_rb	mmap.c	/^static int browse_rb(struct mm_struct *mm)$/;"	f	file:
buddied	zbud.c	/^	struct list_head buddied;$/;"	m	struct:zbud_pool	typeref:struct:zbud_pool::list_head	file:
buddy	z3fold.c	/^	struct list_head buddy;$/;"	m	struct:z3fold_header	typeref:struct:z3fold_header::list_head	file:
buddy	z3fold.c	/^enum buddy {$/;"	g	file:
buddy	zbud.c	/^	struct list_head buddy;$/;"	m	struct:zbud_header	typeref:struct:zbud_header::list_head	file:
buddy	zbud.c	/^enum buddy {$/;"	g	file:
buffer_migrate_lock_buffers	migrate.c	/^static bool buffer_migrate_lock_buffers(struct buffer_head *head,$/;"	f	file:
buffer_migrate_page	migrate.c	/^EXPORT_SYMBOL(buffer_migrate_page);$/;"	v
buffer_migrate_page	migrate.c	/^int buffer_migrate_page(struct address_space *mapping,$/;"	f
buffer_migrate_page_norefs	migrate.c	/^int buffer_migrate_page_norefs(struct address_space *mapping,$/;"	f
build_all_zonelists	page_alloc.c	/^void __ref build_all_zonelists(pg_data_t *pgdat)$/;"	f
build_all_zonelists_init	page_alloc.c	/^build_all_zonelists_init(void)$/;"	f	file:
build_detached_freelist	slub.c	/^int build_detached_freelist(struct kmem_cache *s, size_t size,$/;"	f	file:
build_thisnode_zonelists	page_alloc.c	/^static void build_thisnode_zonelists(pg_data_t *pgdat)$/;"	f	file:
build_zonelists	page_alloc.c	/^static void build_zonelists(pg_data_t *pgdat)$/;"	f	file:
build_zonelists_in_node_order	page_alloc.c	/^static void build_zonelists_in_node_order(pg_data_t *pgdat, int *node_order,$/;"	f	file:
build_zonerefs_node	page_alloc.c	/^static int build_zonerefs_node(pg_data_t *pgdat, struct zoneref *zonerefs)$/;"	f	file:
bulkfree_pcp_prepare	page_alloc.c	/^static bool bulkfree_pcp_prepare(struct page *page)$/;"	f	file:
bytes	kasan/quarantine.c	/^	size_t bytes;$/;"	m	struct:qlist_head	file:
bytes_is_nonzero	kasan/generic.c	/^static __always_inline unsigned long bytes_is_nonzero(const u8 *start,$/;"	f	file:
c_handle	z3fold.c	/^	struct kmem_cache *c_handle;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::kmem_cache	file:
cache_alloc_debugcheck_after	slab.c	/^static void *cache_alloc_debugcheck_after(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_debugcheck_after	slab.c	3034;"	d	file:
cache_alloc_debugcheck_after_bulk	slab.c	/^cache_alloc_debugcheck_after_bulk(struct kmem_cache *s, gfp_t flags,$/;"	f	file:
cache_alloc_debugcheck_before	slab.c	/^static inline void cache_alloc_debugcheck_before(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_handle	zsmalloc.c	/^static unsigned long cache_alloc_handle(struct zs_pool *pool, gfp_t gfp)$/;"	f	file:
cache_alloc_pfmemalloc	slab.c	/^static noinline void *cache_alloc_pfmemalloc(struct kmem_cache *cachep,$/;"	f	file:
cache_alloc_refill	slab.c	/^static void *cache_alloc_refill(struct kmem_cache *cachep, gfp_t flags)$/;"	f	file:
cache_alloc_zspage	zsmalloc.c	/^static struct zspage *cache_alloc_zspage(struct zs_pool *pool, gfp_t flags)$/;"	f	file:
cache_dma	slub.c	/^SLAB_ATTR_RO(cache_dma);$/;"	v
cache_dma_show	slub.c	/^static ssize_t cache_dma_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cache_estimate	slab.c	/^static unsigned int cache_estimate(unsigned long gfporder, size_t buffer_size,$/;"	f	file:
cache_filter	failslab.c	/^	bool cache_filter;$/;"	m	struct:__anon6	file:
cache_flusharray	slab.c	/^static void cache_flusharray(struct kmem_cache *cachep, struct array_cache *ac)$/;"	f	file:
cache_free_alien	slab.c	/^static inline int cache_free_alien(struct kmem_cache *cachep, void *objp)$/;"	f	file:
cache_free_debugcheck	slab.c	/^static void *cache_free_debugcheck(struct kmem_cache *cachep, void *objp,$/;"	f	file:
cache_free_debugcheck	slab.c	2747;"	d	file:
cache_free_handle	zsmalloc.c	/^static void cache_free_handle(struct zs_pool *pool, unsigned long handle)$/;"	f	file:
cache_free_pfmemalloc	slab.c	/^static noinline void cache_free_pfmemalloc(struct kmem_cache *cachep,$/;"	f	file:
cache_free_zspage	zsmalloc.c	/^static void cache_free_zspage(struct zs_pool *pool, struct zspage *zspage)$/;"	f	file:
cache_from_obj	slab.h	/^static inline struct kmem_cache *cache_from_obj(struct kmem_cache *s, void *x)$/;"	f
cache_grow_begin	slab.c	/^static struct page *cache_grow_begin(struct kmem_cache *cachep,$/;"	f	file:
cache_grow_end	slab.c	/^static void cache_grow_end(struct kmem_cache *cachep, struct page *page)$/;"	f	file:
cache_init_objs	slab.c	/^static void cache_init_objs(struct kmem_cache *cachep,$/;"	f	file:
cache_init_objs_debug	slab.c	/^static void cache_init_objs_debug(struct kmem_cache *cachep, struct page *page)$/;"	f	file:
cache_kset	slub.c	/^static inline struct kset *cache_kset(struct kmem_cache *s)$/;"	f	file:
cache_name	slab.h	/^static inline const char *cache_name(struct kmem_cache *s)$/;"	f
cache_order	slab.h	/^	unsigned int cache_order;$/;"	m	struct:slabinfo
cache_random_seq_create	slab.h	/^static inline int cache_random_seq_create(struct kmem_cache *cachep,$/;"	f
cache_random_seq_create	slab_common.c	/^int cache_random_seq_create(struct kmem_cache *cachep, unsigned int count,$/;"	f
cache_random_seq_destroy	slab.h	/^static inline void cache_random_seq_destroy(struct kmem_cache *cachep) { }$/;"	f
cache_random_seq_destroy	slab_common.c	/^void cache_random_seq_destroy(struct kmem_cache *cachep)$/;"	f
cache_reap	slab.c	/^static void cache_reap(struct work_struct *w)$/;"	f	file:
cache_show	slab_common.c	/^static void cache_show(struct kmem_cache *s, struct seq_file *m)$/;"	f	file:
cache_vmstat_idx	slab.h	/^static inline int cache_vmstat_idx(struct kmem_cache *s)$/;"	f
cached	memcontrol.c	/^	struct mem_cgroup *cached; \/* this never be root cgroup *\/$/;"	m	struct:memcg_stock_pcp	typeref:struct:memcg_stock_pcp::mem_cgroup	file:
cachep	memcontrol.c	/^	struct kmem_cache *cachep;$/;"	m	struct:memcg_kmem_cache_create_work	typeref:struct:memcg_kmem_cache_create_work::kmem_cache	file:
calc_checksum	ksm.c	/^static u32 calc_checksum(struct page *page)$/;"	f	file:
calc_memmap_size	page_alloc.c	/^static unsigned long __init calc_memmap_size(unsigned long spanned_pages,$/;"	f	file:
calculate_alignment	slab_common.c	/^static unsigned int calculate_alignment(slab_flags_t flags,$/;"	f	file:
calculate_high_delay	memcontrol.c	/^static unsigned long calculate_high_delay(struct mem_cgroup *memcg,$/;"	f	file:
calculate_node_totalpages	page_alloc.c	/^static void __init calculate_node_totalpages(struct pglist_data *pgdat,$/;"	f	file:
calculate_normal_threshold	vmstat.c	/^int calculate_normal_threshold(struct zone *zone)$/;"	f
calculate_order	slub.c	/^static inline int calculate_order(unsigned int size)$/;"	f	file:
calculate_pressure_threshold	vmstat.c	/^int calculate_pressure_threshold(struct zone *zone)$/;"	f
calculate_sizes	slub.c	/^static int calculate_sizes(struct kmem_cache *s, int forced_order)$/;"	f	file:
calculate_slab_order	slab.c	/^static size_t calculate_slab_order(struct kmem_cache *cachep,$/;"	f	file:
calculate_totalreserve_pages	page_alloc.c	/^static void calculate_totalreserve_pages(void)$/;"	f	file:
can_do_mincore	mincore.c	/^static inline bool can_do_mincore(struct vm_area_struct *vma)$/;"	f	file:
can_do_mlock	mlock.c	/^EXPORT_SYMBOL(can_do_mlock);$/;"	v
can_do_mlock	mlock.c	/^bool can_do_mlock(void)$/;"	f
can_do_pageout	madvise.c	/^static inline bool can_do_pageout(struct vm_area_struct *vma)$/;"	f	file:
can_follow_write_pmd	huge_memory.c	/^static inline bool can_follow_write_pmd(pmd_t pmd, unsigned int flags)$/;"	f	file:
can_follow_write_pte	gup.c	/^static inline bool can_follow_write_pte(pte_t pte, unsigned int flags)$/;"	f	file:
can_madv_lru_vma	internal.h	/^static inline bool can_madv_lru_vma(struct vm_area_struct *vma)$/;"	f
can_merge	zsmalloc.c	/^static bool can_merge(struct size_class *prev, int pages_per_zspage,$/;"	f	file:
can_split_huge_page	huge_memory.c	/^bool can_split_huge_page(struct page *page, int *pextra_pins)$/;"	f
can_steal_fallback	page_alloc.c	/^static bool can_steal_fallback(unsigned int order, int start_mt)$/;"	f	file:
can_vma_merge_after	mmap.c	/^can_vma_merge_after(struct vm_area_struct *vma, unsigned long vm_flags,$/;"	f	file:
can_vma_merge_before	mmap.c	/^can_vma_merge_before(struct vm_area_struct *vma, unsigned long vm_flags,$/;"	f	file:
cancel_charge	memcontrol.c	/^static void cancel_charge(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f	file:
capture_control	internal.h	/^struct capture_control {$/;"	s
cc	internal.h	/^	struct compact_control *cc;$/;"	m	struct:capture_control	typeref:struct:capture_control::compact_control
cgroup_memory	memcontrol.c	/^static int __init cgroup_memory(char *s)$/;"	f	file:
cgroup_memory_nokmem	memcontrol.c	/^static bool cgroup_memory_nokmem;$/;"	v	file:
cgroup_memory_nosocket	memcontrol.c	/^static bool cgroup_memory_nosocket;$/;"	v	file:
cgwb_bdi_exit	backing-dev.c	/^static void cgwb_bdi_exit(struct backing_dev_info *bdi)$/;"	f	file:
cgwb_bdi_init	backing-dev.c	/^static int cgwb_bdi_init(struct backing_dev_info *bdi)$/;"	f	file:
cgwb_bdi_register	backing-dev.c	/^static void cgwb_bdi_register(struct backing_dev_info *bdi)$/;"	f	file:
cgwb_bdi_unregister	backing-dev.c	/^static void cgwb_bdi_unregister(struct backing_dev_info *bdi) { }$/;"	f	file:
cgwb_bdi_unregister	backing-dev.c	/^static void cgwb_bdi_unregister(struct backing_dev_info *bdi)$/;"	f	file:
cgwb_create	backing-dev.c	/^static int cgwb_create(struct backing_dev_info *bdi,$/;"	f	file:
cgwb_init	backing-dev.c	/^static int __init cgwb_init(void)$/;"	f	file:
cgwb_init	backing-dev.c	/^subsys_initcall(cgwb_init);$/;"	v
cgwb_kill	backing-dev.c	/^static void cgwb_kill(struct bdi_writeback *wb)$/;"	f	file:
cgwb_release	backing-dev.c	/^static void cgwb_release(struct percpu_ref *refcnt)$/;"	f	file:
cgwb_release_workfn	backing-dev.c	/^static void cgwb_release_workfn(struct work_struct *work)$/;"	f	file:
cgwb_release_wq	backing-dev.c	/^static struct workqueue_struct *cgwb_release_wq;$/;"	v	typeref:struct:workqueue_struct	file:
cgwb_remove_from_bdi_list	backing-dev.c	/^static void cgwb_remove_from_bdi_list(struct bdi_writeback *wb)$/;"	f	file:
chain	ksm.c	/^static __always_inline struct page *chain(struct stable_node **s_n_d,$/;"	f	file:
chain_prune	ksm.c	/^static __always_inline struct page *chain_prune(struct stable_node **s_n_d,$/;"	f	file:
chain_prune_time	ksm.c	/^		unsigned long chain_prune_time;$/;"	m	union:stable_node::__anon17	file:
change_huge_pmd	huge_memory.c	/^int change_huge_pmd(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f
change_p4d_range	mprotect.c	/^static inline unsigned long change_p4d_range(struct vm_area_struct *vma,$/;"	f	file:
change_pageblock_range	page_alloc.c	/^static void change_pageblock_range(struct page *pageblock_page,$/;"	f	file:
change_pmd_range	mprotect.c	/^static inline unsigned long change_pmd_range(struct vm_area_struct *vma,$/;"	f	file:
change_prot_numa	mempolicy.c	/^static unsigned long change_prot_numa(struct vm_area_struct *vma,$/;"	f	file:
change_prot_numa	mempolicy.c	/^unsigned long change_prot_numa(struct vm_area_struct *vma,$/;"	f
change_protection	mprotect.c	/^unsigned long change_protection(struct vm_area_struct *vma, unsigned long start,$/;"	f
change_protection_range	mprotect.c	/^static unsigned long change_protection_range(struct vm_area_struct *vma,$/;"	f	file:
change_pte_range	mprotect.c	/^static unsigned long change_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
change_pud_range	mprotect.c	/^static inline unsigned long change_pud_range(struct vm_area_struct *vma,$/;"	f	file:
charge_slab_page	slab.h	/^static __always_inline int charge_slab_page(struct page *page,$/;"	f
charge_type	memcontrol.c	/^enum charge_type {$/;"	g	file:
charge_walk_ops	memcontrol.c	/^static const struct mm_walk_ops charge_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
check_and_migrate_cma_pages	gup.c	/^static long check_and_migrate_cma_pages(struct task_struct *tsk,$/;"	f	file:
check_bogus_address	usercopy.c	/^static inline void check_bogus_address(const unsigned long ptr, unsigned long n,$/;"	f	file:
check_bytes_and_report	slub.c	/^static int check_bytes_and_report(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_cache_active	swap_slots.c	/^static bool check_cache_active(void)$/;"	f	file:
check_cpu_on_node	memory_hotplug.c	/^static int check_cpu_on_node(pg_data_t *pgdat)$/;"	f	file:
check_dax_vmas	gup.c	/^static bool check_dax_vmas(struct vm_area_struct **vmas, long nr_pages)$/;"	f	file:
check_early_ioremap_leak	early_ioremap.c	/^late_initcall(check_early_ioremap_leak);$/;"	v
check_early_ioremap_leak	early_ioremap.c	/^static int __init check_early_ioremap_leak(void)$/;"	f	file:
check_element	mempool.c	/^static inline void check_element(mempool_t *pool, void *element)$/;"	f	file:
check_element	mempool.c	/^static void check_element(mempool_t *pool, void *element)$/;"	f	file:
check_for_memory	page_alloc.c	/^static void check_for_memory(pg_data_t *pgdat, int nid)$/;"	f	file:
check_heap_object	usercopy.c	/^static inline void check_heap_object(const void *ptr, unsigned long n,$/;"	f	file:
check_hotplug_memory_range	memory_hotplug.c	/^static int check_hotplug_memory_range(u64 start, u64 size)$/;"	f	file:
check_irq_off	slab.c	/^static void check_irq_off(void)$/;"	f	file:
check_irq_off	slab.c	2112;"	d	file:
check_irq_on	slab.c	/^static void check_irq_on(void)$/;"	f	file:
check_irq_on	slab.c	2113;"	d	file:
check_kernel_text_object	usercopy.c	/^static inline void check_kernel_text_object(const unsigned long ptr,$/;"	f	file:
check_memblock_offlined_cb	memory_hotplug.c	/^static int check_memblock_offlined_cb(struct memory_block *mem, void *arg)$/;"	f	file:
check_memory_region	kasan/generic.c	/^bool check_memory_region(unsigned long addr, size_t size, bool write,$/;"	f
check_memory_region	kasan/tags.c	/^bool check_memory_region(unsigned long addr, size_t size, bool write,$/;"	f
check_memory_region_inline	kasan/generic.c	/^static __always_inline bool check_memory_region_inline(unsigned long addr,$/;"	f	file:
check_move_unevictable_pages	vmscan.c	/^EXPORT_SYMBOL_GPL(check_move_unevictable_pages);$/;"	v
check_move_unevictable_pages	vmscan.c	/^void check_move_unevictable_pages(struct pagevec *pvec)$/;"	f
check_mutex_acquired	slab.c	/^static void check_mutex_acquired(void)$/;"	f	file:
check_mutex_acquired	slab.c	2114;"	d	file:
check_new_page	page_alloc.c	/^static inline int check_new_page(struct page *page)$/;"	f	file:
check_new_page_bad	page_alloc.c	/^static void check_new_page_bad(struct page *page)$/;"	f	file:
check_new_pages	page_alloc.c	/^static bool check_new_pages(struct page *page, unsigned int order)$/;"	f	file:
check_new_pcp	page_alloc.c	/^static inline bool check_new_pcp(struct page *page)$/;"	f	file:
check_no_memblock_for_node_cb	memory_hotplug.c	/^static int check_no_memblock_for_node_cb(struct memory_block *mem, void *arg)$/;"	f	file:
check_numabalancing_enable	mempolicy.c	/^static inline void __init check_numabalancing_enable(void)$/;"	f	file:
check_numabalancing_enable	mempolicy.c	/^static void __init check_numabalancing_enable(void)$/;"	f	file:
check_object	slub.c	/^static inline int check_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_object	slub.c	/^static int check_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
check_pad_bytes	slub.c	/^static int check_pad_bytes(struct kmem_cache *s, struct page *page, u8 *p)$/;"	f	file:
check_page_span	usercopy.c	/^static inline void check_page_span(const void *ptr, unsigned long n,$/;"	f	file:
check_pages_isolated_cb	memory_hotplug.c	/^check_pages_isolated_cb(unsigned long start_pfn, unsigned long nr_pages,$/;"	f	file:
check_panic_on_oom	oom_kill.c	/^static void check_panic_on_oom(struct oom_control *oc)$/;"	f	file:
check_pcp_refill	page_alloc.c	/^static inline bool check_pcp_refill(struct page *page)$/;"	f	file:
check_pfn_span	memory_hotplug.c	/^static int check_pfn_span(unsigned long pfn, unsigned long nr_pages,$/;"	f	file:
check_poison_mem	page_poison.c	/^static void check_poison_mem(unsigned char *mem, size_t bytes)$/;"	f	file:
check_poison_obj	slab.c	/^static void check_poison_obj(struct kmem_cache *cachep, void *objp)$/;"	f	file:
check_pte	page_vma_mapped.c	/^static bool check_pte(struct page_vma_mapped_walk *pvmw)$/;"	f	file:
check_recursive_alloc	page_owner.c	/^static inline bool check_recursive_alloc(unsigned long *entries,$/;"	f	file:
check_retry_cpuset	page_alloc.c	/^check_retry_cpuset(int cpuset_mems_cookie, struct alloc_context *ac)$/;"	f	file:
check_slab	slub.c	/^static int check_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
check_spinlock_acquired	slab.c	/^static void check_spinlock_acquired(struct kmem_cache *cachep)$/;"	f	file:
check_spinlock_acquired	slab.c	2115;"	d	file:
check_spinlock_acquired_node	slab.c	/^static void check_spinlock_acquired_node(struct kmem_cache *cachep, int node)$/;"	f	file:
check_spinlock_acquired_node	slab.c	2116;"	d	file:
check_stack_object	usercopy.c	/^static noinline int check_stack_object(const void *obj, unsigned long len)$/;"	f	file:
check_sync_rss_stat	memory.c	/^static void check_sync_rss_stat(struct task_struct *task)$/;"	f	file:
check_usemap_section_nr	sparse.c	/^static void __init check_usemap_section_nr(int nid,$/;"	f	file:
check_valid_pointer	slub.c	/^static inline int check_valid_pointer(struct kmem_cache *s,$/;"	f	file:
check_vma_flags	gup.c	/^static int check_vma_flags(struct vm_area_struct *vma, unsigned long gup_flags)$/;"	f	file:
checksum	kmemleak.c	/^	u32 checksum;$/;"	m	struct:kmemleak_object	file:
children	slab.h	/^			struct list_head children;$/;"	m	struct:memcg_cache_params::__anon8::__anon9	typeref:struct:memcg_cache_params::__anon8::__anon9::list_head
children_node	slab.h	/^			struct list_head children_node;$/;"	m	struct:memcg_cache_params::__anon8::__anon10	typeref:struct:memcg_cache_params::__anon8::__anon10::list_head
choose_memblock_flags	memblock.c	/^static enum memblock_flags __init_memblock choose_memblock_flags(void)$/;"	f	file:
chunk_map_stats	percpu-stats.c	/^static void chunk_map_stats(struct seq_file *m, struct pcpu_chunk *chunk,$/;"	f	file:
chunk_md	percpu-internal.h	/^	struct pcpu_block_md	chunk_md;$/;"	m	struct:pcpu_chunk	typeref:struct:pcpu_chunk::pcpu_block_md
claim_swapfile	swapfile.c	/^static int claim_swapfile(struct swap_info_struct *p, struct inode *inode)$/;"	f	file:
class	zsmalloc.c	/^		unsigned int class:CLASS_BITS + 1;$/;"	m	struct:zspage::__anon22	file:
classify_va_fit_type	vmalloc.c	/^classify_va_fit_type(struct vmap_area *va,$/;"	f	file:
classzone_idx	internal.h	/^	const int classzone_idx;	\/* zone index of a direct compactor *\/$/;"	m	struct:compact_control
cleancache_failed_gets	cleancache.c	/^static u64 cleancache_failed_gets;$/;"	v	file:
cleancache_get_key	cleancache.c	/^static int cleancache_get_key(struct inode *inode,$/;"	f	file:
cleancache_invalidates	cleancache.c	/^static u64 cleancache_invalidates;$/;"	v	file:
cleancache_puts	cleancache.c	/^static u64 cleancache_puts;$/;"	v	file:
cleancache_register_ops	cleancache.c	/^EXPORT_SYMBOL(cleancache_register_ops);$/;"	v
cleancache_register_ops	cleancache.c	/^int cleancache_register_ops(const struct cleancache_ops *ops)$/;"	f
cleancache_register_ops_sb	cleancache.c	/^static void cleancache_register_ops_sb(struct super_block *sb, void *unused)$/;"	f	file:
cleancache_succ_gets	cleancache.c	/^static u64 cleancache_succ_gets;$/;"	v	file:
clear_bit_unlock_is_negative_byte	filemap.c	/^static inline bool clear_bit_unlock_is_negative_byte(long nr, volatile void *mem)$/;"	f	file:
clear_gigantic_page	memory.c	/^static void clear_gigantic_page(struct page *page,$/;"	f	file:
clear_huge_page	memory.c	/^void clear_huge_page(struct page *page,$/;"	f
clear_hwpoisoned_pages	sparse.c	/^static inline void clear_hwpoisoned_pages(struct page *memmap, int nr_pages)$/;"	f	file:
clear_hwpoisoned_pages	sparse.c	/^static void clear_hwpoisoned_pages(struct page *memmap, int nr_pages)$/;"	f	file:
clear_page_dirty_for_io	page-writeback.c	/^EXPORT_SYMBOL(clear_page_dirty_for_io);$/;"	v
clear_page_dirty_for_io	page-writeback.c	/^int clear_page_dirty_for_io(struct page *page)$/;"	f
clear_page_guard	page_alloc.c	/^static inline void clear_page_guard(struct zone *zone, struct page *page,$/;"	f	file:
clear_page_huge_active	hugetlb.c	/^static void clear_page_huge_active(struct page *page)$/;"	f	file:
clear_page_mlock	internal.h	/^static inline void clear_page_mlock(struct page *page) { }$/;"	f
clear_page_mlock	mlock.c	/^void clear_page_mlock(struct page *page)$/;"	f
clear_pgdat_congested	vmscan.c	/^static void clear_pgdat_congested(pg_data_t *pgdat)$/;"	f	file:
clear_shadow_entry	truncate.c	/^static void clear_shadow_entry(struct address_space *mapping, pgoff_t index,$/;"	f	file:
clear_slob_page_free	slob.c	/^static inline void clear_slob_page_free(struct page *sp)$/;"	f	file:
clear_stat	slub.c	/^static void clear_stat(struct kmem_cache *s, enum stat_item si)$/;"	f	file:
clear_subpage	memory.c	/^static void clear_subpage(unsigned long addr, int idx, void *arg)$/;"	f	file:
clear_vm_uninitialized_flag	vmalloc.c	/^static void clear_vm_uninitialized_flag(struct vm_struct *vm)$/;"	f	file:
clear_wb_congested	backing-dev.c	/^EXPORT_SYMBOL(clear_wb_congested);$/;"	v
clear_wb_congested	backing-dev.c	/^void clear_wb_congested(struct bdi_writeback_congested *congested, int sync)$/;"	f
clear_zone_contiguous	page_alloc.c	/^void clear_zone_contiguous(struct zone *zone)$/;"	f
cluster_clear_huge	swapfile.c	/^static inline void cluster_clear_huge(struct swap_cluster_info *info)$/;"	f	file:
cluster_count	swapfile.c	/^static inline unsigned int cluster_count(struct swap_cluster_info *info)$/;"	f	file:
cluster_is_free	swapfile.c	/^static inline bool cluster_is_free(struct swap_cluster_info *info)$/;"	f	file:
cluster_is_huge	swapfile.c	/^static inline bool cluster_is_huge(struct swap_cluster_info *info)$/;"	f	file:
cluster_is_null	swapfile.c	/^static inline bool cluster_is_null(struct swap_cluster_info *info)$/;"	f	file:
cluster_list_add_tail	swapfile.c	/^static void cluster_list_add_tail(struct swap_cluster_list *list,$/;"	f	file:
cluster_list_del_first	swapfile.c	/^static unsigned int cluster_list_del_first(struct swap_cluster_list *list,$/;"	f	file:
cluster_list_empty	swapfile.c	/^static inline bool cluster_list_empty(struct swap_cluster_list *list)$/;"	f	file:
cluster_list_first	swapfile.c	/^static inline unsigned int cluster_list_first(struct swap_cluster_list *list)$/;"	f	file:
cluster_list_init	swapfile.c	/^static void cluster_list_init(struct swap_cluster_list *list)$/;"	f	file:
cluster_next	swapfile.c	/^static inline unsigned int cluster_next(struct swap_cluster_info *info)$/;"	f	file:
cluster_set_count	swapfile.c	/^static inline void cluster_set_count(struct swap_cluster_info *info,$/;"	f	file:
cluster_set_count_flag	swapfile.c	/^static inline void cluster_set_count_flag(struct swap_cluster_info *info,$/;"	f	file:
cluster_set_flag	swapfile.c	/^static inline void cluster_set_flag(struct swap_cluster_info *info,$/;"	f	file:
cluster_set_next	swapfile.c	/^static inline void cluster_set_next(struct swap_cluster_info *info,$/;"	f	file:
cluster_set_next_flag	swapfile.c	/^static inline void cluster_set_next_flag(struct swap_cluster_info *info,$/;"	f	file:
cluster_set_null	swapfile.c	/^static inline void cluster_set_null(struct swap_cluster_info *info)$/;"	f	file:
cma	cma.h	/^struct cma {$/;"	s
cma_activate_area	cma.c	/^static int __init cma_activate_area(struct cma *cma)$/;"	f	file:
cma_add_to_cma_mem_list	cma_debug.c	/^static void cma_add_to_cma_mem_list(struct cma *cma, struct cma_mem *mem)$/;"	f	file:
cma_alloc	cma.c	/^struct page *cma_alloc(struct cma *cma, size_t count, unsigned int align,$/;"	f
cma_alloc_mem	cma_debug.c	/^static int cma_alloc_mem(struct cma *cma, int count)$/;"	f	file:
cma_alloc_write	cma_debug.c	/^static int cma_alloc_write(void *data, u64 val)$/;"	f	file:
cma_area_count	cma.c	/^unsigned cma_area_count;$/;"	v
cma_areas	cma.c	/^struct cma cma_areas[MAX_CMA_AREAS];$/;"	v	typeref:struct:cma
cma_bitmap_aligned_mask	cma.c	/^static unsigned long cma_bitmap_aligned_mask(const struct cma *cma,$/;"	f	file:
cma_bitmap_aligned_offset	cma.c	/^static unsigned long cma_bitmap_aligned_offset(const struct cma *cma,$/;"	f	file:
cma_bitmap_maxno	cma.h	/^static inline unsigned long cma_bitmap_maxno(struct cma *cma)$/;"	f
cma_bitmap_pages_to_bits	cma.c	/^static unsigned long cma_bitmap_pages_to_bits(const struct cma *cma,$/;"	f	file:
cma_clear_bitmap	cma.c	/^static void cma_clear_bitmap(struct cma *cma, unsigned long pfn,$/;"	f	file:
cma_debug_show_areas	cma.c	/^static inline void cma_debug_show_areas(struct cma *cma) { }$/;"	f	file:
cma_debug_show_areas	cma.c	/^static void cma_debug_show_areas(struct cma *cma)$/;"	f	file:
cma_debugfs_add_one	cma_debug.c	/^static void cma_debugfs_add_one(struct cma *cma, struct dentry *root_dentry)$/;"	f	file:
cma_debugfs_get	cma_debug.c	/^static int cma_debugfs_get(void *data, u64 *val)$/;"	f	file:
cma_debugfs_init	cma_debug.c	/^late_initcall(cma_debugfs_init);$/;"	v
cma_debugfs_init	cma_debug.c	/^static int __init cma_debugfs_init(void)$/;"	f	file:
cma_declare_contiguous	cma.c	/^int __init cma_declare_contiguous(phys_addr_t base,$/;"	f
cma_for_each_area	cma.c	/^int cma_for_each_area(int (*it)(struct cma *cma, void *data), void *data)$/;"	f
cma_free_mem	cma_debug.c	/^static int cma_free_mem(struct cma *cma, int count)$/;"	f	file:
cma_free_write	cma_debug.c	/^static int cma_free_write(void *data, u64 val)$/;"	f	file:
cma_get_base	cma.c	/^phys_addr_t cma_get_base(const struct cma *cma)$/;"	f
cma_get_entry_from_list	cma_debug.c	/^static struct cma_mem *cma_get_entry_from_list(struct cma *cma)$/;"	f	file:
cma_get_name	cma.c	/^const char *cma_get_name(const struct cma *cma)$/;"	f
cma_get_size	cma.c	/^unsigned long cma_get_size(const struct cma *cma)$/;"	f
cma_init_reserved_areas	cma.c	/^core_initcall(cma_init_reserved_areas);$/;"	v
cma_init_reserved_areas	cma.c	/^static int __init cma_init_reserved_areas(void)$/;"	f	file:
cma_init_reserved_mem	cma.c	/^int __init cma_init_reserved_mem(phys_addr_t base, phys_addr_t size,$/;"	f
cma_maxchunk_get	cma_debug.c	/^static int cma_maxchunk_get(void *data, u64 *val)$/;"	f	file:
cma_mem	cma_debug.c	/^struct cma_mem {$/;"	s	file:
cma_release	cma.c	/^bool cma_release(struct cma *cma, const struct page *pages, unsigned int count)$/;"	f
cma_used_get	cma_debug.c	/^static int cma_used_get(void *data, u64 *val)$/;"	f	file:
cmdline_parse_core	page_alloc.c	/^static int __init cmdline_parse_core(char *p, unsigned long *core,$/;"	f	file:
cmdline_parse_kernelcore	page_alloc.c	/^static int __init cmdline_parse_kernelcore(char *p)$/;"	f	file:
cmdline_parse_movable_node	memory_hotplug.c	/^static int __init cmdline_parse_movable_node(char *p)$/;"	f	file:
cmdline_parse_movablecore	page_alloc.c	/^static int __init cmdline_parse_movablecore(char *p)$/;"	f	file:
cmdline_parse_stack_guard_gap	mmap.c	/^static int __init cmdline_parse_stack_guard_gap(char *p)$/;"	f	file:
cmp_and_merge_page	ksm.c	/^static void cmp_and_merge_page(struct page *page, struct rmap_item *rmap_item)$/;"	f	file:
cmpint	percpu-stats.c	/^static int cmpint(const void *a, const void *b)$/;"	f	file:
cmpxchg_double_slab	slub.c	/^static inline bool cmpxchg_double_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
cnt	slub.c	/^	int cnt;$/;"	m	struct:detached_freelist	file:
cold_walk_ops	madvise.c	/^static const struct mm_walk_ops cold_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
collapse_file	khugepaged.c	/^static void collapse_file(struct mm_struct *mm,$/;"	f	file:
collapse_huge_page	khugepaged.c	/^static void collapse_huge_page(struct mm_struct *mm,$/;"	f	file:
collapse_pte_mapped_thp	khugepaged.c	/^void collapse_pte_mapped_thp(struct mm_struct *mm, unsigned long addr)$/;"	f
collect_mm_slot	khugepaged.c	/^static void collect_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
collect_procs	memory-failure.c	/^static void collect_procs(struct page *page, struct list_head *tokill,$/;"	f	file:
collect_procs_anon	memory-failure.c	/^static void collect_procs_anon(struct page *page, struct list_head *to_kill,$/;"	f	file:
collect_procs_file	memory-failure.c	/^static void collect_procs_file(struct page *page, struct list_head *to_kill,$/;"	f	file:
color_gray	kmemleak.c	/^static bool color_gray(const struct kmemleak_object *object)$/;"	f	file:
color_white	kmemleak.c	/^static bool color_white(const struct kmemleak_object *object)$/;"	f	file:
colour_next	slab.h	/^	unsigned int colour_next;	\/* Per-node cache coloring *\/$/;"	m	struct:kmem_cache_node
column_no	kasan/kasan.h	/^	int column_no;$/;"	m	struct:kasan_source_location
comm	kmemleak.c	/^	char comm[TASK_COMM_LEN];	\/* executable name *\/$/;"	m	struct:kmemleak_object	file:
commit_charge	memcontrol.c	/^static void commit_charge(struct page *page, struct mem_cgroup *memcg,$/;"	f	file:
compact_control	internal.h	/^struct compact_control {$/;"	s
compact_finished	compaction.c	/^static enum compact_result compact_finished(struct compact_control *cc)$/;"	f	file:
compact_lock_irqsave	compaction.c	/^static bool compact_lock_irqsave(spinlock_t *lock, unsigned long *flags,$/;"	f	file:
compact_node	compaction.c	/^static void compact_node(int nid)$/;"	f	file:
compact_nodes	compaction.c	/^static void compact_nodes(void)$/;"	f	file:
compact_page_work	z3fold.c	/^static void compact_page_work(struct work_struct *w)$/;"	f	file:
compact_scanners_met	compaction.c	/^static inline bool compact_scanners_met(struct compact_control *cc)$/;"	f	file:
compact_unlock_should_abort	compaction.c	/^static bool compact_unlock_should_abort(spinlock_t *lock,$/;"	f	file:
compact_wq	z3fold.c	/^	struct workqueue_struct *compact_wq;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::workqueue_struct	file:
compact_zone	compaction.c	/^compact_zone(struct compact_control *cc, struct capture_control *capc)$/;"	f	file:
compact_zone_order	compaction.c	/^static enum compact_result compact_zone_order(struct zone *zone, int order,$/;"	f	file:
compaction_alloc	compaction.c	/^static struct page *compaction_alloc(struct page *migratepage,$/;"	f	file:
compaction_capture	page_alloc.c	/^compaction_capture(struct capture_control *capc, struct page *page,$/;"	f	file:
compaction_defer_reset	compaction.c	/^void compaction_defer_reset(struct zone *zone, int order,$/;"	f
compaction_deferred	compaction.c	/^bool compaction_deferred(struct zone *zone, int order)$/;"	f
compaction_free	compaction.c	/^static void compaction_free(struct page *page, unsigned long data)$/;"	f	file:
compaction_ready	vmscan.c	/^	unsigned int compaction_ready:1;$/;"	m	struct:scan_control	file:
compaction_ready	vmscan.c	/^static inline bool compaction_ready(struct zone *zone, struct scan_control *sc)$/;"	f	file:
compaction_register_node	compaction.c	/^int compaction_register_node(struct node *node)$/;"	f
compaction_restarting	compaction.c	/^bool compaction_restarting(struct zone *zone, int order)$/;"	f
compaction_suitable	compaction.c	/^enum compact_result compaction_suitable(struct zone *zone, int order,$/;"	f
compaction_unregister_node	compaction.c	/^void compaction_unregister_node(struct node *node)$/;"	f
compaction_zonelist_suitable	compaction.c	/^bool compaction_zonelist_suitable(struct alloc_context *ac, int order,$/;"	f
compare_thresholds	memcontrol.c	/^static int compare_thresholds(const void *a, const void *b)$/;"	f	file:
compat_process_vm_rw	process_vm_access.c	/^compat_process_vm_rw(compat_pid_t pid,$/;"	f	file:
compound_page_dtors	page_alloc.c	/^compound_page_dtor * const compound_page_dtors[] = {$/;"	v
compute_subtree_max_size	vmalloc.c	/^compute_subtree_max_size(struct vmap_area *va)$/;"	f	file:
congested	vmscan.c	/^		unsigned int congested;$/;"	m	struct:scan_control::__anon2	file:
congestion_wait	backing-dev.c	/^EXPORT_SYMBOL(congestion_wait);$/;"	v
congestion_wait	backing-dev.c	/^long congestion_wait(int sync, long timeout)$/;"	f
congestion_wqh	backing-dev.c	/^static wait_queue_head_t congestion_wqh[2] = {$/;"	v	file:
constrained_alloc	oom_kill.c	/^static enum oom_constraint constrained_alloc(struct oom_control *oc)$/;"	f	file:
consume_stock	memcontrol.c	/^static bool consume_stock(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f	file:
contended	internal.h	/^	bool contended;			\/* Signal lock or sched contention *\/$/;"	m	struct:compact_control
contig_hint	percpu-internal.h	/^	int                     contig_hint;    \/* contig hint for block *\/$/;"	m	struct:pcpu_block_md
contig_hint_start	percpu-internal.h	/^	int                     contig_hint_start; \/* block relative starting$/;"	m	struct:pcpu_block_md
contig_page_data	memblock.c	/^EXPORT_SYMBOL(contig_page_data);$/;"	v
contig_page_data	memblock.c	/^struct pglist_data __refdata contig_page_data;$/;"	v	typeref:struct:__refdata
contig_page_info	vmstat.c	/^struct contig_page_info {$/;"	s	file:
copy_from_early_mem	early_ioremap.c	/^void __init copy_from_early_mem(void *dest, phys_addr_t src, unsigned long size)$/;"	f
copy_huge_page	migrate.c	/^static void copy_huge_page(struct page *dst, struct page *src)$/;"	f	file:
copy_huge_page_from_user	memory.c	/^long copy_huge_page_from_user(struct page *dst_page,$/;"	f
copy_huge_pmd	huge_memory.c	/^int copy_huge_pmd(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_huge_pud	huge_memory.c	/^int copy_huge_pud(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_hugetlb_page_range	hugetlb.c	/^int copy_hugetlb_page_range(struct mm_struct *dst, struct mm_struct *src,$/;"	f
copy_nodes_to_user	mempolicy.c	/^static int copy_nodes_to_user(unsigned long __user *mask, unsigned long maxnode,$/;"	f	file:
copy_one_pte	memory.c	/^copy_one_pte(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_p4d_range	memory.c	/^static inline int copy_p4d_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_page_range	memory.c	/^int copy_page_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f
copy_pmd_range	memory.c	/^static inline int copy_pmd_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_pte_range	memory.c	/^static int copy_pte_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_pud_range	memory.c	/^static inline int copy_pud_range(struct mm_struct *dst_mm, struct mm_struct *src_mm,$/;"	f	file:
copy_subpage	memory.c	/^static void copy_subpage(unsigned long addr, int idx, void *arg)$/;"	f	file:
copy_subpage_arg	memory.c	/^struct copy_subpage_arg {$/;"	s	file:
copy_user_gigantic_page	memory.c	/^static void copy_user_gigantic_page(struct page *dst, struct page *src,$/;"	f	file:
copy_user_huge_page	memory.c	/^void copy_user_huge_page(struct page *dst, struct page *src,$/;"	f
copy_vma	mmap.c	/^struct vm_area_struct *copy_vma(struct vm_area_struct **vmap,$/;"	f
core_initcall	page_alloc.c	/^core_initcall(init_per_zone_wmark_min)$/;"	f
count	cma.h	/^	unsigned long   count;$/;"	m	struct:cma
count	kmemleak.c	/^	int count;$/;"	m	struct:kmemleak_object	file:
count	slab.c	/^		unsigned int count;$/;"	m	struct:freelist_init_state::__anon5	file:
count	slub.c	/^	unsigned long count;$/;"	m	struct:loc_track	file:
count	slub.c	/^	unsigned long count;$/;"	m	struct:location	file:
count_compact_event	compaction.c	/^static inline void count_compact_event(enum vm_event_item item)$/;"	f	file:
count_compact_event	compaction.c	39;"	d	file:
count_compact_events	compaction.c	/^static inline void count_compact_events(enum vm_event_item item, long delta)$/;"	f	file:
count_compact_events	compaction.c	40;"	d	file:
count_free	slub.c	/^static int count_free(struct page *page)$/;"	f	file:
count_history_pages	readahead.c	/^static pgoff_t count_history_pages(struct address_space *mapping,$/;"	f	file:
count_inuse	slub.c	/^static int count_inuse(struct page *page)$/;"	f	file:
count_mm_mlocked_page_nr	mlock.c	/^static unsigned long count_mm_mlocked_page_nr(struct mm_struct *mm,$/;"	f	file:
count_partial	slub.c	/^static unsigned long count_partial(struct kmem_cache_node *n,$/;"	f	file:
count_shadow_nodes	workingset.c	/^static unsigned long count_shadow_nodes(struct shrinker *shrinker,$/;"	f	file:
count_swap_pages	swapfile.c	/^unsigned int count_swap_pages(int type, int free)$/;"	f
count_swpout_vm_event	page_io.c	/^static inline void count_swpout_vm_event(struct page *page)$/;"	f	file:
count_total	slub.c	/^static int count_total(struct page *page)$/;"	f	file:
count_vma_pages_range	mmap.c	/^static unsigned long count_vma_pages_range(struct mm_struct *mm,$/;"	f	file:
cow_user_page	memory.c	/^static inline void cow_user_page(struct page *dst, struct page *src, unsigned long va, struct vm_area_struct *vma)$/;"	f	file:
cpu	slub.c	/^	int cpu;		\/* Was running on cpu *\/$/;"	m	struct:track	file:
cpu	z3fold.c	/^	short cpu;$/;"	m	struct:z3fold_header	file:
cpu_cache_get	slab.c	/^static inline struct array_cache *cpu_cache_get(struct kmem_cache *cachep)$/;"	f	file:
cpu_partial	slub.c	/^SLAB_ATTR(cpu_partial);$/;"	v
cpu_partial_show	slub.c	/^static ssize_t cpu_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cpu_partial_store	slub.c	/^static ssize_t cpu_partial_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
cpu_slabs	slub.c	/^SLAB_ATTR_RO(cpu_slabs);$/;"	v
cpu_slabs_show	slub.c	/^static ssize_t cpu_slabs_show(struct kmem_cache *s, char *buf)$/;"	f	file:
cpu_vm_stats_fold	vmstat.c	/^void cpu_vm_stats_fold(int cpu)$/;"	f
cpucache_init	slab.c	/^__initcall(cpucache_init);$/;"	v
cpucache_init	slab.c	/^static int __init cpucache_init(void)$/;"	f	file:
cpuset_mems_nr	hugetlb.c	/^static unsigned int cpuset_mems_nr(unsigned int *array)$/;"	f	file:
cpuup_canceled	slab.c	/^static void cpuup_canceled(long cpu)$/;"	f	file:
cpuup_prepare	slab.c	/^static int cpuup_prepare(long cpu)$/;"	f	file:
create	mempolicy.c	/^	int (*create)(struct mempolicy *pol, const nodemask_t *nodes);$/;"	m	struct:mempolicy_operations	file:
create_boot_cache	slab_common.c	/^void __init create_boot_cache(struct kmem_cache *s, const char *name,$/;"	f
create_cache	slab_common.c	/^static struct kmem_cache *create_cache(const char *name,$/;"	f	file:
create_cache	zsmalloc.c	/^static int create_cache(struct zs_pool *pool)$/;"	f	file:
create_dummy_stack	page_owner.c	/^static __always_inline depot_stack_handle_t create_dummy_stack(void)$/;"	f	file:
create_huge_pmd	memory.c	/^static inline vm_fault_t create_huge_pmd(struct vm_fault *vmf)$/;"	f	file:
create_huge_pud	memory.c	/^static vm_fault_t create_huge_pud(struct vm_fault *vmf)$/;"	f	file:
create_kmalloc_cache	slab_common.c	/^struct kmem_cache *__init create_kmalloc_cache(const char *name,$/;"	f
create_kmalloc_caches	slab_common.c	/^void __init create_kmalloc_caches(slab_flags_t flags)$/;"	f
create_object	kmemleak.c	/^static struct kmemleak_object *create_object(unsigned long ptr, size_t size,$/;"	f	file:
create_page_chain	zsmalloc.c	/^static void create_page_chain(struct size_class *class, struct zspage *zspage,$/;"	f	file:
create_unique_id	slub.c	/^static char *create_unique_id(struct kmem_cache *s)$/;"	f	file:
css	hugetlb_cgroup.c	/^	struct cgroup_subsys_state css;$/;"	m	struct:hugetlb_cgroup	typeref:struct:hugetlb_cgroup::cgroup_subsys_state	file:
ctor	slab.h	/^	void (*ctor)(void *);	\/* Called on object slot creation *\/$/;"	m	struct:kmem_cache
ctor	slub.c	/^SLAB_ATTR_RO(ctor);$/;"	v
ctor_show	slub.c	/^static ssize_t ctor_show(struct kmem_cache *s, char *buf)$/;"	f	file:
current_may_throttle	vmscan.c	/^static int current_may_throttle(void)$/;"	f	file:
d_page	zsmalloc.c	/^	struct page *d_page;$/;"	m	struct:zs_compact_control	typeref:struct:zs_compact_control::page	file:
data	percpu-internal.h	/^	void			*data;		\/* chunk data *\/$/;"	m	struct:pcpu_chunk
dbg_redzone1	slab.c	/^static unsigned long long *dbg_redzone1(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_redzone1	slab.c	359;"	d	file:
dbg_redzone2	slab.c	/^static unsigned long long *dbg_redzone2(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_redzone2	slab.c	360;"	d	file:
dbg_userword	slab.c	/^static void **dbg_userword(struct kmem_cache *cachep, void *objp)$/;"	f	file:
dbg_userword	slab.c	361;"	d	file:
deactivate_file_page	swap.c	/^void deactivate_file_page(struct page *page)$/;"	f
deactivate_page	swap.c	/^void deactivate_page(struct page *page)$/;"	f
deactivate_slab	slub.c	/^static void deactivate_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
deactivate_swap_slots_cache	swap_slots.c	/^static void deactivate_swap_slots_cache(void)$/;"	f	file:
debug_cow_attr	huge_memory.c	/^static struct kobj_attribute debug_cow_attr =$/;"	v	typeref:struct:kobj_attribute	file:
debug_cow_show	huge_memory.c	/^static ssize_t debug_cow_show(struct kobject *kobj,$/;"	f	file:
debug_cow_store	huge_memory.c	/^static ssize_t debug_cow_store(struct kobject *kobj,$/;"	f	file:
debug_guardpage_minorder_setup	page_alloc.c	/^static int __init debug_guardpage_minorder_setup(char *buf)$/;"	f	file:
dec_cluster_info_page	swapfile.c	/^static void dec_cluster_info_page(struct swap_info_struct *p,$/;"	f	file:
dec_mm_counter_fast	memory.c	169;"	d	file:
dec_mm_counter_fast	memory.c	183;"	d	file:
dec_node_page_state	vmstat.c	/^EXPORT_SYMBOL(dec_node_page_state);$/;"	v
dec_node_page_state	vmstat.c	/^void dec_node_page_state(struct page *page, enum node_stat_item item)$/;"	f
dec_slabs_node	slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s, int node, int objects)$/;"	f	file:
dec_slabs_node	slub.c	/^static inline void dec_slabs_node(struct kmem_cache *s, int node,$/;"	f	file:
dec_zone_page_state	vmstat.c	/^EXPORT_SYMBOL(dec_zone_page_state);$/;"	v
dec_zone_page_state	vmstat.c	/^void dec_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
dec_zspage_isolation	zsmalloc.c	/^static void dec_zspage_isolation(struct zspage *zspage)$/;"	f	file:
default_bdi_init	backing-dev.c	/^static int __init default_bdi_init(void)$/;"	f	file:
default_bdi_init	backing-dev.c	/^subsys_initcall(default_bdi_init);$/;"	v
default_hstate_idx	hugetlb.c	/^unsigned int default_hstate_idx;$/;"	v
default_hstate_max_huge_pages	hugetlb.c	/^static unsigned long __initdata default_hstate_max_huge_pages;$/;"	v	file:
default_hstate_size	hugetlb.c	/^static unsigned long __initdata default_hstate_size;$/;"	v	file:
default_kernel_zone_for_pfn	memory_hotplug.c	/^static struct zone *default_kernel_zone_for_pfn(int nid, unsigned long start_pfn,$/;"	f	file:
default_policy	mempolicy.c	/^static struct mempolicy default_policy = {$/;"	v	typeref:struct:mempolicy	file:
default_zone_for_pfn	memory_hotplug.c	/^static inline struct zone *default_zone_for_pfn(int nid, unsigned long start_pfn,$/;"	f	file:
defer_compaction	compaction.c	/^void defer_compaction(struct zone *zone, int order)$/;"	f
defer_init	page_alloc.c	/^defer_init(int nid, unsigned long pfn, unsigned long end_pfn)$/;"	f	file:
defer_init	page_alloc.c	/^static inline bool defer_init(int nid, unsigned long pfn, unsigned long end_pfn)$/;"	f	file:
deferred_free_pages	page_alloc.c	/^static void __init deferred_free_pages(unsigned long pfn,$/;"	f	file:
deferred_free_range	page_alloc.c	/^static void __init deferred_free_range(unsigned long pfn,$/;"	f	file:
deferred_grow_zone	page_alloc.c	/^deferred_grow_zone(struct zone *zone, unsigned int order)$/;"	f	file:
deferred_init_maxorder	page_alloc.c	/^deferred_init_maxorder(u64 *i, struct zone *zone, unsigned long *start_pfn,$/;"	f	file:
deferred_init_mem_pfn_range_in_zone	page_alloc.c	/^deferred_init_mem_pfn_range_in_zone(u64 *i, struct zone *zone,$/;"	f	file:
deferred_init_memmap	page_alloc.c	/^static int __init deferred_init_memmap(void *data)$/;"	f	file:
deferred_init_pages	page_alloc.c	/^static unsigned long  __init deferred_init_pages(struct zone *zone,$/;"	f	file:
deferred_pfn_valid	page_alloc.c	/^static inline bool __init deferred_pfn_valid(unsigned long pfn)$/;"	f	file:
deferred_split_count	huge_memory.c	/^static unsigned long deferred_split_count(struct shrinker *shrink,$/;"	f	file:
deferred_split_huge_page	huge_memory.c	/^void deferred_split_huge_page(struct page *page)$/;"	f
deferred_split_scan	huge_memory.c	/^static unsigned long deferred_split_scan(struct shrinker *shrink,$/;"	f	file:
deferred_split_shrinker	huge_memory.c	/^static struct shrinker deferred_split_shrinker = {$/;"	v	typeref:struct:shrinker	file:
deferred_split_shrinker	huge_memory.c	/^static struct shrinker deferred_split_shrinker;$/;"	v	typeref:struct:shrinker	file:
defrag_attr	huge_memory.c	/^static struct kobj_attribute defrag_attr =$/;"	v	typeref:struct:kobj_attribute	file:
defrag_show	huge_memory.c	/^static ssize_t defrag_show(struct kobject *kobj,$/;"	f	file:
defrag_store	huge_memory.c	/^static ssize_t defrag_store(struct kobject *kobj,$/;"	f	file:
del_from_avail_list	swapfile.c	/^static void del_from_avail_list(struct swap_info_struct *p)$/;"	f	file:
del_total	swap_state.c	/^	unsigned long del_total;$/;"	m	struct:__anon23	file:
delete_from_lru_cache	memory-failure.c	/^static int delete_from_lru_cache(struct page *p)$/;"	f	file:
delete_from_page_cache	filemap.c	/^EXPORT_SYMBOL(delete_from_page_cache);$/;"	v
delete_from_page_cache	filemap.c	/^void delete_from_page_cache(struct page *page)$/;"	f
delete_from_page_cache_batch	filemap.c	/^void delete_from_page_cache_batch(struct address_space *mapping,$/;"	f
delete_from_swap_cache	swap_state.c	/^void delete_from_swap_cache(struct page *page)$/;"	f
delete_nommu_region	nommu.c	/^static void delete_nommu_region(struct vm_region *region)$/;"	f	file:
delete_object_full	kmemleak.c	/^static void delete_object_full(unsigned long ptr)$/;"	f	file:
delete_object_part	kmemleak.c	/^static void delete_object_part(unsigned long ptr, size_t size)$/;"	f	file:
delete_vma	nommu.c	/^static void delete_vma(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
delete_vma_from_mm	nommu.c	/^static void delete_vma_from_mm(struct vm_area_struct *vma)$/;"	f	file:
depopulate_section_memmap	sparse.c	/^static void depopulate_section_memmap(unsigned long pfn, unsigned long nr_pages,$/;"	f	file:
deposit_prealloc_pte	memory.c	/^static void deposit_prealloc_pte(struct vm_fault *vmf)$/;"	f	file:
dequeue_huge_page_node_exact	hugetlb.c	/^static struct page *dequeue_huge_page_node_exact(struct hstate *h, int nid)$/;"	f	file:
dequeue_huge_page_nodemask	hugetlb.c	/^static struct page *dequeue_huge_page_nodemask(struct hstate *h, gfp_t gfp_mask, int nid,$/;"	f	file:
dequeue_huge_page_vma	hugetlb.c	/^static struct page *dequeue_huge_page_vma(struct hstate *h,$/;"	f	file:
describe_object	kasan/report.c	/^static void describe_object(struct kmem_cache *cache, void *object,$/;"	f	file:
describe_object_addr	kasan/report.c	/^static void describe_object_addr(struct kmem_cache *cache, void *object,$/;"	f	file:
destroy_by_rcu	slub.c	/^SLAB_ATTR_RO(destroy_by_rcu);$/;"	v
destroy_by_rcu_show	slub.c	/^static ssize_t destroy_by_rcu_show(struct kmem_cache *s, char *buf)$/;"	f	file:
destroy_cache	zsmalloc.c	/^static void destroy_cache(struct zs_pool *pool)$/;"	f	file:
destroy_compound_gigantic_page	hugetlb.c	/^static inline void destroy_compound_gigantic_page(struct page *page,$/;"	f	file:
destroy_compound_gigantic_page	hugetlb.c	/^static void destroy_compound_gigantic_page(struct page *page,$/;"	f	file:
destroy_memcg_params	slab_common.c	/^static inline void destroy_memcg_params(struct kmem_cache *s)$/;"	f	file:
destroy_memcg_params	slab_common.c	/^static void destroy_memcg_params(struct kmem_cache *s)$/;"	f	file:
destroy_swap_extents	swapfile.c	/^static void destroy_swap_extents(struct swap_info_struct *sis)$/;"	f	file:
destroying	zsmalloc.c	/^	bool destroying;$/;"	m	struct:zs_pool	file:
detach_vmas_to_be_unmapped	mmap.c	/^detach_vmas_to_be_unmapped(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
detached_freelist	slub.c	/^struct detached_freelist {$/;"	s	file:
determine_vm_flags	nommu.c	/^static unsigned long determine_vm_flags(struct file *file,$/;"	f	file:
dev	dmapool.c	/^	struct device *dev;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::device	file:
dev_pagemap_cleanup	memremap.c	/^static void dev_pagemap_cleanup(struct dev_pagemap *pgmap)$/;"	f	file:
dev_pagemap_kill	memremap.c	/^static void dev_pagemap_kill(struct dev_pagemap *pgmap)$/;"	f	file:
dev_pagemap_mapping_shift	memory-failure.c	/^static unsigned long dev_pagemap_mapping_shift(struct page *page,$/;"	f	file:
dev_pagemap_percpu_release	memremap.c	/^static void dev_pagemap_percpu_release(struct percpu_ref *ref)$/;"	f	file:
devm_memremap_pages	memremap.c	/^EXPORT_SYMBOL_GPL(devm_memremap_pages);$/;"	v
devm_memremap_pages	memremap.c	/^void *devm_memremap_pages(struct device *dev, struct dev_pagemap *pgmap)$/;"	f
devm_memremap_pages_release	memremap.c	/^static void devm_memremap_pages_release(void *data)$/;"	f	file:
devm_memunmap_pages	memremap.c	/^EXPORT_SYMBOL_GPL(devm_memunmap_pages);$/;"	v
devm_memunmap_pages	memremap.c	/^void devm_memunmap_pages(struct device *dev, struct dev_pagemap *pgmap)$/;"	f
devmap_managed_enable	memremap.c	/^static atomic_t devmap_managed_enable;$/;"	v	file:
devmap_managed_enable_get	memremap.c	/^static int devmap_managed_enable_get(struct dev_pagemap *pgmap)$/;"	f	file:
devmap_managed_enable_put	memremap.c	/^static void devmap_managed_enable_put(void)$/;"	f	file:
devmap_managed_key	memremap.c	/^DEFINE_STATIC_KEY_FALSE(devmap_managed_key);$/;"	v
devmap_managed_key	memremap.c	/^EXPORT_SYMBOL(devmap_managed_key);$/;"	v
direct_compaction	internal.h	/^	bool direct_compaction;		\/* False from kcompactd or \/proc\/... *\/$/;"	m	struct:compact_control
dirty	memory-failure.c	825;"	d	file:
dirty	memory-failure.c	874;"	d	file:
dirty	page-writeback.c	/^	unsigned long		dirty;		\/* file_dirty + write + nfs *\/$/;"	m	struct:dirty_throttle_control	file:
dirty	vmalloc.c	/^	unsigned long free, dirty;$/;"	m	struct:vmap_block	file:
dirty	vmscan.c	/^		unsigned int dirty;$/;"	m	struct:scan_control::__anon2	file:
dirty_background_bytes	page-writeback.c	/^unsigned long dirty_background_bytes;$/;"	v
dirty_background_bytes_handler	page-writeback.c	/^int dirty_background_bytes_handler(struct ctl_table *table, int write,$/;"	f
dirty_background_ratio	page-writeback.c	/^int dirty_background_ratio = 10;$/;"	v
dirty_background_ratio_handler	page-writeback.c	/^int dirty_background_ratio_handler(struct ctl_table *table, int write,$/;"	f
dirty_bytes_handler	page-writeback.c	/^int dirty_bytes_handler(struct ctl_table *table, int write,$/;"	f
dirty_expire_interval	page-writeback.c	/^unsigned int dirty_expire_interval = 30 * 100; \/* centiseconds *\/$/;"	v
dirty_freerun_ceiling	page-writeback.c	/^static unsigned long dirty_freerun_ceiling(unsigned long thresh,$/;"	f	file:
dirty_max	vmalloc.c	/^	unsigned long dirty_min, dirty_max; \/*< dirty range *\/$/;"	m	struct:vmap_block	file:
dirty_min	vmalloc.c	/^	unsigned long dirty_min, dirty_max; \/*< dirty range *\/$/;"	m	struct:vmap_block	file:
dirty_poll_interval	page-writeback.c	/^static unsigned long dirty_poll_interval(unsigned long dirty,$/;"	f	file:
dirty_ratio_handler	page-writeback.c	/^int dirty_ratio_handler(struct ctl_table *table, int write,$/;"	f
dirty_throttle_control	page-writeback.c	/^struct dirty_throttle_control {$/;"	s	file:
dirty_writeback_centisecs_handler	page-writeback.c	/^int dirty_writeback_centisecs_handler(struct ctl_table *table, int write,$/;"	f
dirty_writeback_interval	page-writeback.c	/^EXPORT_SYMBOL_GPL(dirty_writeback_interval);$/;"	v
dirty_writeback_interval	page-writeback.c	/^unsigned int dirty_writeback_interval = 5 * 100; \/* centiseconds *\/$/;"	v
disable_higher_order_debug	slub.c	/^static int disable_higher_order_debug;$/;"	v	file:
disable_higher_order_debug	slub.c	1385;"	d	file:
disable_randmaps	memory.c	/^static int __init disable_randmaps(char *s)$/;"	f	file:
disable_swap_slots_cache_lock	swap_slots.c	/^void disable_swap_slots_cache_lock(void)$/;"	f
discard_slab	slub.c	/^static void discard_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
discard_swap	swapfile.c	/^static int discard_swap(struct swap_info_struct *si)$/;"	f	file:
discard_swap_cluster	swapfile.c	/^static void discard_swap_cluster(struct swap_info_struct *si,$/;"	f	file:
dissolve_free_huge_page	hugetlb.c	/^int dissolve_free_huge_page(struct page *page)$/;"	f
dissolve_free_huge_pages	hugetlb.c	/^int dissolve_free_huge_pages(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
dma	dmapool.c	/^	dma_addr_t dma;$/;"	m	struct:dma_page	file:
dma_page	dmapool.c	/^struct dma_page {		\/* cacheable header for 'allocation' bytes *\/$/;"	s	file:
dma_pool	dmapool.c	/^struct dma_pool {		\/* the pool *\/$/;"	s	file:
dma_pool_alloc	dmapool.c	/^EXPORT_SYMBOL(dma_pool_alloc);$/;"	v
dma_pool_alloc	dmapool.c	/^void *dma_pool_alloc(struct dma_pool *pool, gfp_t mem_flags,$/;"	f
dma_pool_create	dmapool.c	/^EXPORT_SYMBOL(dma_pool_create);$/;"	v
dma_pool_create	dmapool.c	/^struct dma_pool *dma_pool_create(const char *name, struct device *dev,$/;"	f
dma_pool_destroy	dmapool.c	/^EXPORT_SYMBOL(dma_pool_destroy);$/;"	v
dma_pool_destroy	dmapool.c	/^void dma_pool_destroy(struct dma_pool *pool)$/;"	f
dma_pool_free	dmapool.c	/^EXPORT_SYMBOL(dma_pool_free);$/;"	v
dma_pool_free	dmapool.c	/^void dma_pool_free(struct dma_pool *pool, void *vaddr, dma_addr_t dma)$/;"	f
dmam_pool_create	dmapool.c	/^EXPORT_SYMBOL(dmam_pool_create);$/;"	v
dmam_pool_create	dmapool.c	/^struct dma_pool *dmam_pool_create(const char *name, struct device *dev,$/;"	f
dmam_pool_destroy	dmapool.c	/^EXPORT_SYMBOL(dmam_pool_destroy);$/;"	v
dmam_pool_destroy	dmapool.c	/^void dmam_pool_destroy(struct dma_pool *pool)$/;"	f
dmam_pool_match	dmapool.c	/^static int dmam_pool_match(struct device *dev, void *res, void *match_data)$/;"	f	file:
dmam_pool_release	dmapool.c	/^static void dmam_pool_release(struct device *dev, void *res)$/;"	f	file:
do_anonymous_page	memory.c	/^static vm_fault_t do_anonymous_page(struct vm_fault *vmf)$/;"	f	file:
do_async_mmap_readahead	filemap.c	/^static struct file *do_async_mmap_readahead(struct vm_fault *vmf,$/;"	f	file:
do_brk_flags	mmap.c	/^static int do_brk_flags(unsigned long addr, unsigned long len, unsigned long flags, struct list_head *uf)$/;"	f	file:
do_compact_page	z3fold.c	/^static void do_compact_page(struct z3fold_header *zhdr, bool locked)$/;"	f	file:
do_cow_fault	memory.c	/^static vm_fault_t do_cow_fault(struct vm_fault *vmf)$/;"	f	file:
do_drain	slab.c	/^static void do_drain(void *arg)$/;"	f	file:
do_fault	memory.c	/^static vm_fault_t do_fault(struct vm_fault *vmf)$/;"	f	file:
do_fault_around	memory.c	/^static vm_fault_t do_fault_around(struct vm_fault *vmf)$/;"	f	file:
do_get_mempolicy	mempolicy.c	/^static long do_get_mempolicy(int *policy, nodemask_t *nmask,$/;"	f	file:
do_huge_pmd_anonymous_page	huge_memory.c	/^vm_fault_t do_huge_pmd_anonymous_page(struct vm_fault *vmf)$/;"	f
do_huge_pmd_numa_page	huge_memory.c	/^vm_fault_t do_huge_pmd_numa_page(struct vm_fault *vmf, pmd_t pmd)$/;"	f
do_huge_pmd_wp_page	huge_memory.c	/^vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf, pmd_t orig_pmd)$/;"	f
do_huge_pmd_wp_page_fallback	huge_memory.c	/^static vm_fault_t do_huge_pmd_wp_page_fallback(struct vm_fault *vmf,$/;"	f	file:
do_invalidatepage	truncate.c	/^void do_invalidatepage(struct page *page, unsigned int offset,$/;"	f
do_launder_page	truncate.c	/^static int do_launder_page(struct address_space *mapping, struct page *page)$/;"	f	file:
do_mbind	mempolicy.c	/^static long do_mbind(unsigned long start, unsigned long len,$/;"	f	file:
do_memsw_account	memcontrol.c	/^static bool do_memsw_account(void)$/;"	f	file:
do_migrate_pages	mempolicy.c	/^int do_migrate_pages(struct mm_struct *mm, const nodemask_t *from,$/;"	f
do_migrate_range	memory_hotplug.c	/^do_migrate_range(unsigned long start_pfn, unsigned long end_pfn)$/;"	f	file:
do_mincore	mincore.c	/^static long do_mincore(unsigned long addr, unsigned long pages, unsigned char *vec)$/;"	f	file:
do_mlock	mlock.c	/^static __must_check int do_mlock(unsigned long start, size_t len, vm_flags_t flags)$/;"	f	file:
do_mmap	mmap.c	/^unsigned long do_mmap(struct file *file, unsigned long addr,$/;"	f
do_mmap	nommu.c	/^unsigned long do_mmap(struct file *file,$/;"	f
do_mmap_private	nommu.c	/^static int do_mmap_private(struct vm_area_struct *vma,$/;"	f	file:
do_mmap_shared_file	nommu.c	/^static int do_mmap_shared_file(struct vm_area_struct *vma)$/;"	f	file:
do_move_pages_to_node	migrate.c	/^static int do_move_pages_to_node(struct mm_struct *mm,$/;"	f	file:
do_mprotect_pkey	mprotect.c	/^static int do_mprotect_pkey(unsigned long start, size_t len,$/;"	f	file:
do_mremap	nommu.c	/^static unsigned long do_mremap(unsigned long addr,$/;"	f	file:
do_munmap	mmap.c	/^int do_munmap(struct mm_struct *mm, unsigned long start, size_t len,$/;"	f
do_munmap	nommu.c	/^EXPORT_SYMBOL(do_munmap);$/;"	v
do_munmap	nommu.c	/^int do_munmap(struct mm_struct *mm, unsigned long start, size_t len, struct list_head *uf)$/;"	f
do_numa_page	memory.c	/^static vm_fault_t do_numa_page(struct vm_fault *vmf)$/;"	f	file:
do_one_pass	memtest.c	/^static void __init do_one_pass(u64 pattern, phys_addr_t start, phys_addr_t end)$/;"	f	file:
do_page_add_anon_rmap	rmap.c	/^void do_page_add_anon_rmap(struct page *page,$/;"	f
do_page_mkwrite	memory.c	/^static vm_fault_t do_page_mkwrite(struct vm_fault *vmf)$/;"	f	file:
do_pages_move	migrate.c	/^static int do_pages_move(struct mm_struct *mm, nodemask_t task_nodes,$/;"	f	file:
do_pages_stat	migrate.c	/^static int do_pages_stat(struct mm_struct *mm, unsigned long nr_pages,$/;"	f	file:
do_pages_stat_array	migrate.c	/^static void do_pages_stat_array(struct mm_struct *mm, unsigned long nr_pages,$/;"	f	file:
do_read_cache_page	filemap.c	/^static struct page *do_read_cache_page(struct address_space *mapping,$/;"	f	file:
do_read_fault	memory.c	/^static vm_fault_t do_read_fault(struct vm_fault *vmf)$/;"	f	file:
do_set_mempolicy	mempolicy.c	/^static long do_set_mempolicy(unsigned short mode, unsigned short flags,$/;"	f	file:
do_set_pmd	memory.c	/^static vm_fault_t do_set_pmd(struct vm_fault *vmf, struct page *page)$/;"	f	file:
do_shared_fault	memory.c	/^static vm_fault_t do_shared_fault(struct vm_fault *vmf)$/;"	f	file:
do_shrink_slab	vmscan.c	/^static unsigned long do_shrink_slab(struct shrink_control *shrinkctl,$/;"	f	file:
do_slab_free	slub.c	/^static __always_inline void do_slab_free(struct kmem_cache *s,$/;"	f	file:
do_swap_account	memcontrol.c	88;"	d	file:
do_swap_page	memory.c	/^vm_fault_t do_swap_page(struct vm_fault *vmf)$/;"	f
do_sync_mmap_readahead	filemap.c	/^static struct file *do_sync_mmap_readahead(struct vm_fault *vmf)$/;"	f	file:
do_try_to_free_pages	vmscan.c	/^static unsigned long do_try_to_free_pages(struct zonelist *zonelist,$/;"	f	file:
do_tune_cpucache	slab.c	/^static int do_tune_cpucache(struct kmem_cache *cachep, int limit,$/;"	f	file:
do_writepages	page-writeback.c	/^int do_writepages(struct address_space *mapping, struct writeback_control *wbc)$/;"	f
dom	page-writeback.c	/^	struct wb_domain	*dom;$/;"	m	struct:dirty_throttle_control	typeref:struct:dirty_throttle_control::wb_domain	file:
domain_dirty_limits	page-writeback.c	/^static void domain_dirty_limits(struct dirty_throttle_control *dtc)$/;"	f	file:
domain_update_bandwidth	page-writeback.c	/^static void domain_update_bandwidth(struct dirty_throttle_control *dtc,$/;"	f	file:
drain_alien_cache	slab.c	/^static void drain_alien_cache(struct kmem_cache *cachep,$/;"	f	file:
drain_alien_cache	slab.c	593;"	d	file:
drain_all_pages	page_alloc.c	/^void drain_all_pages(struct zone *zone)$/;"	f
drain_all_stock	memcontrol.c	/^static void drain_all_stock(struct mem_cgroup *root_memcg)$/;"	f	file:
drain_array	slab.c	/^static void drain_array(struct kmem_cache *cachep, struct kmem_cache_node *n,$/;"	f	file:
drain_array_locked	slab.c	/^static void drain_array_locked(struct kmem_cache *cachep, struct array_cache *ac,$/;"	f	file:
drain_cache_node_node	slab.c	/^static int __meminit drain_cache_node_node(int node)$/;"	f	file:
drain_cpu_caches	slab.c	/^static void drain_cpu_caches(struct kmem_cache *cachep)$/;"	f	file:
drain_freelist	slab.c	/^static int drain_freelist(struct kmem_cache *cache,$/;"	f	file:
drain_local_pages	page_alloc.c	/^void drain_local_pages(struct zone *zone)$/;"	f
drain_local_pages_wq	page_alloc.c	/^static void drain_local_pages_wq(struct work_struct *work)$/;"	f	file:
drain_local_stock	memcontrol.c	/^static void drain_local_stock(struct work_struct *dummy)$/;"	f	file:
drain_mmlist	swapfile.c	/^static void drain_mmlist(void)$/;"	f	file:
drain_pages	page_alloc.c	/^static void drain_pages(unsigned int cpu)$/;"	f	file:
drain_pages_zone	page_alloc.c	/^static void drain_pages_zone(unsigned int cpu, struct zone *zone)$/;"	f	file:
drain_slots_cache_cpu	swap_slots.c	/^static void drain_slots_cache_cpu(unsigned int cpu, unsigned int type,$/;"	f	file:
drain_stock	memcontrol.c	/^static void drain_stock(struct memcg_stock_pcp *stock)$/;"	f	file:
drain_zone_pages	page_alloc.c	/^void drain_zone_pages(struct zone *zone, struct per_cpu_pages *pcp)$/;"	f
drain_zonestat	vmstat.c	/^void drain_zonestat(struct zone *zone, struct per_cpu_pageset *pset)$/;"	f
driver	zpool.c	/^	struct zpool_driver *driver;$/;"	m	struct:zpool	typeref:struct:zpool::zpool_driver	file:
drop_rmap_locks	mremap.c	/^static void drop_rmap_locks(struct vm_area_struct *vma)$/;"	f	file:
drop_slab	vmscan.c	/^void drop_slab(void)$/;"	f
drop_slab_node	vmscan.c	/^void drop_slab_node(int nid)$/;"	f
dst	memory.c	/^	struct page *dst;$/;"	m	struct:copy_subpage_arg	typeref:struct:copy_subpage_arg::page	file:
dtc_dom	page-writeback.c	/^static struct wb_domain *dtc_dom(struct dirty_throttle_control *dtc)$/;"	f	file:
dummy_handle	page_owner.c	/^static depot_stack_handle_t dummy_handle;$/;"	v	file:
dummy_page	memcontrol.c	/^	struct page *dummy_page;$/;"	m	struct:uncharge_gather	typeref:struct:uncharge_gather::page	file:
dump_header	oom_kill.c	/^static void dump_header(struct oom_control *oc, struct task_struct *p)$/;"	f	file:
dump_line	slab.c	/^static void dump_line(char *data, int offset, int limit)$/;"	f	file:
dump_mm	debug.c	/^void dump_mm(const struct mm_struct *mm)$/;"	f
dump_object_info	kmemleak.c	/^static void dump_object_info(struct kmemleak_object *object)$/;"	f	file:
dump_oom_summary	oom_kill.c	/^static void dump_oom_summary(struct oom_control *oc, struct task_struct *victim)$/;"	f	file:
dump_page	debug.c	/^EXPORT_SYMBOL(dump_page);$/;"	v
dump_page	debug.c	/^void dump_page(struct page *page, const char *reason)$/;"	f
dump_str_object_info	kmemleak.c	/^static int dump_str_object_info(const char *str)$/;"	f	file:
dump_task	oom_kill.c	/^static int dump_task(struct task_struct *p, void *arg)$/;"	f	file:
dump_tasks	oom_kill.c	/^static void dump_tasks(struct oom_control *oc)$/;"	f	file:
dump_unreclaimable_slab	slab.h	/^static inline void dump_unreclaimable_slab(void)$/;"	f
dump_unreclaimable_slab	slab_common.c	/^void dump_unreclaimable_slab(void)$/;"	f
dump_vma	debug.c	/^EXPORT_SYMBOL(dump_vma);$/;"	v
dump_vma	debug.c	/^void dump_vma(const struct vm_area_struct *vma)$/;"	f
dying	slab.h	/^			bool dying;$/;"	m	struct:memcg_cache_params::__anon8::__anon9
early_alloc	kasan/init.c	/^static __init void *early_alloc(size_t size, int node)$/;"	f	file:
early_calculate_totalpages	page_alloc.c	/^static unsigned long __init early_calculate_totalpages(void)$/;"	f	file:
early_debug_pagealloc	page_alloc.c	/^static int __init early_debug_pagealloc(char *buf)$/;"	f	file:
early_handle	page_owner.c	/^static depot_stack_handle_t early_handle;$/;"	v	file:
early_init_on_alloc	page_alloc.c	/^static int __init early_init_on_alloc(char *buf)$/;"	f	file:
early_init_on_free	page_alloc.c	/^static int __init early_init_on_free(char *buf)$/;"	f	file:
early_ioremap	early_ioremap.c	/^early_ioremap(resource_size_t phys_addr, unsigned long size)$/;"	f
early_ioremap_debug_setup	early_ioremap.c	/^static int __init early_ioremap_debug_setup(char *str)$/;"	f	file:
early_ioremap_reset	early_ioremap.c	/^void __init early_ioremap_reset(void)$/;"	f
early_ioremap_setup	early_ioremap.c	/^void __init early_ioremap_setup(void)$/;"	f
early_ioremap_shutdown	early_ioremap.c	/^void __init __weak early_ioremap_shutdown(void)$/;"	f
early_iounmap	early_ioremap.c	/^void __init early_iounmap(void __iomem *addr, unsigned long size)$/;"	f
early_kmem_cache_node_alloc	slub.c	/^static void early_kmem_cache_node_alloc(int node)$/;"	f	file:
early_memblock	memblock.c	/^static int __init early_memblock(char *p)$/;"	f	file:
early_memremap	early_ioremap.c	/^early_memremap(resource_size_t phys_addr, unsigned long size)$/;"	f
early_memremap_pgprot_adjust	early_ioremap.c	/^pgprot_t __init __weak early_memremap_pgprot_adjust(resource_size_t phys_addr,$/;"	f
early_memremap_prot	early_ioremap.c	/^early_memremap_prot(resource_size_t phys_addr, unsigned long size,$/;"	f
early_memremap_ro	early_ioremap.c	/^early_memremap_ro(resource_size_t phys_addr, unsigned long size)$/;"	f
early_memtest	memtest.c	/^void __init early_memtest(phys_addr_t start, phys_addr_t end)$/;"	f
early_memunmap	early_ioremap.c	/^void __init early_memunmap(void *addr, unsigned long size)$/;"	f
early_page_owner_param	page_owner.c	/^static int __init early_page_owner_param(char *buf)$/;"	f	file:
early_page_poison_param	page_poison.c	/^static int __init early_page_poison_param(char *buf)$/;"	f	file:
early_page_uninitialised	page_alloc.c	/^static inline bool __meminit early_page_uninitialised(unsigned long pfn)$/;"	f	file:
early_page_uninitialised	page_alloc.c	/^static inline bool early_page_uninitialised(unsigned long pfn)$/;"	f	file:
early_pfn_in_nid	page_alloc.c	/^static inline bool __meminit early_pfn_in_nid(unsigned long pfn, int node)$/;"	f	file:
early_pfn_to_nid	page_alloc.c	/^int __meminit early_pfn_to_nid(unsigned long pfn)$/;"	f
efd	vmpressure.c	/^	struct eventfd_ctx *efd;$/;"	m	struct:vmpressure_event	typeref:struct:vmpressure_event::eventfd_ctx	file:
enable_cpucache	slab.c	/^static int enable_cpucache(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
enable_swap_account	memcontrol.c	/^static int __init enable_swap_account(char *s)$/;"	f	file:
enable_swap_info	swapfile.c	/^static void enable_swap_info(struct swap_info_struct *p, int prio,$/;"	f	file:
enable_swap_slots_cache	swap_slots.c	/^int enable_swap_slots_cache(void)$/;"	f
enabled_attr	huge_memory.c	/^static struct kobj_attribute enabled_attr =$/;"	v	typeref:struct:kobj_attribute	file:
enabled_show	huge_memory.c	/^static ssize_t enabled_show(struct kobject *kobj,$/;"	f	file:
enabled_store	huge_memory.c	/^static ssize_t enabled_store(struct kobject *kobj,$/;"	f	file:
encode_handle	z3fold.c	/^static unsigned long encode_handle(struct z3fold_header *zhdr, enum buddy bud)$/;"	f	file:
encode_handle	zbud.c	/^static unsigned long encode_handle(struct zbud_header *zhdr, enum buddy bud)$/;"	f	file:
end_offset	percpu-internal.h	/^	int			end_offset;	\/* additional area required to$/;"	m	struct:pcpu_chunk
end_page_writeback	filemap.c	/^EXPORT_SYMBOL(end_page_writeback);$/;"	v
end_page_writeback	filemap.c	/^void end_page_writeback(struct page *page)$/;"	f
end_report	kasan/report.c	/^static void end_report(unsigned long *flags)$/;"	f	file:
end_swap_bio_read	page_io.c	/^static void end_swap_bio_read(struct bio *bio)$/;"	f	file:
end_swap_bio_write	page_io.c	/^void end_swap_bio_write(struct bio *bio)$/;"	f
enqueue_huge_page	hugetlb.c	/^static void enqueue_huge_page(struct hstate *h, struct page *page)$/;"	f	file:
ent	memcontrol.c	/^	swp_entry_t	ent;$/;"	m	union:mc_target	file:
entries	slab.h	/^	struct kmem_cache *entries[0];$/;"	m	struct:memcg_cache_array	typeref:struct:memcg_cache_array::kmem_cache
entry	slab.c	/^	void *entry[];	\/*$/;"	m	struct:array_cache	file:
error_states	memory-failure.c	/^} error_states[] = {$/;"	v	typeref:struct:page_state	file:
eventfd	memcontrol.c	/^	struct eventfd_ctx *eventfd;$/;"	m	struct:mem_cgroup_event	typeref:struct:mem_cgroup_event::eventfd_ctx	file:
eventfd	memcontrol.c	/^	struct eventfd_ctx *eventfd;$/;"	m	struct:mem_cgroup_eventfd_list	typeref:struct:mem_cgroup_eventfd_list::eventfd_ctx	file:
evict	z3fold.c	/^	int (*evict)(struct z3fold_pool *pool, unsigned long handle);$/;"	m	struct:z3fold_ops	file:
evictable	zpool.c	/^	bool evictable;$/;"	m	struct:zpool	file:
excess_ref	kmemleak.c	/^	unsigned long excess_ref;$/;"	m	struct:kmemleak_object	file:
exit_mmap	mmap.c	/^void exit_mmap(struct mm_struct *mm)$/;"	f
exit_mmap	nommu.c	/^void exit_mmap(struct mm_struct *mm)$/;"	f
exit_oom_victim	oom_kill.c	/^void exit_oom_victim(void)$/;"	f
exit_swap_address_space	swap_state.c	/^void exit_swap_address_space(unsigned int type)$/;"	f
exit_z3fold	z3fold.c	/^module_exit(exit_z3fold);$/;"	v
exit_z3fold	z3fold.c	/^static void __exit exit_z3fold(void)$/;"	f	file:
exit_zbud	zbud.c	/^module_exit(exit_zbud);$/;"	v
exit_zbud	zbud.c	/^static void __exit exit_zbud(void)$/;"	f	file:
expand	page_alloc.c	/^static inline void expand(struct zone *zone, struct page *page,$/;"	f	file:
expand_downwards	mmap.c	/^int expand_downwards(struct vm_area_struct *vma,$/;"	f
expand_stack	mmap.c	/^int expand_stack(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_stack	nommu.c	/^int expand_stack(struct vm_area_struct *vma, unsigned long address)$/;"	f
expand_upwards	mmap.c	/^int expand_upwards(struct vm_area_struct *vma, unsigned long address)$/;"	f
expansion	gup_benchmark.c	/^	__u64 expansion[10];	\/* For future use *\/$/;"	m	struct:gup_benchmark	file:
expected_page_refs	migrate.c	/^static int expected_page_refs(struct address_space *mapping, struct page *page)$/;"	f	file:
extfrag_debug_init	vmstat.c	/^module_init(extfrag_debug_init);$/;"	v
extfrag_debug_init	vmstat.c	/^static int __init extfrag_debug_init(void)$/;"	f	file:
extfrag_file_ops	vmstat.c	/^static const struct file_operations extfrag_file_ops = {$/;"	v	typeref:struct:file_operations	file:
extfrag_op	vmstat.c	/^static const struct seq_operations extfrag_op = {$/;"	v	typeref:struct:seq_operations	file:
extfrag_open	vmstat.c	/^static int extfrag_open(struct inode *inode, struct file *file)$/;"	f	file:
extfrag_show	vmstat.c	/^static int extfrag_show(struct seq_file *m, void *arg)$/;"	f	file:
extfrag_show_print	vmstat.c	/^static void extfrag_show_print(struct seq_file *m,$/;"	f	file:
f	vmalloc.c	/^static int f(pte_t *pte, unsigned long addr, void *data)$/;"	f	file:
f1	kasan/generic.c	/^DEFINE_ASAN_SET_SHADOW(f1);$/;"	v
f2	kasan/generic.c	/^DEFINE_ASAN_SET_SHADOW(f2);$/;"	v
f3	kasan/generic.c	/^DEFINE_ASAN_SET_SHADOW(f3);$/;"	v
f5	kasan/generic.c	/^DEFINE_ASAN_SET_SHADOW(f5);$/;"	v
f8	kasan/generic.c	/^DEFINE_ASAN_SET_SHADOW(f8);$/;"	v
fail_page_alloc	page_alloc.c	/^} fail_page_alloc = {$/;"	v	typeref:struct:__anon7	file:
fail_page_alloc_debugfs	page_alloc.c	/^late_initcall(fail_page_alloc_debugfs);$/;"	v
fail_page_alloc_debugfs	page_alloc.c	/^static int __init fail_page_alloc_debugfs(void)$/;"	f	file:
failslab	failslab.c	/^} failslab = {$/;"	v	typeref:struct:__anon6	file:
failslab	slub.c	/^SLAB_ATTR(failslab);$/;"	v
failslab_debugfs_init	failslab.c	/^late_initcall(failslab_debugfs_init);$/;"	v
failslab_debugfs_init	failslab.c	/^static int __init failslab_debugfs_init(void)$/;"	f	file:
failslab_show	slub.c	/^static ssize_t failslab_show(struct kmem_cache *s, char *buf)$/;"	f	file:
failslab_store	slub.c	/^static ssize_t failslab_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
failure_handle	page_owner.c	/^static depot_stack_handle_t failure_handle;$/;"	v	file:
fallback_alloc	slab.c	/^static void *fallback_alloc(struct kmem_cache *cache, gfp_t flags)$/;"	f	file:
fallback_migrate_page	migrate.c	/^static int fallback_migrate_page(struct address_space *mapping,$/;"	f	file:
fallbacks	page_alloc.c	/^static int fallbacks[MIGRATE_TYPES][4] = {$/;"	v	file:
fast_find_migrateblock	compaction.c	/^static unsigned long fast_find_migrateblock(struct compact_control *cc)$/;"	f	file:
fast_isolate_around	compaction.c	/^fast_isolate_around(struct compact_control *cc, unsigned long pfn, unsigned long nr_isolated)$/;"	f	file:
fast_isolate_freepages	compaction.c	/^fast_isolate_freepages(struct compact_control *cc)$/;"	f	file:
fast_search_fail	internal.h	/^	unsigned short fast_search_fail;\/* failures to use free list searches *\/$/;"	m	struct:compact_control
fast_start_pfn	internal.h	/^	unsigned long fast_start_pfn;	\/* a pfn to start linear scan from *\/$/;"	m	struct:compact_control
fault_around_bytes_get	memory.c	/^static int fault_around_bytes_get(void *data, u64 *val)$/;"	f	file:
fault_around_bytes_set	memory.c	/^static int fault_around_bytes_set(void *data, u64 val)$/;"	f	file:
fault_around_debugfs	memory.c	/^late_initcall(fault_around_debugfs);$/;"	v
fault_around_debugfs	memory.c	/^static int __init fault_around_debugfs(void)$/;"	f	file:
fault_dirty_shared_page	memory.c	/^static vm_fault_t fault_dirty_shared_page(struct vm_fault *vmf)$/;"	f	file:
faultin_page	gup.c	/^static int faultin_page(struct task_struct *tsk, struct vm_area_struct *vma,$/;"	f	file:
fd	mmap.c	/^	unsigned long fd;$/;"	m	struct:mmap_arg_struct	file:
fd	nommu.c	/^	unsigned long fd;$/;"	m	struct:mmap_arg_struct	file:
file_check_and_advance_wb_err	filemap.c	/^EXPORT_SYMBOL(file_check_and_advance_wb_err);$/;"	v
file_check_and_advance_wb_err	filemap.c	/^int file_check_and_advance_wb_err(struct file *file)$/;"	f
file_fdatawait_range	filemap.c	/^EXPORT_SYMBOL(file_fdatawait_range);$/;"	v
file_fdatawait_range	filemap.c	/^int file_fdatawait_range(struct file *file, loff_t start_byte, loff_t end_byte)$/;"	f
file_mmap_ok	mmap.c	/^static inline bool file_mmap_ok(struct file *file, struct inode *inode,$/;"	f	file:
file_mmap_size_max	mmap.c	/^static inline u64 file_mmap_size_max(struct file *file, struct inode *inode)$/;"	f	file:
file_ra_state_init	readahead.c	/^EXPORT_SYMBOL_GPL(file_ra_state_init);$/;"	v
file_ra_state_init	readahead.c	/^file_ra_state_init(struct file_ra_state *ra, struct address_space *mapping)$/;"	f
file_region	hugetlb.c	/^struct file_region {$/;"	s	file:
file_taken	vmscan.c	/^		unsigned int file_taken;$/;"	m	struct:scan_control::__anon2	file:
file_write_and_wait_range	filemap.c	/^EXPORT_SYMBOL(file_write_and_wait_range);$/;"	v
file_write_and_wait_range	filemap.c	/^int file_write_and_wait_range(struct file *file, loff_t lstart, loff_t lend)$/;"	f
filemap_check_and_keep_errors	filemap.c	/^static int filemap_check_and_keep_errors(struct address_space *mapping)$/;"	f	file:
filemap_check_errors	filemap.c	/^EXPORT_SYMBOL(filemap_check_errors);$/;"	v
filemap_check_errors	filemap.c	/^int filemap_check_errors(struct address_space *mapping)$/;"	f
filemap_fault	filemap.c	/^EXPORT_SYMBOL(filemap_fault);$/;"	v
filemap_fault	filemap.c	/^vm_fault_t filemap_fault(struct vm_fault *vmf)$/;"	f
filemap_fault	nommu.c	/^EXPORT_SYMBOL(filemap_fault);$/;"	v
filemap_fault	nommu.c	/^vm_fault_t filemap_fault(struct vm_fault *vmf)$/;"	f
filemap_fdatawait_keep_errors	filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait_keep_errors);$/;"	v
filemap_fdatawait_keep_errors	filemap.c	/^int filemap_fdatawait_keep_errors(struct address_space *mapping)$/;"	f
filemap_fdatawait_range	filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait_range);$/;"	v
filemap_fdatawait_range	filemap.c	/^int filemap_fdatawait_range(struct address_space *mapping, loff_t start_byte,$/;"	f
filemap_fdatawait_range_keep_errors	filemap.c	/^EXPORT_SYMBOL(filemap_fdatawait_range_keep_errors);$/;"	v
filemap_fdatawait_range_keep_errors	filemap.c	/^int filemap_fdatawait_range_keep_errors(struct address_space *mapping,$/;"	f
filemap_fdatawrite	filemap.c	/^EXPORT_SYMBOL(filemap_fdatawrite);$/;"	v
filemap_fdatawrite	filemap.c	/^int filemap_fdatawrite(struct address_space *mapping)$/;"	f
filemap_fdatawrite_range	filemap.c	/^EXPORT_SYMBOL(filemap_fdatawrite_range);$/;"	v
filemap_fdatawrite_range	filemap.c	/^int filemap_fdatawrite_range(struct address_space *mapping, loff_t start,$/;"	f
filemap_flush	filemap.c	/^EXPORT_SYMBOL(filemap_flush);$/;"	v
filemap_flush	filemap.c	/^int filemap_flush(struct address_space *mapping)$/;"	f
filemap_map_pages	filemap.c	/^EXPORT_SYMBOL(filemap_map_pages);$/;"	v
filemap_map_pages	filemap.c	/^void filemap_map_pages(struct vm_fault *vmf,$/;"	f
filemap_map_pages	nommu.c	/^EXPORT_SYMBOL(filemap_map_pages);$/;"	v
filemap_map_pages	nommu.c	/^void filemap_map_pages(struct vm_fault *vmf,$/;"	f
filemap_page_mkwrite	filemap.c	/^EXPORT_SYMBOL(filemap_page_mkwrite);$/;"	v
filemap_page_mkwrite	filemap.c	/^vm_fault_t filemap_page_mkwrite(struct vm_fault *vmf)$/;"	f
filemap_range_has_page	filemap.c	/^EXPORT_SYMBOL(filemap_range_has_page);$/;"	v
filemap_range_has_page	filemap.c	/^bool filemap_range_has_page(struct address_space *mapping,$/;"	f
filemap_write_and_wait	filemap.c	/^EXPORT_SYMBOL(filemap_write_and_wait);$/;"	v
filemap_write_and_wait	filemap.c	/^int filemap_write_and_wait(struct address_space *mapping)$/;"	f
filemap_write_and_wait_range	filemap.c	/^EXPORT_SYMBOL(filemap_write_and_wait_range);$/;"	v
filemap_write_and_wait_range	filemap.c	/^int filemap_write_and_wait_range(struct address_space *mapping,$/;"	f
filename	kasan/kasan.h	/^	const char *filename;$/;"	m	struct:kasan_source_location
fill_contig_page_info	vmstat.c	/^static void fill_contig_page_info(struct zone *zone,$/;"	f	file:
filter_irq_stacks	kasan/common.c	/^static inline unsigned int filter_irq_stacks(unsigned long *entries,$/;"	f	file:
finalise_ac	page_alloc.c	/^static inline void finalise_ac(gfp_t gfp_mask, struct alloc_context *ac)$/;"	f	file:
find_alloced_obj	zsmalloc.c	/^static unsigned long find_alloced_obj(struct size_class *class,$/;"	f	file:
find_and_get_object	kmemleak.c	/^static struct kmemleak_object *find_and_get_object(unsigned long ptr, int alias)$/;"	f	file:
find_and_remove_object	kmemleak.c	/^static struct kmemleak_object *find_and_remove_object(unsigned long ptr, int alias)$/;"	f	file:
find_biggest_section_pfn	memory_hotplug.c	/^static unsigned long find_biggest_section_pfn(int nid, struct zone *zone,$/;"	f	file:
find_early_kill_thread	memory-failure.c	/^static struct task_struct *find_early_kill_thread(struct task_struct *tsk)$/;"	f	file:
find_extend_vma	mmap.c	/^EXPORT_SYMBOL_GPL(find_extend_vma);$/;"	v
find_extend_vma	mmap.c	/^find_extend_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_extend_vma	nommu.c	/^struct vm_area_struct *find_extend_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_first_bad_addr	kasan/generic_report.c	/^void *find_first_bad_addr(void *addr, size_t size)$/;"	f
find_first_bad_addr	kasan/tags_report.c	/^void *find_first_bad_addr(void *addr, size_t size)$/;"	f
find_get_entries	filemap.c	/^unsigned find_get_entries(struct address_space *mapping,$/;"	f
find_get_entry	filemap.c	/^EXPORT_SYMBOL(find_get_entry);$/;"	v
find_get_entry	filemap.c	/^struct page *find_get_entry(struct address_space *mapping, pgoff_t offset)$/;"	f
find_get_mmu_notifier	mmu_notifier.c	/^find_get_mmu_notifier(struct mm_struct *mm, const struct mmu_notifier_ops *ops)$/;"	f	file:
find_get_pages_contig	filemap.c	/^EXPORT_SYMBOL(find_get_pages_contig);$/;"	v
find_get_pages_contig	filemap.c	/^unsigned find_get_pages_contig(struct address_space *mapping, pgoff_t index,$/;"	f
find_get_pages_range	filemap.c	/^unsigned find_get_pages_range(struct address_space *mapping, pgoff_t *start,$/;"	f
find_get_pages_range_tag	filemap.c	/^EXPORT_SYMBOL(find_get_pages_range_tag);$/;"	v
find_get_pages_range_tag	filemap.c	/^unsigned find_get_pages_range_tag(struct address_space *mapping, pgoff_t *index,$/;"	f
find_get_zspage	zsmalloc.c	/^static struct zspage *find_get_zspage(struct size_class *class)$/;"	f	file:
find_lock_entry	filemap.c	/^EXPORT_SYMBOL(find_lock_entry);$/;"	v
find_lock_entry	filemap.c	/^struct page *find_lock_entry(struct address_space *mapping, pgoff_t offset)$/;"	f
find_lock_task_mm	oom_kill.c	/^struct task_struct *find_lock_task_mm(struct task_struct *p)$/;"	f
find_max_nr_alloc	percpu-stats.c	/^static int find_max_nr_alloc(void)$/;"	f	file:
find_mergeable	slab_common.c	/^struct kmem_cache *find_mergeable(unsigned int size, unsigned int align,$/;"	f
find_mergeable_anon_vma	mmap.c	/^struct anon_vma *find_mergeable_anon_vma(struct vm_area_struct *vma)$/;"	f
find_mergeable_vma	ksm.c	/^static struct vm_area_struct *find_mergeable_vma(struct mm_struct *mm,$/;"	f	file:
find_min_pfn_for_node	page_alloc.c	/^static unsigned long __init find_min_pfn_for_node(int nid)$/;"	f	file:
find_min_pfn_with_active_regions	page_alloc.c	/^unsigned long __init find_min_pfn_with_active_regions(void)$/;"	f
find_next_best_node	page_alloc.c	/^static int find_next_best_node(int node, nodemask_t *used_node_mask)$/;"	f	file:
find_next_to_unuse	swapfile.c	/^static unsigned int find_next_to_unuse(struct swap_info_struct *si,$/;"	f	file:
find_smallest_section_pfn	memory_hotplug.c	/^static unsigned long find_smallest_section_pfn(int nid, struct zone *zone,$/;"	f	file:
find_success	swap_state.c	/^	unsigned long find_success;$/;"	m	struct:__anon23	file:
find_suitable_fallback	page_alloc.c	/^int find_suitable_fallback(struct free_area *area, unsigned int order,$/;"	f
find_total	swap_state.c	/^	unsigned long find_total;$/;"	m	struct:__anon23	file:
find_usable_zone_for_movable	page_alloc.c	/^static void __init find_usable_zone_for_movable(void)$/;"	f	file:
find_va_links	vmalloc.c	/^find_va_links(struct vmap_area *va,$/;"	f	file:
find_vm_area	vmalloc.c	/^struct vm_struct *find_vm_area(const void *addr)$/;"	f
find_vma	mmap.c	/^EXPORT_SYMBOL(find_vma);$/;"	v
find_vma	mmap.c	/^struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_vma	nommu.c	/^EXPORT_SYMBOL(find_vma);$/;"	v
find_vma	nommu.c	/^struct vm_area_struct *find_vma(struct mm_struct *mm, unsigned long addr)$/;"	f
find_vma_exact	nommu.c	/^static struct vm_area_struct *find_vma_exact(struct mm_struct *mm,$/;"	f	file:
find_vma_links	mmap.c	/^static int find_vma_links(struct mm_struct *mm, unsigned long addr,$/;"	f	file:
find_vma_prev	mmap.c	/^find_vma_prev(struct mm_struct *mm, unsigned long addr,$/;"	f
find_vmap_area	vmalloc.c	/^static struct vmap_area *find_vmap_area(unsigned long addr)$/;"	f	file:
find_vmap_lowest_linear_match	vmalloc.c	/^find_vmap_lowest_linear_match(unsigned long size,$/;"	f	file:
find_vmap_lowest_match	vmalloc.c	/^find_vmap_lowest_match(unsigned long size,$/;"	f	file:
find_vmap_lowest_match_check	vmalloc.c	/^find_vmap_lowest_match_check(unsigned long size)$/;"	f	file:
find_zone_movable_pfns_for_nodes	page_alloc.c	/^static void __init find_zone_movable_pfns_for_nodes(void)$/;"	f	file:
finish_fault	memory.c	/^vm_fault_t finish_fault(struct vm_fault *vmf)$/;"	f
finish_mkwrite_fault	memory.c	/^vm_fault_t finish_mkwrite_fault(struct vm_fault *vmf)$/;"	f
first_bad_addr	kasan/kasan.h	/^	const void *first_bad_addr;$/;"	m	struct:kasan_access_info
first_chunks	z3fold.c	/^	unsigned short first_chunks;$/;"	m	struct:z3fold_header	file:
first_chunks	zbud.c	/^	unsigned int first_chunks;$/;"	m	struct:zbud_header	file:
first_free	percpu-internal.h	/^	int                     first_free;     \/* block position of first free *\/$/;"	m	struct:pcpu_block_md
first_num	z3fold.c	/^	unsigned short first_num:2;$/;"	m	struct:z3fold_header	file:
first_online_pgdat	mmzone.c	/^struct pglist_data *first_online_pgdat(void)$/;"	f
first_page	zsmalloc.c	/^	struct page *first_page;$/;"	m	struct:zspage	typeref:struct:zspage::page	file:
first_present_section_nr	sparse.c	/^static inline unsigned long first_present_section_nr(void)$/;"	f	file:
first_se	swapfile.c	/^static inline struct swap_extent *first_se(struct swap_info_struct *sis)$/;"	f	file:
fit_type	vmalloc.c	/^enum fit_type {$/;"	g	file:
fix_fullness_group	zsmalloc.c	/^static enum fullness_group fix_fullness_group(struct size_class *class,$/;"	f	file:
fixup_objfreelist_debug	slab.c	/^static inline void fixup_objfreelist_debug(struct kmem_cache *cachep,$/;"	f	file:
fixup_red_left	slub.c	/^void *fixup_red_left(struct kmem_cache *s, void *p)$/;"	f
fixup_slab_list	slab.c	/^static inline void fixup_slab_list(struct kmem_cache *cachep,$/;"	f	file:
fixup_user_fault	gup.c	/^EXPORT_SYMBOL_GPL(fixup_user_fault);$/;"	v
fixup_user_fault	gup.c	/^int fixup_user_fault(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
flags	gup_benchmark.c	/^	__u32 flags;$/;"	m	struct:gup_benchmark	file:
flags	hmm.c	/^	unsigned int		flags;$/;"	m	struct:hmm_vma_walk	file:
flags	kmemleak.c	/^	unsigned int flags;		\/* object status flags *\/$/;"	m	struct:kmemleak_object	file:
flags	memcontrol.c	/^	unsigned long flags;$/;"	m	struct:memcg_stock_pcp	file:
flags	memcontrol.c	/^	unsigned long flags;$/;"	m	struct:move_charge_struct	file:
flags	memory-failure.c	/^	int flags;$/;"	m	struct:memory_failure_entry	file:
flags	mempolicy.c	/^	unsigned long flags;$/;"	m	struct:queue_pages	file:
flags	mmap.c	/^	unsigned long flags;$/;"	m	struct:mmap_arg_struct	file:
flags	nommu.c	/^	unsigned long flags;$/;"	m	struct:mmap_arg_struct	file:
flags	slab.h	/^	slab_flags_t flags;	\/* Active flags on the slab *\/$/;"	m	struct:kmem_cache
flush_all	slub.c	/^static void flush_all(struct kmem_cache *s)$/;"	f	file:
flush_all_zero_pkmaps	highmem.c	/^static void flush_all_zero_pkmaps(void)$/;"	f	file:
flush_cpu_slab	slub.c	/^static void flush_cpu_slab(void *d)$/;"	f	file:
flush_hugetlb_tlb_range	hugetlb.c	4550;"	d	file:
flush_memcg_workqueue	slab_common.c	/^static void flush_memcg_workqueue(struct kmem_cache *s)$/;"	f	file:
flush_slab	slub.c	/^static inline void flush_slab(struct kmem_cache *s, struct kmem_cache_cpu *c)$/;"	f	file:
flush_tlb_batched_pending	internal.h	/^static inline void flush_tlb_batched_pending(struct mm_struct *mm)$/;"	f
flush_tlb_batched_pending	rmap.c	/^void flush_tlb_batched_pending(struct mm_struct *mm)$/;"	f
fold_diff	vmstat.c	/^static int fold_diff(int *zone_diff, int *node_diff)$/;"	f	file:
fold_diff	vmstat.c	/^static int fold_diff(int *zone_diff, int *numa_diff, int *node_diff)$/;"	f	file:
follow_devmap_pmd	huge_memory.c	/^struct page *follow_devmap_pmd(struct vm_area_struct *vma, unsigned long addr,$/;"	f
follow_devmap_pud	huge_memory.c	/^struct page *follow_devmap_pud(struct vm_area_struct *vma, unsigned long addr,$/;"	f
follow_huge_addr	hugetlb.c	/^follow_huge_addr(struct mm_struct *mm, unsigned long address,$/;"	f
follow_huge_pd	hugetlb.c	/^follow_huge_pd(struct vm_area_struct *vma,$/;"	f
follow_huge_pgd	hugetlb.c	/^follow_huge_pgd(struct mm_struct *mm, unsigned long address, pgd_t *pgd, int flags)$/;"	f
follow_huge_pmd	hugetlb.c	/^follow_huge_pmd(struct mm_struct *mm, unsigned long address,$/;"	f
follow_huge_pud	hugetlb.c	/^follow_huge_pud(struct mm_struct *mm, unsigned long address,$/;"	f
follow_hugetlb_page	hugetlb.c	/^long follow_hugetlb_page(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
follow_p4d_mask	gup.c	/^static struct page *follow_p4d_mask(struct vm_area_struct *vma,$/;"	f	file:
follow_page	gup.c	/^struct page *follow_page(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_page	nommu.c	/^struct page *follow_page(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_page_context	gup.c	/^struct follow_page_context {$/;"	s	file:
follow_page_mask	gup.c	/^static struct page *follow_page_mask(struct vm_area_struct *vma,$/;"	f	file:
follow_page_pte	gup.c	/^static struct page *follow_page_pte(struct vm_area_struct *vma,$/;"	f	file:
follow_pfn	memory.c	/^EXPORT_SYMBOL(follow_pfn);$/;"	v
follow_pfn	memory.c	/^int follow_pfn(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_pfn	nommu.c	/^EXPORT_SYMBOL(follow_pfn);$/;"	v
follow_pfn	nommu.c	/^int follow_pfn(struct vm_area_struct *vma, unsigned long address,$/;"	f
follow_pfn_pte	gup.c	/^static int follow_pfn_pte(struct vm_area_struct *vma, unsigned long address,$/;"	f	file:
follow_phys	memory.c	/^int follow_phys(struct vm_area_struct *vma,$/;"	f
follow_pmd_mask	gup.c	/^static struct page *follow_pmd_mask(struct vm_area_struct *vma,$/;"	f	file:
follow_pte	memory.c	/^static inline int follow_pte(struct mm_struct *mm, unsigned long address,$/;"	f	file:
follow_pte_pmd	memory.c	/^EXPORT_SYMBOL(follow_pte_pmd);$/;"	v
follow_pte_pmd	memory.c	/^int follow_pte_pmd(struct mm_struct *mm, unsigned long address,$/;"	f
follow_pud_mask	gup.c	/^static struct page *follow_pud_mask(struct vm_area_struct *vma,$/;"	f	file:
follow_trans_huge_pmd	huge_memory.c	/^struct page *follow_trans_huge_pmd(struct vm_area_struct *vma,$/;"	f
footer	kmemleak-test.c	/^	long footer[25];$/;"	m	struct:test_node	file:
for_each_device_pfn	memremap.c	76;"	d	file:
for_each_frontswap_ops	frontswap.c	32;"	d	file:
for_each_kmem_cache_node	slab.h	637;"	d
for_each_mem_cgroup	memcontrol.c	244;"	d	file:
for_each_mem_cgroup_tree	memcontrol.c	239;"	d	file:
for_each_memcg_cache	slab.h	288;"	d
for_each_memcg_cache	slab.h	417;"	d
for_each_node_mask_to_alloc	hugetlb.c	1037;"	d	file:
for_each_node_mask_to_free	hugetlb.c	1043;"	d	file:
for_each_object	slub.c	313;"	d	file:
for_each_present_section_nr	sparse.c	211;"	d	file:
for_each_unbuddied_list	z3fold.c	191;"	d	file:
for_each_unbuddied_list	zbud.c	235;"	d	file:
force_page_cache_readahead	readahead.c	/^int force_page_cache_readahead(struct address_space *mapping, struct file *filp,$/;"	f
force_shm_swapin_readahead	madvise.c	/^static void force_shm_swapin_readahead(struct vm_area_struct *vma,$/;"	f	file:
frag_next	vmstat.c	/^static void *frag_next(struct seq_file *m, void *arg, loff_t *pos)$/;"	f	file:
frag_show	vmstat.c	/^static int frag_show(struct seq_file *m, void *arg)$/;"	f	file:
frag_show_print	vmstat.c	/^static void frag_show_print(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
frag_start	vmstat.c	/^static void *frag_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
frag_stop	vmstat.c	/^static void frag_stop(struct seq_file *m, void *arg)$/;"	f	file:
fragmentation_index	vmstat.c	/^int fragmentation_index(struct zone *zone, unsigned int order)$/;"	f
fragmentation_op	vmstat.c	/^static const struct seq_operations fragmentation_op = {$/;"	v	typeref:struct:seq_operations	file:
frame_vector_create	frame_vector.c	/^EXPORT_SYMBOL(frame_vector_create);$/;"	v
frame_vector_create	frame_vector.c	/^struct frame_vector *frame_vector_create(unsigned int nr_frames)$/;"	f
frame_vector_destroy	frame_vector.c	/^EXPORT_SYMBOL(frame_vector_destroy);$/;"	v
frame_vector_destroy	frame_vector.c	/^void frame_vector_destroy(struct frame_vector *vec)$/;"	f
frame_vector_to_pages	frame_vector.c	/^EXPORT_SYMBOL(frame_vector_to_pages);$/;"	v
frame_vector_to_pages	frame_vector.c	/^int frame_vector_to_pages(struct frame_vector *vec)$/;"	f
frame_vector_to_pfns	frame_vector.c	/^EXPORT_SYMBOL(frame_vector_to_pfns);$/;"	v
frame_vector_to_pfns	frame_vector.c	/^void frame_vector_to_pfns(struct frame_vector *vec)$/;"	f
free	vmalloc.c	/^	struct list_head free;$/;"	m	struct:vmap_block_queue	typeref:struct:vmap_block_queue::list_head	file:
free	vmalloc.c	/^	unsigned long free, dirty;$/;"	m	struct:vmap_block	file:
free_alien_cache	slab.c	/^static inline void free_alien_cache(struct alien_cache **ac_ptr)$/;"	f	file:
free_alien_cache	slab.c	/^static void free_alien_cache(struct alien_cache **alc_ptr)$/;"	f	file:
free_area_init	page_alloc.c	/^void __init free_area_init(unsigned long *zones_size)$/;"	f
free_area_init_core	page_alloc.c	/^static void __init free_area_init_core(struct pglist_data *pgdat)$/;"	f	file:
free_area_init_core_hotplug	page_alloc.c	/^void __ref free_area_init_core_hotplug(int nid)$/;"	f
free_area_init_node	page_alloc.c	/^void __init free_area_init_node(int nid, unsigned long *zones_size,$/;"	f
free_area_init_nodes	page_alloc.c	/^void __init free_area_init_nodes(unsigned long *max_zone_pfn)$/;"	f
free_block	slab.c	/^static void free_block(struct kmem_cache *cachep, void **objpp,$/;"	f	file:
free_blocks_suitable	vmstat.c	/^	unsigned long free_blocks_suitable;$/;"	m	struct:contig_page_info	file:
free_blocks_total	vmstat.c	/^	unsigned long free_blocks_total;$/;"	m	struct:contig_page_info	file:
free_bootmem_with_active_regions	page_alloc.c	/^void __init free_bootmem_with_active_regions(int nid, unsigned long max_low_pfn)$/;"	f
free_bytes	percpu-internal.h	/^	int			free_bytes;	\/* free bytes in the chunk *\/$/;"	m	struct:pcpu_chunk
free_calls	slub.c	/^SLAB_ATTR_RO(free_calls);$/;"	v
free_calls_show	slub.c	/^static ssize_t free_calls_show(struct kmem_cache *s, char *buf)$/;"	f	file:
free_cluster	swapfile.c	/^static void free_cluster(struct swap_info_struct *si, unsigned long idx)$/;"	f	file:
free_compound_page	page_alloc.c	/^void free_compound_page(struct page *page)$/;"	f
free_consistency_checks	slub.c	/^static inline int free_consistency_checks(struct kmem_cache *s,$/;"	f	file:
free_contig_range	page_alloc.c	/^void free_contig_range(unsigned long pfn, unsigned int nr_pages)$/;"	f
free_debug_processing	slub.c	/^static inline int free_debug_processing($/;"	f	file:
free_debug_processing	slub.c	/^static noinline int free_debug_processing($/;"	f	file:
free_gigantic_page	hugetlb.c	/^static inline void free_gigantic_page(struct page *page, unsigned int order) { }$/;"	f	file:
free_gigantic_page	hugetlb.c	/^static void free_gigantic_page(struct page *page, unsigned int order)$/;"	f	file:
free_handle	page_owner.c	/^	depot_stack_handle_t free_handle;$/;"	m	struct:page_owner	file:
free_handle	z3fold.c	/^static inline void free_handle(unsigned long handle)$/;"	f	file:
free_highmem_page	page_alloc.c	/^void free_highmem_page(struct page *page)$/;"	f
free_hpage_workfn	hugetlb.c	/^static void free_hpage_workfn(struct work_struct *work)$/;"	f	file:
free_huge_page	hugetlb.c	/^void free_huge_page(struct page *page)$/;"	f
free_hugepages	hugetlb.c	/^HSTATE_ATTR_RO(free_hugepages);$/;"	v
free_hugepages_show	hugetlb.c	/^static ssize_t free_hugepages_show(struct kobject *kobj,$/;"	f	file:
free_kmem_cache_nodes	slub.c	/^static void free_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
free_limit	slab.h	/^	unsigned int free_limit;$/;"	m	struct:kmem_cache_node
free_list	vmalloc.c	/^	struct list_head free_list;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
free_loc_track	slub.c	/^static void free_loc_track(struct loc_track *t)$/;"	f	file:
free_low_memory_core_early	memblock.c	/^static unsigned long __init free_low_memory_core_early(void)$/;"	f	file:
free_map_bootmem	sparse.c	/^static void free_map_bootmem(struct page *memmap)$/;"	f	file:
free_mem_cgroup_per_node_info	memcontrol.c	/^static void free_mem_cgroup_per_node_info(struct mem_cgroup *memcg, int node)$/;"	f	file:
free_memcg_params	slab_common.c	/^static void free_memcg_params(struct rcu_head *rcu)$/;"	f	file:
free_mm_slot	khugepaged.c	/^static inline void free_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
free_mm_slot	ksm.c	/^static inline void free_mm_slot(struct mm_slot *mm_slot)$/;"	f	file:
free_object_rcu	kmemleak.c	/^static void free_object_rcu(struct rcu_head *rcu)$/;"	f	file:
free_objects	slab.h	/^	unsigned long free_objects;$/;"	m	struct:kmem_cache_node
free_one_page	page_alloc.c	/^static void free_one_page(struct zone *zone,$/;"	f	file:
free_p4d_range	memory.c	/^static inline void free_p4d_range(struct mmu_gather *tlb, pgd_t *pgd,$/;"	f	file:
free_page_and_swap_cache	swap_state.c	/^void free_page_and_swap_cache(struct page *page)$/;"	f
free_page_ext	page_ext.c	/^static void free_page_ext(void *addr)$/;"	f	file:
free_page_series	nommu.c	/^static void free_page_series(unsigned long from, unsigned long to)$/;"	f	file:
free_pages	page_alloc.c	/^EXPORT_SYMBOL(free_pages);$/;"	v
free_pages	page_alloc.c	/^void free_pages(unsigned long addr, unsigned int order)$/;"	f
free_pages	vmstat.c	/^	unsigned long free_pages;$/;"	m	struct:contig_page_info	file:
free_pages_and_swap_cache	swap_state.c	/^void free_pages_and_swap_cache(struct page **pages, int nr)$/;"	f
free_pages_check	page_alloc.c	/^static inline int free_pages_check(struct page *page)$/;"	f	file:
free_pages_check_bad	page_alloc.c	/^static void free_pages_check_bad(struct page *page)$/;"	f	file:
free_pages_exact	page_alloc.c	/^EXPORT_SYMBOL(free_pages_exact);$/;"	v
free_pages_exact	page_alloc.c	/^void free_pages_exact(void *virt, size_t size)$/;"	f
free_pages_prepare	page_alloc.c	/^static __always_inline bool free_pages_prepare(struct page *page,$/;"	f	file:
free_pages_prezeroed	page_alloc.c	/^static inline bool free_pages_prezeroed(void)$/;"	f	file:
free_pages_work	z3fold.c	/^static void free_pages_work(struct work_struct *w)$/;"	f	file:
free_partial	slub.c	/^static void free_partial(struct kmem_cache *s, struct kmem_cache_node *n)$/;"	f	file:
free_pcp_prepare	page_alloc.c	/^static bool free_pcp_prepare(struct page *page)$/;"	f	file:
free_pcppages_bulk	page_alloc.c	/^static void free_pcppages_bulk(struct zone *zone, int count,$/;"	f	file:
free_percpu	percpu.c	/^EXPORT_SYMBOL_GPL(free_percpu);$/;"	v
free_percpu	percpu.c	/^void free_percpu(void __percpu *ptr)$/;"	f
free_pfn	internal.h	/^	unsigned long free_pfn;		\/* isolate_freepages search base *\/$/;"	m	struct:compact_control
free_pgd_range	memory.c	/^void free_pgd_range(struct mmu_gather *tlb,$/;"	f
free_pgtables	memory.c	/^void free_pgtables(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
free_pmd_range	memory.c	/^static inline void free_pmd_range(struct mmu_gather *tlb, pud_t *pud,$/;"	f	file:
free_pointer_tag	kasan/kasan.h	/^	u8 free_pointer_tag[KASAN_NR_FREE_STACKS];$/;"	m	struct:kasan_alloc_meta
free_pool_huge_page	hugetlb.c	/^static int free_pool_huge_page(struct hstate *h, nodemask_t *nodes_allowed,$/;"	f	file:
free_prealloced_shrinker	vmscan.c	/^void free_prealloced_shrinker(struct shrinker *shrinker)$/;"	f
free_pte_range	memory.c	/^static void free_pte_range(struct mmu_gather *tlb, pmd_t *pmd,$/;"	f	file:
free_pud_range	memory.c	/^static inline void free_pud_range(struct mmu_gather *tlb, p4d_t *p4d,$/;"	f	file:
free_reserved_area	page_alloc.c	/^unsigned long free_reserved_area(void *start, void *end, int poison, const char *s)$/;"	f
free_rmap_item	ksm.c	/^static inline void free_rmap_item(struct rmap_item *rmap_item)$/;"	f	file:
free_slab	slub.c	/^static void free_slab(struct kmem_cache *s, struct page *page)$/;"	f	file:
free_slabs	slab.h	/^	unsigned long free_slabs;	\/* length of free slab list only *\/$/;"	m	struct:kmem_cache_node
free_slot_cache	swap_slots.c	/^static int free_slot_cache(unsigned int cpu)$/;"	f	file:
free_stable_node	ksm.c	/^static inline void free_stable_node(struct stable_node *stable_node)$/;"	f	file:
free_stable_node_chain	ksm.c	/^static inline void free_stable_node_chain(struct stable_node *chain,$/;"	f	file:
free_swap_and_cache	swapfile.c	/^int free_swap_and_cache(swp_entry_t entry)$/;"	f
free_swap_cache	swap_state.c	/^static inline void free_swap_cache(struct page *page)$/;"	f	file:
free_swap_count_continuations	swapfile.c	/^static void free_swap_count_continuations(struct swap_info_struct *si)$/;"	f	file:
free_swap_slot	swap_slots.c	/^int free_swap_slot(swp_entry_t entry)$/;"	f
free_tail_pages_check	page_alloc.c	/^static int free_tail_pages_check(struct page *head_page, struct page *page)$/;"	f	file:
free_the_page	page_alloc.c	/^static inline void free_the_page(struct page *page, unsigned int order)$/;"	f	file:
free_touched	slab.h	/^	int free_touched;		\/* updated without locking *\/$/;"	m	struct:kmem_cache_node
free_track	kasan/kasan.h	/^	struct kasan_track free_track[KASAN_NR_FREE_STACKS];$/;"	m	struct:kasan_alloc_meta	typeref:struct:kasan_alloc_meta::kasan_track
free_track_idx	kasan/kasan.h	/^	u8 free_track_idx;$/;"	m	struct:kasan_alloc_meta
free_transhuge_page	huge_memory.c	/^void free_transhuge_page(struct page *page)$/;"	f
free_unmap_vmap_area	vmalloc.c	/^static void free_unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
free_unref_page	page_alloc.c	/^void free_unref_page(struct page *page)$/;"	f
free_unref_page_commit	page_alloc.c	/^static void free_unref_page_commit(struct page *page, unsigned long pfn)$/;"	f	file:
free_unref_page_list	page_alloc.c	/^void free_unref_page_list(struct list_head *list)$/;"	f
free_unref_page_prepare	page_alloc.c	/^static bool free_unref_page_prepare(struct page *page, unsigned long pfn)$/;"	f	file:
free_vm_area	nommu.c	/^EXPORT_SYMBOL_GPL(free_vm_area);$/;"	v
free_vm_area	nommu.c	/^void free_vm_area(struct vm_struct *area)$/;"	f
free_vm_area	vmalloc.c	/^EXPORT_SYMBOL_GPL(free_vm_area);$/;"	v
free_vm_area	vmalloc.c	/^void free_vm_area(struct vm_struct *area)$/;"	f
free_vmap_area	vmalloc.c	/^static void free_vmap_area(struct vmap_area *va)$/;"	f	file:
free_vmap_area_noflush	vmalloc.c	/^static void free_vmap_area_noflush(struct vmap_area *va)$/;"	f	file:
free_vmap_area_root	vmalloc.c	/^static struct rb_root free_vmap_area_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
free_vmap_block	vmalloc.c	/^static void free_vmap_block(struct vmap_block *vb)$/;"	f	file:
free_work	vmalloc.c	/^static void free_work(struct work_struct *w)$/;"	f	file:
free_work	zsmalloc.c	/^	struct work_struct free_work;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::work_struct	file:
free_z3fold_page	z3fold.c	/^static void free_z3fold_page(struct page *page, bool headless)$/;"	f	file:
free_zbud_page	zbud.c	/^static void free_zbud_page(struct zbud_header *zhdr)$/;"	f	file:
free_zspage	zsmalloc.c	/^static void free_zspage(struct zs_pool *pool, struct size_class *class,$/;"	f	file:
freelist	slub.c	/^	void *freelist;$/;"	m	struct:detached_freelist	file:
freelist_corrupted	slub.c	/^static bool freelist_corrupted(struct kmem_cache *s, struct page *page,$/;"	f	file:
freelist_dereference	slub.c	/^static inline void *freelist_dereference(const struct kmem_cache *s,$/;"	f	file:
freelist_idx_t	slab.c	/^typedef unsigned char freelist_idx_t;$/;"	t	file:
freelist_idx_t	slab.c	/^typedef unsigned short freelist_idx_t;$/;"	t	file:
freelist_init_state	slab.c	/^union freelist_init_state {$/;"	u	file:
freelist_ptr	slub.c	/^static inline void *freelist_ptr(const struct kmem_cache *s, void *ptr,$/;"	f	file:
freelist_randomize	slab_common.c	/^static void freelist_randomize(struct rnd_state *state, unsigned int *list,$/;"	f	file:
freelist_scan_limit	compaction.c	/^freelist_scan_limit(struct compact_control *cc)$/;"	f	file:
freelist_state_initialize	slab.c	/^static bool freelist_state_initialize(union freelist_init_state *state,$/;"	f	file:
freeobj	zsmalloc.c	/^	unsigned int freeobj;$/;"	m	struct:zspage	file:
freepages	internal.h	/^	struct list_head freepages;	\/* List of free pages to migrate to *\/$/;"	m	struct:compact_control	typeref:struct:compact_control::list_head
from	hugetlb.c	/^	long from;$/;"	m	struct:file_region	file:
from	memcontrol.c	/^	struct mem_cgroup *from;$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::mem_cgroup	file:
frontswap_curr_pages	frontswap.c	/^EXPORT_SYMBOL(frontswap_curr_pages);$/;"	v
frontswap_curr_pages	frontswap.c	/^unsigned long frontswap_curr_pages(void)$/;"	f
frontswap_enabled_key	frontswap.c	/^DEFINE_STATIC_KEY_FALSE(frontswap_enabled_key);$/;"	v
frontswap_failed_stores	frontswap.c	/^static u64 frontswap_failed_stores;$/;"	v	file:
frontswap_invalidates	frontswap.c	/^static u64 frontswap_invalidates;$/;"	v	file:
frontswap_loads	frontswap.c	/^static u64 frontswap_loads;$/;"	v	file:
frontswap_register_ops	frontswap.c	/^EXPORT_SYMBOL(frontswap_register_ops);$/;"	v
frontswap_register_ops	frontswap.c	/^void frontswap_register_ops(struct frontswap_ops *ops)$/;"	f
frontswap_shrink	frontswap.c	/^EXPORT_SYMBOL(frontswap_shrink);$/;"	v
frontswap_shrink	frontswap.c	/^void frontswap_shrink(unsigned long target_pages)$/;"	f
frontswap_succ_stores	frontswap.c	/^static u64 frontswap_succ_stores;$/;"	v	file:
frontswap_tmem_exclusive_gets	frontswap.c	/^EXPORT_SYMBOL(frontswap_tmem_exclusive_gets);$/;"	v
frontswap_tmem_exclusive_gets	frontswap.c	/^void frontswap_tmem_exclusive_gets(bool enable)$/;"	f
frontswap_writethrough	frontswap.c	/^EXPORT_SYMBOL(frontswap_writethrough);$/;"	v
frontswap_writethrough	frontswap.c	/^void frontswap_writethrough(bool enable)$/;"	f
fs_reclaim_acquire	page_alloc.c	/^EXPORT_SYMBOL_GPL(fs_reclaim_acquire);$/;"	v
fs_reclaim_acquire	page_alloc.c	/^void fs_reclaim_acquire(gfp_t gfp_mask)$/;"	f
fs_reclaim_release	page_alloc.c	/^EXPORT_SYMBOL_GPL(fs_reclaim_release);$/;"	v
fs_reclaim_release	page_alloc.c	/^void fs_reclaim_release(gfp_t gfp_mask)$/;"	f
full	slab.h	/^	struct list_head full;$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::list_head
full_scans	ksm.c	/^KSM_ATTR_RO(full_scans);$/;"	v
full_scans_attr	khugepaged.c	/^static struct kobj_attribute full_scans_attr =$/;"	v	typeref:struct:kobj_attribute	file:
full_scans_show	khugepaged.c	/^static ssize_t full_scans_show(struct kobject *kobj,$/;"	f	file:
full_scans_show	ksm.c	/^static ssize_t full_scans_show(struct kobject *kobj,$/;"	f	file:
fullness	zsmalloc.c	/^		unsigned int fullness:FULLNESS_BITS;$/;"	m	struct:zspage::__anon22	file:
fullness_group	zsmalloc.c	/^enum fullness_group {$/;"	g	file:
fullness_list	zsmalloc.c	/^	struct list_head fullness_list[NR_ZS_FULLNESS];$/;"	m	struct:size_class	typeref:struct:size_class::list_head	file:
fullness_threshold_frac	zsmalloc.c	/^static const int fullness_threshold_frac = 4;$/;"	v	file:
gather_bootmem_prealloc	hugetlb.c	/^static void __init gather_bootmem_prealloc(void)$/;"	f	file:
gather_surplus_pages	hugetlb.c	/^static int gather_surplus_pages(struct hstate *h, int delta)$/;"	f	file:
gdtc	page-writeback.c	/^	struct dirty_throttle_control *gdtc;	\/* only set in memcg dtc's *\/$/;"	m	struct:dirty_throttle_control	typeref:struct:dirty_throttle_control::dirty_throttle_control	file:
generic_access_phys	memory.c	/^EXPORT_SYMBOL_GPL(generic_access_phys);$/;"	v
generic_access_phys	memory.c	/^int generic_access_phys(struct vm_area_struct *vma, unsigned long addr,$/;"	f
generic_copy_file_checks	filemap.c	/^int generic_copy_file_checks(struct file *file_in, loff_t pos_in,$/;"	f
generic_error_remove_page	truncate.c	/^EXPORT_SYMBOL(generic_error_remove_page);$/;"	v
generic_error_remove_page	truncate.c	/^int generic_error_remove_page(struct address_space *mapping, struct page *page)$/;"	f
generic_fadvise	fadvise.c	/^EXPORT_SYMBOL(generic_fadvise);$/;"	v
generic_fadvise	fadvise.c	/^int generic_fadvise(struct file *file, loff_t offset, loff_t len, int advice)$/;"	f
generic_file_buffered_read	filemap.c	/^static ssize_t generic_file_buffered_read(struct kiocb *iocb,$/;"	f	file:
generic_file_direct_write	filemap.c	/^EXPORT_SYMBOL(generic_file_direct_write);$/;"	v
generic_file_direct_write	filemap.c	/^generic_file_direct_write(struct kiocb *iocb, struct iov_iter *from)$/;"	f
generic_file_mmap	filemap.c	/^EXPORT_SYMBOL(generic_file_mmap);$/;"	v
generic_file_mmap	filemap.c	/^int generic_file_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
generic_file_read_iter	filemap.c	/^EXPORT_SYMBOL(generic_file_read_iter);$/;"	v
generic_file_read_iter	filemap.c	/^generic_file_read_iter(struct kiocb *iocb, struct iov_iter *iter)$/;"	f
generic_file_readonly_mmap	filemap.c	/^EXPORT_SYMBOL(generic_file_readonly_mmap);$/;"	v
generic_file_readonly_mmap	filemap.c	/^int generic_file_readonly_mmap(struct file * file, struct vm_area_struct * vma)$/;"	f
generic_file_readonly_mmap	filemap.c	/^int generic_file_readonly_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f
generic_file_rw_checks	filemap.c	/^int generic_file_rw_checks(struct file *file_in, struct file *file_out)$/;"	f
generic_file_vm_ops	filemap.c	/^const struct vm_operations_struct generic_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
generic_file_vm_ops	nommu.c	/^const struct vm_operations_struct generic_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
generic_file_write_iter	filemap.c	/^EXPORT_SYMBOL(generic_file_write_iter);$/;"	v
generic_file_write_iter	filemap.c	/^ssize_t generic_file_write_iter(struct kiocb *iocb, struct iov_iter *from)$/;"	f
generic_max_swapfile_size	swapfile.c	/^unsigned long generic_max_swapfile_size(void)$/;"	f
generic_online_page	memory_hotplug.c	/^static void generic_online_page(struct page *page, unsigned int order)$/;"	f	file:
generic_perform_write	filemap.c	/^EXPORT_SYMBOL(generic_perform_write);$/;"	v
generic_perform_write	filemap.c	/^ssize_t generic_perform_write(struct file *file,$/;"	f
generic_remap_checks	filemap.c	/^int generic_remap_checks(struct file *file_in, loff_t pos_in,$/;"	f
generic_swapfile_activate	page_io.c	/^int generic_swapfile_activate(struct swap_info_struct *sis,$/;"	f
generic_write_check_limits	filemap.c	/^static int generic_write_check_limits(struct file *file, loff_t pos,$/;"	f	file:
generic_write_checks	filemap.c	/^EXPORT_SYMBOL(generic_write_checks);$/;"	v
generic_write_checks	filemap.c	/^inline ssize_t generic_write_checks(struct kiocb *iocb, struct iov_iter *from)$/;"	f
generic_writepages	page-writeback.c	/^EXPORT_SYMBOL(generic_writepages);$/;"	v
generic_writepages	page-writeback.c	/^int generic_writepages(struct address_space *mapping,$/;"	f
get_address_stack_frame_info	kasan/report.c	/^static bool __must_check get_address_stack_frame_info(const void *addr,$/;"	f	file:
get_alloc_info	kasan/common.c	/^struct kasan_alloc_meta *get_alloc_info(struct kmem_cache *cache,$/;"	f
get_any_page	memory-failure.c	/^static int get_any_page(struct page *page, unsigned long pfn, int flags)$/;"	f	file:
get_any_partial	slub.c	/^static void *get_any_partial(struct kmem_cache *s, gfp_t flags,$/;"	f	file:
get_bug_type	kasan/generic_report.c	/^const char *get_bug_type(struct kasan_access_info *info)$/;"	f
get_bug_type	kasan/tags_report.c	/^const char *get_bug_type(struct kasan_access_info *info)$/;"	f
get_cmdline	util.c	/^int get_cmdline(struct task_struct *task, char *buffer, int buflen)$/;"	f
get_deferred_split_queue	huge_memory.c	/^static inline struct deferred_split *get_deferred_split_queue(struct page *page)$/;"	f	file:
get_delta_usec	gup_benchmark.c	/^	__u64 get_delta_usec;$/;"	m	struct:gup_benchmark	file:
get_dev_pagemap	memremap.c	/^EXPORT_SYMBOL_GPL(get_dev_pagemap);$/;"	v
get_dev_pagemap	memremap.c	/^struct dev_pagemap *get_dev_pagemap(unsigned long pfn,$/;"	f
get_dump_page	gup.c	/^struct page *get_dump_page(unsigned long addr)$/;"	f
get_entry	page_ext.c	/^static inline struct page_ext *get_entry(void *base, unsigned long index)$/;"	f	file:
get_first_obj_offset	zsmalloc.c	/^static inline int get_first_obj_offset(struct page *page)$/;"	f	file:
get_first_page	zsmalloc.c	/^static inline struct page *get_first_page(struct zspage *zspage)$/;"	f	file:
get_first_slab	slab.c	/^static struct page *get_first_slab(struct kmem_cache_node *n, bool pfmemalloc)$/;"	f	file:
get_free_info	kasan/common.c	/^struct kasan_free_meta *get_free_info(struct kmem_cache *cache,$/;"	f
get_free_obj	slab.c	/^static inline freelist_idx_t get_free_obj(struct page *page, unsigned int idx)$/;"	f	file:
get_freelist	slub.c	/^static inline void *get_freelist(struct kmem_cache *s, struct page *page)$/;"	f	file:
get_freeobj	zsmalloc.c	/^static inline unsigned int get_freeobj(struct zspage *zspage)$/;"	f	file:
get_freepointer	slub.c	/^static inline void *get_freepointer(struct kmem_cache *s, void *object)$/;"	f	file:
get_freepointer_safe	slub.c	/^static inline void *get_freepointer_safe(struct kmem_cache *s, void *object)$/;"	f	file:
get_fullness_group	zsmalloc.c	/^static enum fullness_group get_fullness_group(struct size_class *class,$/;"	f	file:
get_gate_page	gup.c	/^static int get_gate_page(struct mm_struct *mm, unsigned long address,$/;"	f	file:
get_huge_zero_page	huge_memory.c	/^static struct page *get_huge_zero_page(void)$/;"	f	file:
get_hwpoison_page	memory-failure.c	/^EXPORT_SYMBOL_GPL(get_hwpoison_page);$/;"	v
get_hwpoison_page	memory-failure.c	/^int get_hwpoison_page(struct page *page)$/;"	f
get_init_ra_size	readahead.c	/^static unsigned long get_init_ra_size(unsigned long size, unsigned long max)$/;"	f	file:
get_kernel_page	swap.c	/^EXPORT_SYMBOL_GPL(get_kernel_page);$/;"	v
get_kernel_page	swap.c	/^int get_kernel_page(unsigned long start, int write, struct page **pages)$/;"	f
get_kernel_pages	swap.c	/^EXPORT_SYMBOL_GPL(get_kernel_pages);$/;"	v
get_kernel_pages	swap.c	/^int get_kernel_pages(const struct kvec *kiov, int nr_segs, int write,$/;"	f
get_kpfn_nid	ksm.c	/^static inline int get_kpfn_nid(unsigned long kpfn)$/;"	f	file:
get_ksm_page	ksm.c	/^static struct page *get_ksm_page(struct stable_node *stable_node,$/;"	f	file:
get_ksm_page_flags	ksm.c	/^enum get_ksm_page_flags {$/;"	g	file:
get_map	slub.c	/^static void get_map(struct kmem_cache *s, struct page *page, unsigned long *map)$/;"	f	file:
get_mctgt_type	memcontrol.c	/^static enum mc_target_type get_mctgt_type(struct vm_area_struct *vma,$/;"	f	file:
get_mctgt_type_thp	memcontrol.c	/^static enum mc_target_type get_mctgt_type_thp(struct vm_area_struct *vma,$/;"	f	file:
get_mctgt_type_thp	memcontrol.c	/^static inline enum mc_target_type get_mctgt_type_thp(struct vm_area_struct *vma,$/;"	f	file:
get_mem_cgroup_from_current	memcontrol.c	/^static __always_inline struct mem_cgroup *get_mem_cgroup_from_current(void)$/;"	f	file:
get_mem_cgroup_from_mm	memcontrol.c	/^EXPORT_SYMBOL(get_mem_cgroup_from_mm);$/;"	v
get_mem_cgroup_from_mm	memcontrol.c	/^struct mem_cgroup *get_mem_cgroup_from_mm(struct mm_struct *mm)$/;"	f
get_mem_cgroup_from_page	memcontrol.c	/^EXPORT_SYMBOL(get_mem_cgroup_from_page);$/;"	v
get_mem_cgroup_from_page	memcontrol.c	/^struct mem_cgroup *get_mem_cgroup_from_page(struct page *page)$/;"	f
get_mergeable_page	ksm.c	/^static struct page *get_mergeable_page(struct rmap_item *rmap_item)$/;"	f	file:
get_mm_slot	khugepaged.c	/^static struct mm_slot *get_mm_slot(struct mm_struct *mm)$/;"	f	file:
get_mm_slot	ksm.c	/^static struct mm_slot *get_mm_slot(struct mm_struct *mm)$/;"	f	file:
get_next_page	zsmalloc.c	/^static struct page *get_next_page(struct page *page)$/;"	f	file:
get_next_pkmap_nr	highmem.c	/^static inline unsigned int get_next_pkmap_nr(unsigned int color)$/;"	f	file:
get_next_ra_size	readahead.c	/^static unsigned long get_next_ra_size(struct file_ra_state *ra,$/;"	f	file:
get_next_rmap_item	ksm.c	/^static struct rmap_item *get_next_rmap_item(struct mm_slot *mm_slot,$/;"	f	file:
get_node	slab.h	/^static inline struct kmem_cache_node *get_node(struct kmem_cache *s, int node)$/;"	f
get_nodes	mempolicy.c	/^static int get_nodes(nodemask_t *nodes, const unsigned long __user *nmask,$/;"	f	file:
get_object	kmemleak.c	/^static int get_object(struct kmemleak_object *object)$/;"	f	file:
get_old_pmd	mremap.c	/^static pmd_t *get_old_pmd(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
get_online_mems	memory_hotplug.c	/^void get_online_mems(void)$/;"	f
get_page_bootmem	memory_hotplug.c	/^void get_page_bootmem(unsigned long info,  struct page *page,$/;"	f
get_page_from_freelist	page_alloc.c	/^get_page_from_freelist(gfp_t gfp_mask, unsigned int order, int alloc_flags,$/;"	f	file:
get_page_owner	page_owner.c	/^static inline struct page_owner *get_page_owner(struct page_ext *page_ext)$/;"	f	file:
get_pageblock_bitmap	page_alloc.c	/^static inline unsigned long *get_pageblock_bitmap(struct page *page,$/;"	f	file:
get_pages_per_zspage	zsmalloc.c	/^static int get_pages_per_zspage(int class_size)$/;"	f	file:
get_partial	slub.c	/^static void *get_partial(struct kmem_cache *s, gfp_t flags, int node,$/;"	f	file:
get_partial_node	slub.c	/^static void *get_partial_node(struct kmem_cache *s, struct kmem_cache_node *n,$/;"	f	file:
get_pcppage_migratetype	page_alloc.c	/^static inline int get_pcppage_migratetype(struct page *page)$/;"	f	file:
get_pfn_range_for_nid	page_alloc.c	/^void __init get_pfn_range_for_nid(unsigned int nid,$/;"	f
get_pfnblock_flags_mask	page_alloc.c	/^unsigned long get_pfnblock_flags_mask(struct page *page, unsigned long pfn,$/;"	f
get_pfnblock_migratetype	page_alloc.c	/^static __always_inline int get_pfnblock_migratetype(struct page *page, unsigned long pfn)$/;"	f	file:
get_pkmap_color	highmem.c	/^static inline unsigned int get_pkmap_color(struct page *page)$/;"	f	file:
get_pkmap_color	highmem.c	62;"	d	file:
get_pkmap_entries_count	highmem.c	/^static inline int get_pkmap_entries_count(unsigned int color)$/;"	f	file:
get_pkmap_wait_queue_head	highmem.c	/^static inline wait_queue_head_t *get_pkmap_wait_queue_head(unsigned int color)$/;"	f	file:
get_policy_nodemask	mempolicy.c	/^static void get_policy_nodemask(struct mempolicy *p, nodemask_t *nodes)$/;"	f	file:
get_scan_count	vmscan.c	/^static void get_scan_count(struct lruvec *lruvec, struct mem_cgroup *memcg,$/;"	f	file:
get_shadow_bug_type	kasan/generic_report.c	/^static const char *get_shadow_bug_type(struct kasan_access_info *info)$/;"	f	file:
get_size_class_index	zsmalloc.c	/^static int get_size_class_index(int size)$/;"	f	file:
get_slabinfo	slab.c	/^void get_slabinfo(struct kmem_cache *cachep, struct slabinfo *sinfo)$/;"	f
get_slabinfo	slub.c	/^void get_slabinfo(struct kmem_cache *s, struct slabinfo *sinfo)$/;"	f
get_subtree_max_size	vmalloc.c	/^get_subtree_max_size(struct rb_node *node)$/;"	f	file:
get_swap_bio	page_io.c	/^static struct bio *get_swap_bio(gfp_t gfp_flags,$/;"	f	file:
get_swap_device	swapfile.c	/^struct swap_info_struct *get_swap_device(swp_entry_t entry)$/;"	f
get_swap_page	swap_slots.c	/^swp_entry_t get_swap_page(struct page *page)$/;"	f
get_swap_page_of_type	swapfile.c	/^swp_entry_t get_swap_page_of_type(int type)$/;"	f
get_swap_pages	swapfile.c	/^int get_swap_pages(int n_goal, swp_entry_t swp_entries[], int entry_size)$/;"	f
get_tag	kasan/kasan.h	205;"	d
get_task_policy	mempolicy.c	/^struct mempolicy *get_task_policy(struct task_struct *p)$/;"	f
get_track	slub.c	/^static struct track *get_track(struct kmem_cache *s, void *object,$/;"	f	file:
get_unmapped_area	mmap.c	/^EXPORT_SYMBOL(get_unmapped_area);$/;"	v
get_unmapped_area	mmap.c	/^get_unmapped_area(struct file *file, unsigned long addr, unsigned long len,$/;"	f
get_user_pages	gup.c	/^EXPORT_SYMBOL(get_user_pages);$/;"	v
get_user_pages	gup.c	/^long get_user_pages(unsigned long start, unsigned long nr_pages,$/;"	f
get_user_pages_fast	gup.c	/^EXPORT_SYMBOL_GPL(get_user_pages_fast);$/;"	v
get_user_pages_fast	gup.c	/^int get_user_pages_fast(unsigned long start, int nr_pages,$/;"	f
get_user_pages_locked	gup.c	/^EXPORT_SYMBOL(get_user_pages_locked);$/;"	v
get_user_pages_locked	gup.c	/^long get_user_pages_locked(unsigned long start, unsigned long nr_pages,$/;"	f
get_user_pages_remote	gup.c	/^EXPORT_SYMBOL(get_user_pages_remote);$/;"	v
get_user_pages_remote	gup.c	/^long get_user_pages_remote(struct task_struct *tsk, struct mm_struct *mm,$/;"	f
get_user_pages_unlocked	gup.c	/^EXPORT_SYMBOL(get_user_pages_unlocked);$/;"	v
get_user_pages_unlocked	gup.c	/^long get_user_pages_unlocked(unsigned long start, unsigned long nr_pages,$/;"	f
get_va_next_sibling	vmalloc.c	/^get_va_next_sibling(struct rb_node *parent, struct rb_node **link)$/;"	f	file:
get_vaddr_frames	frame_vector.c	/^EXPORT_SYMBOL(get_vaddr_frames);$/;"	v
get_vaddr_frames	frame_vector.c	/^int get_vaddr_frames(unsigned long start, unsigned int nr_frames,$/;"	f
get_valid_first_slab	slab.c	/^static noinline struct page *get_valid_first_slab(struct kmem_cache_node *n,$/;"	f	file:
get_valid_node_allowed	hugetlb.c	/^static int get_valid_node_allowed(int nid, nodemask_t *nodes_allowed)$/;"	f	file:
get_vm_area	vmalloc.c	/^struct vm_struct *get_vm_area(unsigned long size, unsigned long flags)$/;"	f
get_vm_area_caller	vmalloc.c	/^struct vm_struct *get_vm_area_caller(unsigned long size, unsigned long flags,$/;"	f
get_vma_policy	mempolicy.c	/^static struct mempolicy *get_vma_policy(struct vm_area_struct *vma,$/;"	f	file:
get_vma_private_data	hugetlb.c	/^static unsigned long get_vma_private_data(struct vm_area_struct *vma)$/;"	f	file:
get_wild_bug_type	kasan/generic_report.c	/^static const char *get_wild_bug_type(struct kasan_access_info *info)$/;"	f	file:
get_zeroed_page	page_alloc.c	/^EXPORT_SYMBOL(get_zeroed_page);$/;"	v
get_zeroed_page	page_alloc.c	/^unsigned long get_zeroed_page(gfp_t gfp_mask)$/;"	f
get_zspage	zsmalloc.c	/^static struct zspage *get_zspage(struct page *page)$/;"	f	file:
get_zspage_inuse	zsmalloc.c	/^static inline int get_zspage_inuse(struct zspage *zspage)$/;"	f	file:
get_zspage_mapping	zsmalloc.c	/^static void get_zspage_mapping(struct zspage *zspage,$/;"	f	file:
gfp_exact_node	slab.c	/^static inline gfp_t gfp_exact_node(gfp_t flags)$/;"	f	file:
gfp_kmemleak_mask	kmemleak.c	115;"	d	file:
gfp_mask	internal.h	/^	const gfp_t gfp_mask;		\/* gfp mask of a direct compactor *\/$/;"	m	struct:compact_control
gfp_mask	page_owner.c	/^	gfp_t gfp_mask;$/;"	m	struct:page_owner	file:
gfp_mask	vmscan.c	/^	gfp_t gfp_mask;$/;"	m	struct:scan_control	file:
gfp_pfmemalloc_allowed	page_alloc.c	/^bool gfp_pfmemalloc_allowed(gfp_t gfp_mask)$/;"	f
gfp_to_alloc_flags	page_alloc.c	/^gfp_to_alloc_flags(gfp_t gfp_mask)$/;"	f	file:
gfpflag_names	debug.c	/^const struct trace_print_flags gfpflag_names[] = {$/;"	v	typeref:struct:trace_print_flags
gid	shmem.c	/^	kgid_t gid;$/;"	m	struct:shmem_options	file:
global_dirty_limits	page-writeback.c	/^void global_dirty_limits(unsigned long *pbackground, unsigned long *pdirty)$/;"	f
global_dirtyable_memory	page-writeback.c	/^static unsigned long global_dirtyable_memory(void)$/;"	f	file:
global_quarantine	kasan/quarantine.c	/^static struct qlist_head global_quarantine[QUARANTINE_BATCHES];$/;"	v	typeref:struct:qlist_head	file:
global_reclaim	vmscan.c	/^static bool global_reclaim(struct scan_control *sc)$/;"	f	file:
global_wb_domain	page-writeback.c	/^struct wb_domain global_wb_domain;$/;"	v	typeref:struct:wb_domain
grab_cache_page_write_begin	filemap.c	/^EXPORT_SYMBOL(grab_cache_page_write_begin);$/;"	v
grab_cache_page_write_begin	filemap.c	/^struct page *grab_cache_page_write_begin(struct address_space *mapping,$/;"	f
gray_list	kmemleak.c	/^	struct list_head gray_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::list_head	file:
gup_benchmark	gup_benchmark.c	/^struct gup_benchmark {$/;"	s	file:
gup_benchmark_fops	gup_benchmark.c	/^static const struct file_operations gup_benchmark_fops = {$/;"	v	typeref:struct:file_operations	file:
gup_benchmark_init	gup_benchmark.c	/^late_initcall(gup_benchmark_init);$/;"	v
gup_benchmark_init	gup_benchmark.c	/^static int gup_benchmark_init(void)$/;"	f	file:
gup_benchmark_ioctl	gup_benchmark.c	/^static long gup_benchmark_ioctl(struct file *filep, unsigned int cmd,$/;"	f	file:
gup_fast_permitted	gup.c	/^static bool gup_fast_permitted(unsigned long start, unsigned long end)$/;"	f	file:
gup_get_pte	gup.c	/^static inline pte_t gup_get_pte(pte_t *ptep)$/;"	f	file:
gup_huge_pd	gup.c	/^static inline int gup_huge_pd(hugepd_t hugepd, unsigned long addr,$/;"	f	file:
gup_huge_pd	gup.c	/^static int gup_huge_pd(hugepd_t hugepd, unsigned long addr,$/;"	f	file:
gup_huge_pgd	gup.c	/^static int gup_huge_pgd(pgd_t orig, pgd_t *pgdp, unsigned long addr,$/;"	f	file:
gup_huge_pmd	gup.c	/^static int gup_huge_pmd(pmd_t orig, pmd_t *pmdp, unsigned long addr,$/;"	f	file:
gup_huge_pud	gup.c	/^static int gup_huge_pud(pud_t orig, pud_t *pudp, unsigned long addr,$/;"	f	file:
gup_hugepte	gup.c	/^static int gup_hugepte(pte_t *ptep, unsigned long sz, unsigned long addr,$/;"	f	file:
gup_p4d_range	gup.c	/^static int gup_p4d_range(pgd_t pgd, unsigned long addr, unsigned long end,$/;"	f	file:
gup_pgd_range	gup.c	/^static inline void gup_pgd_range(unsigned long addr, unsigned long end,$/;"	f	file:
gup_pgd_range	gup.c	/^static void gup_pgd_range(unsigned long addr, unsigned long end,$/;"	f	file:
gup_pmd_range	gup.c	/^static int gup_pmd_range(pud_t pud, unsigned long addr, unsigned long end,$/;"	f	file:
gup_pte_range	gup.c	/^static int gup_pte_range(pmd_t pmd, unsigned long addr, unsigned long end,$/;"	f	file:
gup_pud_range	gup.c	/^static int gup_pud_range(p4d_t p4d, unsigned long addr, unsigned long end,$/;"	f	file:
handle	page_owner.c	/^	depot_stack_handle_t handle;$/;"	m	struct:page_owner	file:
handle	zsmalloc.c	/^		unsigned long handle;$/;"	m	union:link_free::__anon21	file:
handle	zswap.c	/^		unsigned long handle;$/;"	m	union:zswap_entry::__anon12	file:
handle_cachep	zsmalloc.c	/^	struct kmem_cache *handle_cachep;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::kmem_cache	file:
handle_mm_fault	memory.c	/^EXPORT_SYMBOL_GPL(handle_mm_fault);$/;"	v
handle_mm_fault	memory.c	/^vm_fault_t handle_mm_fault(struct vm_area_struct *vma, unsigned long address,$/;"	f
handle_pte_fault	memory.c	/^static vm_fault_t handle_pte_fault(struct vm_fault *vmf)$/;"	f	file:
handle_to_buddy	z3fold.c	/^static enum buddy handle_to_buddy(unsigned long handle)$/;"	f	file:
handle_to_chunks	z3fold.c	/^static unsigned short handle_to_chunks(unsigned long handle)$/;"	f	file:
handle_to_obj	zsmalloc.c	/^static unsigned long handle_to_obj(unsigned long handle)$/;"	f	file:
handle_to_slots	z3fold.c	/^static inline struct z3fold_buddy_slots *handle_to_slots(unsigned long handle)$/;"	f	file:
handle_to_z3fold_header	z3fold.c	/^static inline struct z3fold_header *handle_to_z3fold_header(unsigned long h)$/;"	f	file:
handle_to_zbud_header	zbud.c	/^static struct zbud_header *handle_to_zbud_header(unsigned long handle)$/;"	f	file:
handle_write_error	vmscan.c	/^static void handle_write_error(struct address_space *mapping,$/;"	f	file:
hard_dirty_limit	page-writeback.c	/^static unsigned long hard_dirty_limit(struct wb_domain *dom,$/;"	f	file:
has_cpu_slab	slub.c	/^static bool has_cpu_slab(int cpu, void *info)$/;"	f	file:
has_dynamic_init	kasan/kasan.h	/^	unsigned long has_dynamic_init;	\/* This needed for C++ *\/$/;"	m	struct:kasan_global
has_unmovable_pages	page_alloc.c	/^bool has_unmovable_pages(struct zone *zone, struct page *page, int count,$/;"	f
has_usable_swap	swapfile.c	/^bool has_usable_swap(void)$/;"	f
hash	khugepaged.c	/^	struct hlist_node hash;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::hlist_node	file:
hashdist	page_alloc.c	/^int hashdist = HASHDIST_DEFAULT;$/;"	v
head	kasan/quarantine.c	/^	struct qlist_node *head;$/;"	m	struct:qlist_head	typeref:struct:qlist_head::qlist_node	file:
head	ksm.c	/^			struct list_head *head;$/;"	m	struct:stable_node::__anon14::__anon15	typeref:struct:stable_node::__anon14::__anon15::list_head	file:
head	ksm.c	/^			struct stable_node *head;$/;"	m	struct:rmap_item::__anon19::__anon20	typeref:struct:rmap_item::__anon19::__anon20::stable_node	file:
head	memory-failure.c	831;"	d	file:
head	memory-failure.c	880;"	d	file:
head	slob.c	/^	struct rcu_head head;$/;"	m	struct:slob_rcu	typeref:struct:slob_rcu::rcu_head	file:
header	kmemleak-test.c	/^	long header[25];$/;"	m	struct:test_node	file:
heap_stack_gap	nommu.c	/^int heap_stack_gap = 0;$/;"	v
hex_dump_object	kmemleak.c	/^static void hex_dump_object(struct seq_file *seq,$/;"	f	file:
hibernation_mode	vmscan.c	/^	unsigned int hibernation_mode:1;$/;"	m	struct:scan_control	file:
high_memory	memory.c	/^EXPORT_SYMBOL(high_memory);$/;"	v
high_memory	memory.c	/^void *high_memory;$/;"	v
high_memory	nommu.c	/^EXPORT_SYMBOL(high_memory);$/;"	v
high_memory	nommu.c	/^void *high_memory;$/;"	v
high_work_func	memcontrol.c	/^static void high_work_func(struct work_struct *work)$/;"	f	file:
high_zoneidx	internal.h	/^	enum zone_type high_zoneidx;$/;"	m	struct:alloc_context	typeref:enum:alloc_context::zone_type
highest_memmap_pfn	nommu.c	/^unsigned long highest_memmap_pfn;$/;"	v
highmem_dirtyable_memory	page-writeback.c	/^static unsigned long highmem_dirtyable_memory(unsigned long total)$/;"	f	file:
hlist	ksm.c	/^			struct hlist_node hlist;$/;"	m	struct:rmap_item::__anon19::__anon20	typeref:struct:rmap_item::__anon19::__anon20::hlist_node	file:
hlist	ksm.c	/^	struct hlist_head hlist;$/;"	m	struct:stable_node	typeref:struct:stable_node::hlist_head	file:
hlist_dup	ksm.c	/^				struct hlist_node hlist_dup;$/;"	m	struct:stable_node::__anon14::__anon15::__anon16	typeref:struct:stable_node::__anon14::__anon15::__anon16::hlist_node	file:
hmm_alloc_notifier	hmm.c	/^static struct mmu_notifier *hmm_alloc_notifier(struct mm_struct *mm)$/;"	f	file:
hmm_free_notifier	hmm.c	/^static void hmm_free_notifier(struct mmu_notifier *mn)$/;"	f	file:
hmm_invalidate_range_end	hmm.c	/^static void hmm_invalidate_range_end(struct mmu_notifier *mn,$/;"	f	file:
hmm_invalidate_range_start	hmm.c	/^static int hmm_invalidate_range_start(struct mmu_notifier *mn,$/;"	f	file:
hmm_mirror_register	hmm.c	/^EXPORT_SYMBOL(hmm_mirror_register);$/;"	v
hmm_mirror_register	hmm.c	/^int hmm_mirror_register(struct hmm_mirror *mirror, struct mm_struct *mm)$/;"	f
hmm_mirror_unregister	hmm.c	/^EXPORT_SYMBOL(hmm_mirror_unregister);$/;"	v
hmm_mirror_unregister	hmm.c	/^void hmm_mirror_unregister(struct hmm_mirror *mirror)$/;"	f
hmm_mmu_notifier_ops	hmm.c	/^static const struct mmu_notifier_ops hmm_mmu_notifier_ops = {$/;"	v	typeref:struct:mmu_notifier_ops	file:
hmm_pfns_bad	hmm.c	/^static int hmm_pfns_bad(unsigned long addr,$/;"	f	file:
hmm_pfns_clear	hmm.c	/^static void hmm_pfns_clear(struct hmm_range *range,$/;"	f	file:
hmm_pte_need_fault	hmm.c	/^static inline void hmm_pte_need_fault(const struct hmm_vma_walk *hmm_vma_walk,$/;"	f	file:
hmm_range_dma_map	hmm.c	/^EXPORT_SYMBOL(hmm_range_dma_map);$/;"	v
hmm_range_dma_map	hmm.c	/^long hmm_range_dma_map(struct hmm_range *range, struct device *device,$/;"	f
hmm_range_dma_unmap	hmm.c	/^EXPORT_SYMBOL(hmm_range_dma_unmap);$/;"	v
hmm_range_dma_unmap	hmm.c	/^long hmm_range_dma_unmap(struct hmm_range *range,$/;"	f
hmm_range_fault	hmm.c	/^EXPORT_SYMBOL(hmm_range_fault);$/;"	v
hmm_range_fault	hmm.c	/^long hmm_range_fault(struct hmm_range *range, unsigned int flags)$/;"	f
hmm_range_need_fault	hmm.c	/^static void hmm_range_need_fault(const struct hmm_vma_walk *hmm_vma_walk,$/;"	f	file:
hmm_range_register	hmm.c	/^EXPORT_SYMBOL(hmm_range_register);$/;"	v
hmm_range_register	hmm.c	/^int hmm_range_register(struct hmm_range *range, struct hmm_mirror *mirror)$/;"	f
hmm_range_unregister	hmm.c	/^EXPORT_SYMBOL(hmm_range_unregister);$/;"	v
hmm_range_unregister	hmm.c	/^void hmm_range_unregister(struct hmm_range *range)$/;"	f
hmm_release	hmm.c	/^static void hmm_release(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f	file:
hmm_vma_do_fault	hmm.c	/^static int hmm_vma_do_fault(struct mm_walk *walk, unsigned long addr,$/;"	f	file:
hmm_vma_handle_pmd	hmm.c	/^static int hmm_vma_handle_pmd(struct mm_walk *walk, unsigned long addr,$/;"	f	file:
hmm_vma_handle_pte	hmm.c	/^static int hmm_vma_handle_pte(struct mm_walk *walk, unsigned long addr,$/;"	f	file:
hmm_vma_walk	hmm.c	/^struct hmm_vma_walk {$/;"	s	file:
hmm_vma_walk_hole	hmm.c	/^static int hmm_vma_walk_hole(unsigned long addr, unsigned long end,$/;"	f	file:
hmm_vma_walk_hole_	hmm.c	/^static int hmm_vma_walk_hole_(unsigned long addr, unsigned long end,$/;"	f	file:
hmm_vma_walk_hugetlb_entry	hmm.c	/^static int hmm_vma_walk_hugetlb_entry(pte_t *pte, unsigned long hmask,$/;"	f	file:
hmm_vma_walk_hugetlb_entry	hmm.c	770;"	d	file:
hmm_vma_walk_pmd	hmm.c	/^static int hmm_vma_walk_pmd(pmd_t *pmdp,$/;"	f	file:
hmm_vma_walk_pud	hmm.c	/^static int hmm_vma_walk_pud(pud_t *pudp, unsigned long start, unsigned long end,$/;"	f	file:
hmm_vma_walk_pud	hmm.c	722;"	d	file:
hmm_walk_ops	hmm.c	/^static const struct mm_walk_ops hmm_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
hotadd_new_pgdat	memory_hotplug.c	/^static pg_data_t __ref *hotadd_new_pgdat(int nid, u64 start)$/;"	f	file:
hpage_pmd_size_attr	huge_memory.c	/^static struct kobj_attribute hpage_pmd_size_attr =$/;"	v	typeref:struct:kobj_attribute	file:
hpage_pmd_size_show	huge_memory.c	/^static ssize_t hpage_pmd_size_show(struct kobject *kobj,$/;"	f	file:
hstate_attr_group	hugetlb.c	/^static const struct attribute_group hstate_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
hstate_attrs	hugetlb.c	/^static struct attribute *hstate_attrs[] = {$/;"	v	typeref:struct:attribute	file:
hstate_kobjs	hugetlb.c	/^	struct kobject		*hstate_kobjs[HUGE_MAX_HSTATE];$/;"	m	struct:node_hstate	typeref:struct:node_hstate::kobject	file:
hstate_kobjs	hugetlb.c	/^static struct kobject *hstate_kobjs[HUGE_MAX_HSTATE];$/;"	v	typeref:struct:kobject	file:
hstate_next_node_to_alloc	hugetlb.c	/^static int hstate_next_node_to_alloc(struct hstate *h,$/;"	f	file:
hstate_next_node_to_free	hugetlb.c	/^static int hstate_next_node_to_free(struct hstate *h, nodemask_t *nodes_allowed)$/;"	f	file:
hstates	hugetlb.c	/^struct hstate hstates[HUGE_MAX_HSTATE];$/;"	v	typeref:struct:hstate
htlb_alloc_mask	hugetlb.c	/^static inline gfp_t htlb_alloc_mask(struct hstate *h)$/;"	f	file:
huge	shmem.c	/^	int huge;$/;"	m	struct:shmem_options	file:
huge_add_to_page_cache	hugetlb.c	/^int huge_add_to_page_cache(struct page *page, struct address_space *mapping,$/;"	f
huge_class_size	zsmalloc.c	/^static size_t huge_class_size;$/;"	v	file:
huge_node	mempolicy.c	/^int huge_node(struct vm_area_struct *vma, unsigned long addr, gfp_t gfp_flags,$/;"	f
huge_pmd_set_accessed	huge_memory.c	/^void huge_pmd_set_accessed(struct vm_fault *vmf, pmd_t orig_pmd)$/;"	f
huge_pmd_share	hugetlb.c	/^pte_t *huge_pmd_share(struct mm_struct *mm, unsigned long addr, pud_t *pud)$/;"	f
huge_pmd_unshare	hugetlb.c	/^int huge_pmd_unshare(struct mm_struct *mm, unsigned long *addr, pte_t *ptep)$/;"	f
huge_pte_alloc	hugetlb.c	/^pte_t *huge_pte_alloc(struct mm_struct *mm,$/;"	f
huge_pte_offset	hugetlb.c	/^pte_t *huge_pte_offset(struct mm_struct *mm,$/;"	f
huge_pud_set_accessed	huge_memory.c	/^void huge_pud_set_accessed(struct vm_fault *vmf, pud_t orig_pud)$/;"	f
huge_zero_page_shrinker	huge_memory.c	/^static struct shrinker huge_zero_page_shrinker = {$/;"	v	typeref:struct:shrinker	file:
huge_zero_refcount	huge_memory.c	/^static atomic_t huge_zero_refcount;$/;"	v	file:
hugepage	hugetlb_cgroup.c	/^	struct page_counter hugepage[HUGE_MAX_HSTATE];$/;"	m	struct:hugetlb_cgroup	typeref:struct:hugetlb_cgroup::page_counter	file:
hugepage_add_anon_rmap	rmap.c	/^void hugepage_add_anon_rmap(struct page *page,$/;"	f
hugepage_add_new_anon_rmap	rmap.c	/^void hugepage_add_new_anon_rmap(struct page *page,$/;"	f
hugepage_attr	huge_memory.c	/^static struct attribute *hugepage_attr[] = {$/;"	v	typeref:struct:attribute	file:
hugepage_attr_group	huge_memory.c	/^static const struct attribute_group hugepage_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
hugepage_exit_sysfs	huge_memory.c	/^static inline void hugepage_exit_sysfs(struct kobject *hugepage_kobj)$/;"	f	file:
hugepage_exit_sysfs	huge_memory.c	/^static void __init hugepage_exit_sysfs(struct kobject *hugepage_kobj)$/;"	f	file:
hugepage_init	huge_memory.c	/^static int __init hugepage_init(void)$/;"	f	file:
hugepage_init	huge_memory.c	/^subsys_initcall(hugepage_init);$/;"	v
hugepage_init_sysfs	huge_memory.c	/^static inline int hugepage_init_sysfs(struct kobject **hugepage_kobj)$/;"	f	file:
hugepage_init_sysfs	huge_memory.c	/^static int __init hugepage_init_sysfs(struct kobject **hugepage_kobj)$/;"	f	file:
hugepage_madvise	khugepaged.c	/^int hugepage_madvise(struct vm_area_struct *vma,$/;"	f
hugepage_new_subpool	hugetlb.c	/^struct hugepage_subpool *hugepage_new_subpool(struct hstate *h, long max_hpages,$/;"	f
hugepage_put_subpool	hugetlb.c	/^void hugepage_put_subpool(struct hugepage_subpool *spool)$/;"	f
hugepage_subpool_get_pages	hugetlb.c	/^static long hugepage_subpool_get_pages(struct hugepage_subpool *spool,$/;"	f	file:
hugepage_subpool_put_pages	hugetlb.c	/^static long hugepage_subpool_put_pages(struct hugepage_subpool *spool,$/;"	f	file:
hugepage_vma_check	khugepaged.c	/^static bool hugepage_vma_check(struct vm_area_struct *vma,$/;"	f	file:
hugepage_vma_revalidate	khugepaged.c	/^static int hugepage_vma_revalidate(struct mm_struct *mm, unsigned long address,$/;"	f	file:
hugepages_kobj	hugetlb.c	/^	struct kobject		*hugepages_kobj;$/;"	m	struct:node_hstate	typeref:struct:node_hstate::kobject	file:
hugepages_kobj	hugetlb.c	/^static struct kobject *hugepages_kobj;$/;"	v	typeref:struct:kobject	file:
hugepte_addr_end	gup.c	/^static unsigned long hugepte_addr_end(unsigned long addr, unsigned long end,$/;"	f	file:
hugetlb_acct_memory	hugetlb.c	/^static int hugetlb_acct_memory(struct hstate *h, long delta)$/;"	f	file:
hugetlb_add_hstate	hugetlb.c	/^void __init hugetlb_add_hstate(unsigned int order)$/;"	f
hugetlb_bad_size	hugetlb.c	/^void __init hugetlb_bad_size(void)$/;"	f
hugetlb_cgroup	hugetlb_cgroup.c	/^struct hugetlb_cgroup {$/;"	s	file:
hugetlb_cgroup_charge_cgroup	hugetlb_cgroup.c	/^int hugetlb_cgroup_charge_cgroup(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_commit_charge	hugetlb_cgroup.c	/^void hugetlb_cgroup_commit_charge(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_css_alloc	hugetlb_cgroup.c	/^hugetlb_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)$/;"	f	file:
hugetlb_cgroup_css_free	hugetlb_cgroup.c	/^static void hugetlb_cgroup_css_free(struct cgroup_subsys_state *css)$/;"	f	file:
hugetlb_cgroup_css_offline	hugetlb_cgroup.c	/^static void hugetlb_cgroup_css_offline(struct cgroup_subsys_state *css)$/;"	f	file:
hugetlb_cgroup_file_init	hugetlb_cgroup.c	/^void __init hugetlb_cgroup_file_init(void)$/;"	f
hugetlb_cgroup_from_css	hugetlb_cgroup.c	/^struct hugetlb_cgroup *hugetlb_cgroup_from_css(struct cgroup_subsys_state *s)$/;"	f	file:
hugetlb_cgroup_from_task	hugetlb_cgroup.c	/^struct hugetlb_cgroup *hugetlb_cgroup_from_task(struct task_struct *task)$/;"	f	file:
hugetlb_cgroup_have_usage	hugetlb_cgroup.c	/^static inline bool hugetlb_cgroup_have_usage(struct hugetlb_cgroup *h_cg)$/;"	f	file:
hugetlb_cgroup_init	hugetlb_cgroup.c	/^static void hugetlb_cgroup_init(struct hugetlb_cgroup *h_cgroup,$/;"	f	file:
hugetlb_cgroup_is_root	hugetlb_cgroup.c	/^static inline bool hugetlb_cgroup_is_root(struct hugetlb_cgroup *h_cg)$/;"	f	file:
hugetlb_cgroup_migrate	hugetlb_cgroup.c	/^void hugetlb_cgroup_migrate(struct page *oldhpage, struct page *newhpage)$/;"	f
hugetlb_cgroup_move_parent	hugetlb_cgroup.c	/^static void hugetlb_cgroup_move_parent(int idx, struct hugetlb_cgroup *h_cg,$/;"	f	file:
hugetlb_cgroup_read_u64	hugetlb_cgroup.c	/^static u64 hugetlb_cgroup_read_u64(struct cgroup_subsys_state *css,$/;"	f	file:
hugetlb_cgroup_reset	hugetlb_cgroup.c	/^static ssize_t hugetlb_cgroup_reset(struct kernfs_open_file *of,$/;"	f	file:
hugetlb_cgroup_uncharge_cgroup	hugetlb_cgroup.c	/^void hugetlb_cgroup_uncharge_cgroup(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_uncharge_page	hugetlb_cgroup.c	/^void hugetlb_cgroup_uncharge_page(int idx, unsigned long nr_pages,$/;"	f
hugetlb_cgroup_write	hugetlb_cgroup.c	/^static ssize_t hugetlb_cgroup_write(struct kernfs_open_file *of,$/;"	f	file:
hugetlb_cgrp_subsys	hugetlb_cgroup.c	/^struct cgroup_subsys hugetlb_cgrp_subsys = {$/;"	v	typeref:struct:cgroup_subsys
hugetlb_change_protection	hugetlb.c	/^unsigned long hugetlb_change_protection(struct vm_area_struct *vma,$/;"	f
hugetlb_cow	hugetlb.c	/^static vm_fault_t hugetlb_cow(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
hugetlb_default_setup	hugetlb.c	/^static int __init hugetlb_default_setup(char *s)$/;"	f	file:
hugetlb_entry_end	pagewalk.c	/^static unsigned long hugetlb_entry_end(struct hstate *h, unsigned long addr,$/;"	f	file:
hugetlb_fault	hugetlb.c	/^vm_fault_t hugetlb_fault(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
hugetlb_fault_mutex_hash	hugetlb.c	/^u32 hugetlb_fault_mutex_hash(struct hstate *h, struct address_space *mapping,$/;"	f
hugetlb_fix_reserve_counts	hugetlb.c	/^void hugetlb_fix_reserve_counts(struct inode *inode)$/;"	f
hugetlb_hstate_alloc_pages	hugetlb.c	/^static void __init hugetlb_hstate_alloc_pages(struct hstate *h)$/;"	f	file:
hugetlb_init	hugetlb.c	/^static int __init hugetlb_init(void)$/;"	f	file:
hugetlb_init	hugetlb.c	/^subsys_initcall(hugetlb_init);$/;"	v
hugetlb_init_hstates	hugetlb.c	/^static void __init hugetlb_init_hstates(void)$/;"	f	file:
hugetlb_lock	hugetlb.c	/^DEFINE_SPINLOCK(hugetlb_lock);$/;"	v
hugetlb_mcopy_atomic_pte	hugetlb.c	/^int hugetlb_mcopy_atomic_pte(struct mm_struct *dst_mm,$/;"	f
hugetlb_mempolicy_sysctl_handler	hugetlb.c	/^int hugetlb_mempolicy_sysctl_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_no_page	hugetlb.c	/^static vm_fault_t hugetlb_no_page(struct mm_struct *mm,$/;"	f	file:
hugetlb_nrpages_setup	hugetlb.c	/^static int __init hugetlb_nrpages_setup(char *s)$/;"	f	file:
hugetlb_overcommit_handler	hugetlb.c	/^int hugetlb_overcommit_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_register_all_nodes	hugetlb.c	/^static void __init hugetlb_register_all_nodes(void)$/;"	f	file:
hugetlb_register_all_nodes	hugetlb.c	/^static void hugetlb_register_all_nodes(void) { }$/;"	f	file:
hugetlb_register_node	hugetlb.c	/^static void hugetlb_register_node(struct node *node)$/;"	f	file:
hugetlb_report_meminfo	hugetlb.c	/^void hugetlb_report_meminfo(struct seq_file *m)$/;"	f
hugetlb_report_node_meminfo	hugetlb.c	/^int hugetlb_report_node_meminfo(int nid, char *buf)$/;"	f
hugetlb_report_usage	hugetlb.c	/^void hugetlb_report_usage(struct seq_file *m, struct mm_struct *mm)$/;"	f
hugetlb_reserve_pages	hugetlb.c	/^int hugetlb_reserve_pages(struct inode *inode,$/;"	f
hugetlb_show_meminfo	hugetlb.c	/^void hugetlb_show_meminfo(void)$/;"	f
hugetlb_sysctl_handler	hugetlb.c	/^int hugetlb_sysctl_handler(struct ctl_table *table, int write,$/;"	f
hugetlb_sysctl_handler_common	hugetlb.c	/^static int hugetlb_sysctl_handler_common(bool obey_mempolicy,$/;"	f	file:
hugetlb_sysfs_add_hstate	hugetlb.c	/^static int hugetlb_sysfs_add_hstate(struct hstate *h, struct kobject *parent,$/;"	f	file:
hugetlb_sysfs_init	hugetlb.c	/^static void __init hugetlb_sysfs_init(void)$/;"	f	file:
hugetlb_total_pages	hugetlb.c	/^unsigned long hugetlb_total_pages(void)$/;"	f
hugetlb_unregister_node	hugetlb.c	/^static void hugetlb_unregister_node(struct node *node)$/;"	f	file:
hugetlb_unreserve_pages	hugetlb.c	/^long hugetlb_unreserve_pages(struct inode *inode, long start, long end,$/;"	f
hugetlb_vm_op_close	hugetlb.c	/^static void hugetlb_vm_op_close(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_op_fault	hugetlb.c	/^static vm_fault_t hugetlb_vm_op_fault(struct vm_fault *vmf)$/;"	f	file:
hugetlb_vm_op_open	hugetlb.c	/^static void hugetlb_vm_op_open(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_op_pagesize	hugetlb.c	/^static unsigned long hugetlb_vm_op_pagesize(struct vm_area_struct *vma)$/;"	f	file:
hugetlb_vm_op_split	hugetlb.c	/^static int hugetlb_vm_op_split(struct vm_area_struct *vma, unsigned long addr)$/;"	f	file:
hugetlb_vm_ops	hugetlb.c	/^const struct vm_operations_struct hugetlb_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct
hugetlbfs_pagecache_page	hugetlb.c	/^static struct page *hugetlbfs_pagecache_page(struct hstate *h,$/;"	f	file:
hugetlbfs_pagecache_present	hugetlb.c	/^static bool hugetlbfs_pagecache_present(struct hstate *h,$/;"	f	file:
hwcache_align	slub.c	/^SLAB_ATTR_RO(hwcache_align);$/;"	v
hwcache_align_show	slub.c	/^static ssize_t hwcache_align_show(struct kmem_cache *s, char *buf)$/;"	f	file:
hwpoison_dir	hwpoison-inject.c	/^static struct dentry *hwpoison_dir;$/;"	v	typeref:struct:dentry	file:
hwpoison_filter	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter);$/;"	v
hwpoison_filter	memory-failure.c	/^int hwpoison_filter(struct page *p)$/;"	f
hwpoison_filter_dev	memory-failure.c	/^static int hwpoison_filter_dev(struct page *p)$/;"	f	file:
hwpoison_filter_dev_major	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_dev_major);$/;"	v
hwpoison_filter_dev_major	memory-failure.c	/^u32 hwpoison_filter_dev_major = ~0U;$/;"	v
hwpoison_filter_dev_minor	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_dev_minor);$/;"	v
hwpoison_filter_dev_minor	memory-failure.c	/^u32 hwpoison_filter_dev_minor = ~0U;$/;"	v
hwpoison_filter_enable	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_enable);$/;"	v
hwpoison_filter_enable	memory-failure.c	/^u32 hwpoison_filter_enable = 0;$/;"	v
hwpoison_filter_flags	memory-failure.c	/^static int hwpoison_filter_flags(struct page *p)$/;"	f	file:
hwpoison_filter_flags_mask	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_flags_mask);$/;"	v
hwpoison_filter_flags_mask	memory-failure.c	/^u64 hwpoison_filter_flags_mask;$/;"	v
hwpoison_filter_flags_value	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_flags_value);$/;"	v
hwpoison_filter_flags_value	memory-failure.c	/^u64 hwpoison_filter_flags_value;$/;"	v
hwpoison_filter_memcg	memory-failure.c	/^EXPORT_SYMBOL_GPL(hwpoison_filter_memcg);$/;"	v
hwpoison_filter_memcg	memory-failure.c	/^u64 hwpoison_filter_memcg;$/;"	v
hwpoison_filter_task	memory-failure.c	/^static int hwpoison_filter_task(struct page *p) { return 0; }$/;"	f	file:
hwpoison_filter_task	memory-failure.c	/^static int hwpoison_filter_task(struct page *p)$/;"	f	file:
hwpoison_inject	hwpoison-inject.c	/^static int hwpoison_inject(void *data, u64 val)$/;"	f	file:
hwpoison_unpoison	hwpoison-inject.c	/^static int hwpoison_unpoison(void *data, u64 val)$/;"	f	file:
hwpoison_user_mappings	memory-failure.c	/^static bool hwpoison_user_mappings(struct page *p, unsigned long pfn,$/;"	f	file:
id	swap_cgroup.c	/^	unsigned short		id;$/;"	m	struct:swap_cgroup	file:
identify_page_state	memory-failure.c	/^static int identify_page_state(unsigned long pfn, struct page *p,$/;"	f	file:
ignore_block_suitable	internal.h	/^	bool ignore_block_suitable;	\/* Scan blocks considered unsuitable *\/$/;"	m	struct:compact_control
ignore_gfp_highmem	page_alloc.c	/^	bool ignore_gfp_highmem;$/;"	m	struct:__anon7	file:
ignore_gfp_reclaim	failslab.c	/^	bool ignore_gfp_reclaim;$/;"	m	struct:__anon6	file:
ignore_gfp_reclaim	page_alloc.c	/^	bool ignore_gfp_reclaim;$/;"	m	struct:__anon7	file:
ignore_rlimit_data	mmap.c	/^static bool ignore_rlimit_data;$/;"	v	file:
ignore_skip_hint	internal.h	/^	bool ignore_skip_hint;		\/* Scan blocks even if marked skip *\/$/;"	m	struct:compact_control
immediate	vmscan.c	/^		unsigned int immediate;$/;"	m	struct:scan_control::__anon2	file:
immutable	percpu-internal.h	/^	bool			immutable;	\/* no [de]population allowed *\/$/;"	m	struct:pcpu_chunk
in_irqentry_text	kasan/common.c	/^static inline int in_irqentry_text(unsigned long ptr)$/;"	f	file:
in_reclaim_compaction	vmscan.c	/^static bool in_reclaim_compaction(struct scan_control *sc)$/;"	f	file:
in_use	dmapool.c	/^	unsigned int in_use;$/;"	m	struct:dma_page	file:
inactive_list_is_low	vmscan.c	/^static bool inactive_list_is_low(struct lruvec *lruvec, bool file,$/;"	f	file:
inc_cluster_info_page	swapfile.c	/^static void inc_cluster_info_page(struct swap_info_struct *p,$/;"	f	file:
inc_frontswap_failed_stores	frontswap.c	/^static inline void inc_frontswap_failed_stores(void) { }$/;"	f	file:
inc_frontswap_failed_stores	frontswap.c	/^static inline void inc_frontswap_failed_stores(void) {$/;"	f	file:
inc_frontswap_invalidates	frontswap.c	/^static inline void inc_frontswap_invalidates(void) { }$/;"	f	file:
inc_frontswap_invalidates	frontswap.c	/^static inline void inc_frontswap_invalidates(void) {$/;"	f	file:
inc_frontswap_loads	frontswap.c	/^static inline void inc_frontswap_loads(void) { }$/;"	f	file:
inc_frontswap_loads	frontswap.c	/^static inline void inc_frontswap_loads(void) {$/;"	f	file:
inc_frontswap_succ_stores	frontswap.c	/^static inline void inc_frontswap_succ_stores(void) { }$/;"	f	file:
inc_frontswap_succ_stores	frontswap.c	/^static inline void inc_frontswap_succ_stores(void) {$/;"	f	file:
inc_mm_counter_fast	memory.c	168;"	d	file:
inc_mm_counter_fast	memory.c	182;"	d	file:
inc_node_page_state	vmstat.c	/^EXPORT_SYMBOL(inc_node_page_state);$/;"	v
inc_node_page_state	vmstat.c	/^void inc_node_page_state(struct page *page, enum node_stat_item item)$/;"	f
inc_node_state	vmstat.c	/^EXPORT_SYMBOL(inc_node_state);$/;"	v
inc_node_state	vmstat.c	/^void inc_node_state(struct pglist_data *pgdat, enum node_stat_item item)$/;"	f
inc_slabs_node	slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s, int node, int objects)$/;"	f	file:
inc_slabs_node	slub.c	/^static inline void inc_slabs_node(struct kmem_cache *s, int node,$/;"	f	file:
inc_zone_page_state	vmstat.c	/^EXPORT_SYMBOL(inc_zone_page_state);$/;"	v
inc_zone_page_state	vmstat.c	/^void inc_zone_page_state(struct page *page, enum zone_stat_item item)$/;"	f
inc_zspage_isolation	zsmalloc.c	/^static void inc_zspage_isolation(struct zspage *zspage)$/;"	f	file:
index	zsmalloc.c	/^	unsigned int index;$/;"	m	struct:size_class	file:
index_to_obj	slab.c	/^static inline void *index_to_obj(struct kmem_cache *cache, struct page *page,$/;"	f	file:
init_admin_reserve	mmap.c	/^static int init_admin_reserve(void)$/;"	f	file:
init_admin_reserve	mmap.c	/^subsys_initcall(init_admin_reserve);$/;"	v
init_admin_reserve	nommu.c	/^static int __meminit init_admin_reserve(void)$/;"	f	file:
init_admin_reserve	nommu.c	/^subsys_initcall(init_admin_reserve);$/;"	v
init_arraycache	slab.c	/^static void init_arraycache(struct array_cache *ac, int limit, int batch)$/;"	f	file:
init_cache_node	slab.c	/^static int init_cache_node(struct kmem_cache *cachep, int node, gfp_t gfp)$/;"	f	file:
init_cache_node_node	slab.c	/^static int init_cache_node_node(int node)$/;"	f	file:
init_cache_random_seq	slub.c	/^static inline int init_cache_random_seq(struct kmem_cache *s)$/;"	f	file:
init_cache_random_seq	slub.c	/^static int init_cache_random_seq(struct kmem_cache *s)$/;"	f	file:
init_cleancache	cleancache.c	/^static int __init init_cleancache(void)$/;"	f	file:
init_cma_reserved_pageblock	page_alloc.c	/^void __init init_cma_reserved_pageblock(struct page *page)$/;"	f
init_cpu_node_state	vmstat.c	/^static void __init init_cpu_node_state(void)$/;"	f	file:
init_currently_empty_zone	page_alloc.c	/^void __meminit init_currently_empty_zone(struct zone *zone,$/;"	f
init_debug_pagealloc	page_alloc.c	/^void init_debug_pagealloc(void)$/;"	f
init_deferred_free	zsmalloc.c	/^static void init_deferred_free(struct zs_pool *pool) {}$/;"	f	file:
init_deferred_free	zsmalloc.c	/^static void init_deferred_free(struct zs_pool *pool)$/;"	f	file:
init_early_allocated_pages	page_owner.c	/^static void init_early_allocated_pages(void)$/;"	f	file:
init_freelist_randomization	slub.c	/^static inline void init_freelist_randomization(void) { }$/;"	f	file:
init_freelist_randomization	slub.c	/^static void __init init_freelist_randomization(void)$/;"	f	file:
init_frontswap	frontswap.c	/^module_init(init_frontswap);$/;"	v
init_frontswap	frontswap.c	/^static int __init init_frontswap(void)$/;"	f	file:
init_kmem_cache_cpus	slub.c	/^static void init_kmem_cache_cpus(struct kmem_cache *s)$/;"	f	file:
init_kmem_cache_node	slab.c	/^static struct kmem_cache_node __initdata init_kmem_cache_node[NUM_INIT_LISTS];$/;"	v	typeref:struct:__initdata	file:
init_kmem_cache_node	slub.c	/^init_kmem_cache_node(struct kmem_cache_node *n)$/;"	f	file:
init_kmem_cache_nodes	slub.c	/^static int init_kmem_cache_nodes(struct kmem_cache *s)$/;"	f	file:
init_list	slab.c	/^static void __init init_list(struct kmem_cache *cachep, struct kmem_cache_node *list,$/;"	f	file:
init_memcg_params	slab_common.c	/^static inline int init_memcg_params(struct kmem_cache *s,$/;"	f	file:
init_memcg_params	slab_common.c	/^static int init_memcg_params(struct kmem_cache *s,$/;"	f	file:
init_mm	init-mm.c	/^struct mm_struct init_mm = {$/;"	v	typeref:struct:mm_struct
init_mm_internals	vmstat.c	/^void __init init_mm_internals(void)$/;"	f
init_nodemask_of_mempolicy	mempolicy.c	/^bool init_nodemask_of_mempolicy(nodemask_t *mask)$/;"	f
init_object	slub.c	/^static void init_object(struct kmem_cache *s, void *object, u8 val)$/;"	f	file:
init_on_alloc	page_alloc.c	/^DEFINE_STATIC_KEY_FALSE(init_on_alloc);$/;"	v
init_on_alloc	page_alloc.c	/^DEFINE_STATIC_KEY_TRUE(init_on_alloc);$/;"	v
init_on_alloc	page_alloc.c	/^EXPORT_SYMBOL(init_on_alloc);$/;"	v
init_on_free	page_alloc.c	/^DEFINE_STATIC_KEY_FALSE(init_on_free);$/;"	v
init_on_free	page_alloc.c	/^DEFINE_STATIC_KEY_TRUE(init_on_free);$/;"	v
init_on_free	page_alloc.c	/^EXPORT_SYMBOL(init_on_free);$/;"	v
init_one_lru	list_lru.c	/^static void init_one_lru(struct list_lru_one *l)$/;"	f	file:
init_page_owner	page_owner.c	/^static void init_page_owner(void)$/;"	f	file:
init_pages_in_zone	page_owner.c	/^static void init_pages_in_zone(pg_data_t *pgdat, struct zone *zone)$/;"	f	file:
init_per_zone_wmark_min	page_alloc.c	/^int __meminit init_per_zone_wmark_min(void)$/;"	f
init_percpu_stats_debugfs	percpu-stats.c	/^late_initcall(init_percpu_stats_debugfs);$/;"	v
init_percpu_stats_debugfs	percpu-stats.c	/^static int __init init_percpu_stats_debugfs(void)$/;"	f	file:
init_reap_node	slab.c	/^static void init_reap_node(int cpu)$/;"	f	file:
init_reap_node	slab.c	499;"	d	file:
init_reserve_notifier	mmap.c	/^static int __meminit init_reserve_notifier(void)$/;"	f	file:
init_reserve_notifier	mmap.c	/^subsys_initcall(init_reserve_notifier);$/;"	v
init_reserved_page	page_alloc.c	/^static inline void init_reserved_page(unsigned long pfn)$/;"	f	file:
init_reserved_page	page_alloc.c	/^static void __meminit init_reserved_page(unsigned long pfn)$/;"	f	file:
init_rss_vec	memory.c	/^static inline void init_rss_vec(int *rss)$/;"	f	file:
init_section_page_ext	page_ext.c	/^static int __meminit init_section_page_ext(unsigned long pfn, int nid)$/;"	f	file:
init_swap_address_space	swap_state.c	/^int init_swap_address_space(unsigned int type, unsigned long nr_pages)$/;"	f
init_task_stack_addr	kasan/report.c	/^static inline bool init_task_stack_addr(const void *addr)$/;"	f	file:
init_tid	slub.c	/^static inline unsigned int init_tid(int cpu)$/;"	f	file:
init_tracking	slub.c	/^static void init_tracking(struct kmem_cache *s, void *object)$/;"	f	file:
init_user_reserve	mmap.c	/^static int init_user_reserve(void)$/;"	f	file:
init_user_reserve	mmap.c	/^subsys_initcall(init_user_reserve);$/;"	v
init_user_reserve	nommu.c	/^static int __meminit init_user_reserve(void)$/;"	f	file:
init_user_reserve	nommu.c	/^subsys_initcall(init_user_reserve);$/;"	v
init_z3fold	z3fold.c	/^module_init(init_z3fold);$/;"	v
init_z3fold	z3fold.c	/^static int __init init_z3fold(void)$/;"	f	file:
init_z3fold_page	z3fold.c	/^static struct z3fold_header *init_z3fold_page(struct page *page, bool headless,$/;"	f	file:
init_zbud	zbud.c	/^module_init(init_zbud);$/;"	v
init_zbud	zbud.c	/^static int __init init_zbud(void)$/;"	f	file:
init_zbud_page	zbud.c	/^static struct zbud_header *init_zbud_page(struct page *page)$/;"	f	file:
init_zero_pfn	memory.c	/^core_initcall(init_zero_pfn);$/;"	v
init_zero_pfn	memory.c	/^static int __init init_zero_pfn(void)$/;"	f	file:
init_zones_in_node	page_owner.c	/^static void init_zones_in_node(pg_data_t *pgdat)$/;"	f	file:
init_zspage	zsmalloc.c	/^static void init_zspage(struct size_class *class, struct zspage *zspage)$/;"	f	file:
init_zswap	zswap.c	/^late_initcall(init_zswap);$/;"	v
init_zswap	zswap.c	/^static int __init init_zswap(void)$/;"	f	file:
inode	z3fold.c	/^	struct inode *inode;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::inode	file:
inode	zsmalloc.c	/^	struct inode *inode;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::inode	file:
inode_resv_map	hugetlb.c	/^static inline struct resv_map *inode_resv_map(struct inode *inode)$/;"	f	file:
inodes	shmem.c	/^	unsigned long long inodes;$/;"	m	struct:shmem_options	file:
insert_page	memory.c	/^static int insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_pfn	memory.c	/^static vm_fault_t insert_pfn(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_pfn_pmd	huge_memory.c	/^static void insert_pfn_pmd(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_pfn_pud	huge_memory.c	/^static void insert_pfn_pud(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
insert_to_mm_slots_hash	khugepaged.c	/^static void insert_to_mm_slots_hash(struct mm_struct *mm,$/;"	f	file:
insert_to_mm_slots_hash	ksm.c	/^static void insert_to_mm_slots_hash(struct mm_struct *mm,$/;"	f	file:
insert_vm_struct	mmap.c	/^int insert_vm_struct(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f
insert_vmap_area	vmalloc.c	/^insert_vmap_area(struct vmap_area *va,$/;"	f	file:
insert_vmap_area_augment	vmalloc.c	/^insert_vmap_area_augment(struct vmap_area *va,$/;"	f	file:
insert_zspage	zsmalloc.c	/^static void insert_zspage(struct size_class *class,$/;"	f	file:
install_special_mapping	mmap.c	/^int install_special_mapping(struct mm_struct *mm,$/;"	f
interleave_nid	mempolicy.c	/^static inline unsigned interleave_nid(struct mempolicy *pol,$/;"	f	file:
interleave_nodes	mempolicy.c	/^static unsigned interleave_nodes(struct mempolicy *policy)$/;"	f	file:
inuse	zsmalloc.c	/^	unsigned int inuse;$/;"	m	struct:zspage	file:
invalid_migration_vma	rmap.c	/^static bool invalid_migration_vma(struct vm_area_struct *vma, void *arg)$/;"	f	file:
invalid_mkclean_vma	rmap.c	/^static bool invalid_mkclean_vma(struct vm_area_struct *vma, void *arg)$/;"	f	file:
invalid_numa_statistics	vmstat.c	/^static void invalid_numa_statistics(void)$/;"	f	file:
invalid_page_referenced_vma	rmap.c	/^static bool invalid_page_referenced_vma(struct vm_area_struct *vma, void *arg)$/;"	f	file:
invalidate_complete_page	truncate.c	/^invalidate_complete_page(struct address_space *mapping, struct page *page)$/;"	f	file:
invalidate_complete_page2	truncate.c	/^invalidate_complete_page2(struct address_space *mapping, struct page *page)$/;"	f	file:
invalidate_exceptional_entry	truncate.c	/^static int invalidate_exceptional_entry(struct address_space *mapping,$/;"	f	file:
invalidate_exceptional_entry2	truncate.c	/^static int invalidate_exceptional_entry2(struct address_space *mapping,$/;"	f	file:
invalidate_inode_page	truncate.c	/^int invalidate_inode_page(struct page *page)$/;"	f
invalidate_inode_pages2	truncate.c	/^EXPORT_SYMBOL_GPL(invalidate_inode_pages2);$/;"	v
invalidate_inode_pages2	truncate.c	/^int invalidate_inode_pages2(struct address_space *mapping)$/;"	f
invalidate_inode_pages2_range	truncate.c	/^EXPORT_SYMBOL_GPL(invalidate_inode_pages2_range);$/;"	v
invalidate_inode_pages2_range	truncate.c	/^int invalidate_inode_pages2_range(struct address_space *mapping,$/;"	f
invalidate_mapping_pages	truncate.c	/^EXPORT_SYMBOL(invalidate_mapping_pages);$/;"	v
invalidate_mapping_pages	truncate.c	/^unsigned long invalidate_mapping_pages(struct address_space *mapping,$/;"	f
invalidate_reclaim_iterators	memcontrol.c	/^static void invalidate_reclaim_iterators(struct mem_cgroup *dead_memcg)$/;"	f	file:
invoke_init_callbacks	page_ext.c	/^static void __init invoke_init_callbacks(void)$/;"	f	file:
invoke_need_callbacks	page_ext.c	/^static bool __init invoke_need_callbacks(void)$/;"	f	file:
ip	kasan/kasan.h	/^	unsigned long ip;$/;"	m	struct:kasan_access_info
is_cow_mapping	internal.h	/^static inline bool is_cow_mapping(vm_flags_t flags)$/;"	f
is_data_mapping	internal.h	/^static inline bool is_data_mapping(vm_flags_t flags)$/;"	f
is_debug_pagealloc_cache	slab.c	/^static bool is_debug_pagealloc_cache(struct kmem_cache *cachep)$/;"	f	file:
is_dump_unreclaim_slabs	oom_kill.c	/^static bool is_dump_unreclaim_slabs(void)$/;"	f	file:
is_exec_mapping	internal.h	/^static inline bool is_exec_mapping(vm_flags_t flags)$/;"	f
is_first_page	zsmalloc.c	/^static __maybe_unused int is_first_page(struct page *page)$/;"	f	file:
is_free_buddy_page	page_alloc.c	/^bool is_free_buddy_page(struct page *page)$/;"	f
is_huge_enabled	shmem.c	/^static inline bool is_huge_enabled(struct shmem_sb_info *sbinfo)$/;"	f	file:
is_hugetlb_entry_hwpoisoned	hugetlb.c	/^static int is_hugetlb_entry_hwpoisoned(pte_t pte)$/;"	f	file:
is_hugetlb_entry_migration	hugetlb.c	/^bool is_hugetlb_entry_migration(pte_t pte)$/;"	f
is_kernel_percpu_address	percpu.c	/^bool is_kernel_percpu_address(unsigned long addr)$/;"	f
is_mem_section_removable	memory_hotplug.c	/^bool is_mem_section_removable(unsigned long start_pfn, unsigned long nr_pages)$/;"	f
is_memcg_oom	oom_kill.c	/^static inline bool is_memcg_oom(struct oom_control *oc)$/;"	f	file:
is_mergeable_anon_vma	mmap.c	/^static inline int is_mergeable_anon_vma(struct anon_vma *anon_vma1,$/;"	f	file:
is_mergeable_vma	mmap.c	/^static inline int is_mergeable_vma(struct vm_area_struct *vma,$/;"	f	file:
is_migrate_highatomic	internal.h	/^static inline bool is_migrate_highatomic(enum migratetype migratetype)$/;"	f
is_migrate_highatomic_page	internal.h	/^static inline bool is_migrate_highatomic_page(struct page *page)$/;"	f
is_page_busy	dmapool.c	/^static inline bool is_page_busy(struct dma_page *page)$/;"	f	file:
is_page_cache_freeable	vmscan.c	/^static inline int is_page_cache_freeable(struct page *page)$/;"	f	file:
is_page_sharing_candidate	ksm.c	/^bool is_page_sharing_candidate(struct stable_node *stable_node)$/;"	f	file:
is_pageblock_removable_nolock	memory_hotplug.c	/^static bool is_pageblock_removable_nolock(unsigned long pfn)$/;"	f	file:
is_root_cache	slab.h	/^static inline bool is_root_cache(struct kmem_cache *s)$/;"	f
is_shuffle_order	shuffle.h	/^static inline bool is_shuffle_order(int order)$/;"	f
is_stable_node_chain	ksm.c	/^static __always_inline bool is_stable_node_chain(struct stable_node *chain)$/;"	f	file:
is_stable_node_dup	ksm.c	/^static __always_inline bool is_stable_node_dup(struct stable_node *dup)$/;"	f	file:
is_stack_mapping	internal.h	/^static inline bool is_stack_mapping(vm_flags_t flags)$/;"	f
is_sysrq_oom	oom_kill.c	/^static inline bool is_sysrq_oom(struct oom_control *oc)$/;"	f	file:
is_via_compact_memory	compaction.c	/^static inline bool is_via_compact_memory(int order)$/;"	f	file:
is_vma_resv_set	hugetlb.c	/^static int is_vma_resv_set(struct vm_area_struct *vma, unsigned long flag)$/;"	f	file:
is_vma_temporary_stack	rmap.c	/^bool is_vma_temporary_stack(struct vm_area_struct *vma)$/;"	f
is_vmalloc_or_module_addr	vmalloc.c	/^int is_vmalloc_or_module_addr(const void *x)$/;"	f
is_within_this_va	vmalloc.c	/^is_within_this_va(struct vmap_area *va, unsigned long size,$/;"	f	file:
is_write	kasan/kasan.h	/^	bool is_write;$/;"	m	struct:kasan_access_info
is_zone_first_populated	vmstat.c	/^static bool is_zone_first_populated(pg_data_t *pgdat, struct zone *zone)$/;"	f	file:
is_zspage_isolated	zsmalloc.c	/^static bool is_zspage_isolated(struct zspage *zspage)$/;"	f	file:
isolate_freepages	compaction.c	/^static void isolate_freepages(struct compact_control *cc)$/;"	f	file:
isolate_freepages_block	compaction.c	/^static unsigned long isolate_freepages_block(struct compact_control *cc,$/;"	f	file:
isolate_freepages_range	compaction.c	/^isolate_freepages_range(struct compact_control *cc,$/;"	f
isolate_huge_page	hugetlb.c	/^bool isolate_huge_page(struct page *page, struct list_head *list)$/;"	f
isolate_lru_page	vmscan.c	/^int isolate_lru_page(struct page *page)$/;"	f
isolate_lru_pages	vmscan.c	/^static unsigned long isolate_lru_pages(unsigned long nr_to_scan,$/;"	f	file:
isolate_migrate_t	compaction.c	/^} isolate_migrate_t;$/;"	t	typeref:enum:__anon13	file:
isolate_migratepages	compaction.c	/^static isolate_migrate_t isolate_migratepages(struct compact_control *cc)$/;"	f	file:
isolate_migratepages_block	compaction.c	/^isolate_migratepages_block(struct compact_control *cc, unsigned long low_pfn,$/;"	f	file:
isolate_migratepages_range	compaction.c	/^isolate_migratepages_range(struct compact_control *cc, unsigned long start_pfn,$/;"	f
isolate_movable_page	migrate.c	/^int isolate_movable_page(struct page *page, isolate_mode_t mode)$/;"	f
isolate_zspage	zsmalloc.c	/^static struct zspage *isolate_zspage(struct size_class *class, bool source)$/;"	f	file:
isolated	zsmalloc.c	/^		unsigned int isolated:ISOLATED_BITS;$/;"	m	struct:zspage::__anon22	file:
isolated_pages	zsmalloc.c	/^	atomic_long_t isolated_pages;$/;"	m	struct:zs_pool	file:
isolation_suitable	compaction.c	/^static inline bool isolation_suitable(struct compact_control *cc,$/;"	f	file:
jiffies	kmemleak.c	/^	unsigned long jiffies;		\/* creation timestamp *\/$/;"	m	struct:kmemleak_object	file:
jiffies_last_scan	kmemleak.c	/^static unsigned long jiffies_last_scan;$/;"	v	file:
jiffies_min_age	kmemleak.c	/^static unsigned long jiffies_min_age;$/;"	v	file:
jiffies_scan_wait	kmemleak.c	/^static signed long jiffies_scan_wait;$/;"	v	file:
kasan_access_info	kasan/kasan.h	/^struct kasan_access_info {$/;"	s
kasan_add_zero_shadow	kasan/init.c	/^int kasan_add_zero_shadow(void *start, unsigned long size)$/;"	f
kasan_addr_to_page	kasan/report.c	/^struct page *kasan_addr_to_page(const void *addr)$/;"	f
kasan_alloc_meta	kasan/kasan.h	/^struct kasan_alloc_meta {$/;"	s
kasan_alloc_pages	kasan/common.c	/^void kasan_alloc_pages(struct page *page, unsigned int order)$/;"	f
kasan_cache_create	kasan/common.c	/^void kasan_cache_create(struct kmem_cache *cache, unsigned int *size,$/;"	f
kasan_cache_shrink	kasan/generic.c	/^void kasan_cache_shrink(struct kmem_cache *cache)$/;"	f
kasan_cache_shutdown	kasan/generic.c	/^void kasan_cache_shutdown(struct kmem_cache *cache)$/;"	f
kasan_disable_current	kasan/common.c	/^void kasan_disable_current(void)$/;"	f
kasan_early_shadow_page_entry	kasan/init.c	/^static inline bool kasan_early_shadow_page_entry(pte_t pte)$/;"	f	file:
kasan_enable_current	kasan/common.c	/^void kasan_enable_current(void)$/;"	f
kasan_flags	kasan/report.c	/^static unsigned long kasan_flags;$/;"	v	file:
kasan_free_meta	kasan/kasan.h	/^struct kasan_free_meta {$/;"	s
kasan_free_nondeferred_pages	page_alloc.c	/^static inline void kasan_free_nondeferred_pages(struct page *page, int order)$/;"	f	file:
kasan_free_nondeferred_pages	page_alloc.c	435;"	d	file:
kasan_free_p4d	kasan/init.c	/^static void kasan_free_p4d(p4d_t *p4d_start, pgd_t *pgd)$/;"	f	file:
kasan_free_pages	kasan/common.c	/^void kasan_free_pages(struct page *page, unsigned int order)$/;"	f
kasan_free_pmd	kasan/init.c	/^static void kasan_free_pmd(pmd_t *pmd_start, pud_t *pud)$/;"	f	file:
kasan_free_pte	kasan/init.c	/^static void kasan_free_pte(pte_t *pte_start, pmd_t *pmd)$/;"	f	file:
kasan_free_pud	kasan/init.c	/^static void kasan_free_pud(pud_t *pud_start, p4d_t *p4d)$/;"	f	file:
kasan_free_shadow	kasan/common.c	/^void kasan_free_shadow(const struct vm_struct *vm)$/;"	f
kasan_get_free_track	kasan/report.c	/^static struct kasan_track *kasan_get_free_track(struct kmem_cache *cache,$/;"	f	file:
kasan_global	kasan/kasan.h	/^struct kasan_global {$/;"	s
kasan_init_slab_obj	kasan/common.c	/^void * __must_check kasan_init_slab_obj(struct kmem_cache *cache,$/;"	f
kasan_init_tags	kasan/tags.c	/^void kasan_init_tags(void)$/;"	f
kasan_kfree_large	kasan/common.c	/^void kasan_kfree_large(void *ptr, unsigned long ip)$/;"	f
kasan_kmalloc	kasan/common.c	/^EXPORT_SYMBOL(kasan_kmalloc);$/;"	v
kasan_kmalloc	kasan/common.c	/^void * __must_check kasan_kmalloc(struct kmem_cache *cache, const void *object,$/;"	f
kasan_kmalloc_large	kasan/common.c	/^void * __must_check kasan_kmalloc_large(const void *ptr, size_t size,$/;"	f
kasan_krealloc	kasan/common.c	/^void * __must_check kasan_krealloc(const void *object, size_t size, gfp_t flags)$/;"	f
kasan_mem_notifier	kasan/common.c	/^static int __meminit kasan_mem_notifier(struct notifier_block *nb,$/;"	f	file:
kasan_memhotplug_init	kasan/common.c	/^core_initcall(kasan_memhotplug_init);$/;"	v
kasan_memhotplug_init	kasan/common.c	/^static int __init kasan_memhotplug_init(void)$/;"	f	file:
kasan_metadata_size	kasan/common.c	/^size_t kasan_metadata_size(struct kmem_cache *cache)$/;"	f
kasan_module_alloc	kasan/common.c	/^int kasan_module_alloc(void *addr, size_t size)$/;"	f
kasan_p4d_table	kasan/init.c	/^static inline bool kasan_p4d_table(pgd_t pgd)$/;"	f	file:
kasan_pmd_table	kasan/init.c	/^static inline bool kasan_pmd_table(pud_t pud)$/;"	f	file:
kasan_poison_element	mempool.c	/^static __always_inline void kasan_poison_element(mempool_t *pool, void *element)$/;"	f	file:
kasan_poison_kfree	kasan/common.c	/^void kasan_poison_kfree(void *ptr, unsigned long ip)$/;"	f
kasan_poison_object_data	kasan/common.c	/^void kasan_poison_object_data(struct kmem_cache *cache, void *object)$/;"	f
kasan_poison_shadow	kasan/common.c	/^void kasan_poison_shadow(const void *address, size_t size, u8 value)$/;"	f
kasan_poison_slab	kasan/common.c	/^void kasan_poison_slab(struct page *page)$/;"	f
kasan_populate_early_shadow	kasan/init.c	/^int __ref kasan_populate_early_shadow(const void *shadow_start,$/;"	f
kasan_pte_table	kasan/init.c	/^static inline bool kasan_pte_table(pmd_t pmd)$/;"	f	file:
kasan_pud_table	kasan/init.c	/^static inline bool kasan_pud_table(p4d_t p4d)$/;"	f	file:
kasan_remove_p4d_table	kasan/init.c	/^static void kasan_remove_p4d_table(p4d_t *p4d, unsigned long addr,$/;"	f	file:
kasan_remove_pmd_table	kasan/init.c	/^static void kasan_remove_pmd_table(pmd_t *pmd, unsigned long addr,$/;"	f	file:
kasan_remove_pte_table	kasan/init.c	/^static void kasan_remove_pte_table(pte_t *pte, unsigned long addr,$/;"	f	file:
kasan_remove_pud_table	kasan/init.c	/^static void kasan_remove_pud_table(pud_t *pud, unsigned long addr,$/;"	f	file:
kasan_remove_zero_shadow	kasan/init.c	/^void kasan_remove_zero_shadow(void *start, unsigned long size)$/;"	f
kasan_report	kasan/common.c	/^void kasan_report(unsigned long addr, size_t size, bool is_write, unsigned long ip)$/;"	f
kasan_report_invalid_free	kasan/report.c	/^void kasan_report_invalid_free(void *object, unsigned long ip)$/;"	f
kasan_reset_tag	kasan/tags.c	/^void *kasan_reset_tag(const void *addr)$/;"	f
kasan_restore_multi_shot	kasan/report.c	/^EXPORT_SYMBOL_GPL(kasan_restore_multi_shot);$/;"	v
kasan_restore_multi_shot	kasan/report.c	/^void kasan_restore_multi_shot(bool enabled)$/;"	f
kasan_save_enable_multi_shot	kasan/report.c	/^EXPORT_SYMBOL_GPL(kasan_save_enable_multi_shot);$/;"	v
kasan_save_enable_multi_shot	kasan/report.c	/^bool kasan_save_enable_multi_shot(void)$/;"	f
kasan_set_free_info	kasan/common.c	/^static void kasan_set_free_info(struct kmem_cache *cache,$/;"	f	file:
kasan_set_multi_shot	kasan/report.c	/^static int __init kasan_set_multi_shot(char *str)$/;"	f	file:
kasan_shadow_to_mem	kasan/kasan.h	/^static inline const void *kasan_shadow_to_mem(const void *shadow_addr)$/;"	f
kasan_slab_alloc	kasan/common.c	/^void * __must_check kasan_slab_alloc(struct kmem_cache *cache, void *object,$/;"	f
kasan_slab_free	kasan/common.c	/^bool kasan_slab_free(struct kmem_cache *cache, void *object, unsigned long ip)$/;"	f
kasan_source_location	kasan/kasan.h	/^struct kasan_source_location {$/;"	s
kasan_track	kasan/kasan.h	/^struct kasan_track {$/;"	s
kasan_unpoison_element	mempool.c	/^static void kasan_unpoison_element(mempool_t *pool, void *element)$/;"	f	file:
kasan_unpoison_object_data	kasan/common.c	/^void kasan_unpoison_object_data(struct kmem_cache *cache, void *object)$/;"	f
kasan_unpoison_shadow	kasan/common.c	/^void kasan_unpoison_shadow(const void *address, size_t size)$/;"	f
kasan_unpoison_stack_above_sp_to	kasan/common.c	/^void kasan_unpoison_stack_above_sp_to(const void *watermark)$/;"	f
kasan_unpoison_task_stack	kasan/common.c	/^void kasan_unpoison_task_stack(struct task_struct *task)$/;"	f
kasan_unpoison_task_stack_below	kasan/common.c	/^asmlinkage void kasan_unpoison_task_stack_below(const void *watermark)$/;"	f
kcompactd	compaction.c	/^static int kcompactd(void *p)$/;"	f	file:
kcompactd_cpu_online	compaction.c	/^static int kcompactd_cpu_online(unsigned int cpu)$/;"	f	file:
kcompactd_do_work	compaction.c	/^static void kcompactd_do_work(pg_data_t *pgdat)$/;"	f	file:
kcompactd_init	compaction.c	/^static int __init kcompactd_init(void)$/;"	f	file:
kcompactd_node_suitable	compaction.c	/^static bool kcompactd_node_suitable(pg_data_t *pgdat)$/;"	f	file:
kcompactd_run	compaction.c	/^int kcompactd_run(int nid)$/;"	f
kcompactd_stop	compaction.c	/^void kcompactd_stop(int nid)$/;"	f
kcompactd_work_requested	compaction.c	/^static inline bool kcompactd_work_requested(pg_data_t *pgdat)$/;"	f	file:
kernel_get_mempolicy	mempolicy.c	/^static int kernel_get_mempolicy(int __user *policy,$/;"	f	file:
kernel_init_free_pages	page_alloc.c	/^static void kernel_init_free_pages(struct page *page, int numpages)$/;"	f	file:
kernel_mbind	mempolicy.c	/^static long kernel_mbind(unsigned long start, unsigned long len,$/;"	f	file:
kernel_migrate_pages	mempolicy.c	/^static int kernel_migrate_pages(pid_t pid, unsigned long maxnode,$/;"	f	file:
kernel_move_pages	migrate.c	/^static int kernel_move_pages(pid_t pid, unsigned long nr_pages,$/;"	f	file:
kernel_or_module_addr	kasan/report.c	/^static inline bool kernel_or_module_addr(const void *addr)$/;"	f	file:
kernel_poison_pages	page_poison.c	/^void kernel_poison_pages(struct page *page, int numpages, int enable)$/;"	f
kernel_set_mempolicy	mempolicy.c	/^static long kernel_set_mempolicy(int mode, const unsigned long __user *nmask,$/;"	f	file:
kfree	slab.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	slab.c	/^void kfree(const void *objp)$/;"	f
kfree	slab_common.c	/^EXPORT_TRACEPOINT_SYMBOL(kfree);$/;"	v
kfree	slob.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	slob.c	/^void kfree(const void *block)$/;"	f
kfree	slub.c	/^EXPORT_SYMBOL(kfree);$/;"	v
kfree	slub.c	/^void kfree(const void *x)$/;"	f
kfree_const	util.c	/^EXPORT_SYMBOL(kfree_const);$/;"	v
kfree_const	util.c	/^void kfree_const(const void *x)$/;"	f
kfree_debugcheck	slab.c	/^static void kfree_debugcheck(const void *objp)$/;"	f	file:
kfree_debugcheck	slab.c	2746;"	d	file:
kfree_hook	slub.c	/^static __always_inline void kfree_hook(void *x)$/;"	f	file:
khugepaged	khugepaged.c	/^static int khugepaged(void *none)$/;"	f	file:
khugepaged_add_pte_mapped_thp	khugepaged.c	/^static int khugepaged_add_pte_mapped_thp(struct mm_struct *mm,$/;"	f	file:
khugepaged_alloc_hugepage	khugepaged.c	/^static struct page *khugepaged_alloc_hugepage(bool *wait)$/;"	f	file:
khugepaged_alloc_page	khugepaged.c	/^khugepaged_alloc_page(struct page **hpage, gfp_t gfp, int node)$/;"	f	file:
khugepaged_alloc_sleep	khugepaged.c	/^static void khugepaged_alloc_sleep(void)$/;"	f	file:
khugepaged_attr	khugepaged.c	/^static struct attribute *khugepaged_attr[] = {$/;"	v	typeref:struct:attribute	file:
khugepaged_attr_group	khugepaged.c	/^struct attribute_group khugepaged_attr_group = {$/;"	v	typeref:struct:attribute_group
khugepaged_collapse_pte_mapped_thps	khugepaged.c	/^static int khugepaged_collapse_pte_mapped_thps(struct mm_slot *mm_slot)$/;"	f	file:
khugepaged_defrag_attr	khugepaged.c	/^static struct kobj_attribute khugepaged_defrag_attr =$/;"	v	typeref:struct:kobj_attribute	file:
khugepaged_defrag_show	khugepaged.c	/^static ssize_t khugepaged_defrag_show(struct kobject *kobj,$/;"	f	file:
khugepaged_defrag_store	khugepaged.c	/^static ssize_t khugepaged_defrag_store(struct kobject *kobj,$/;"	f	file:
khugepaged_destroy	khugepaged.c	/^void __init khugepaged_destroy(void)$/;"	f
khugepaged_do_scan	khugepaged.c	/^static void khugepaged_do_scan(void)$/;"	f	file:
khugepaged_enter_vma_merge	khugepaged.c	/^int khugepaged_enter_vma_merge(struct vm_area_struct *vma,$/;"	f
khugepaged_find_target_node	khugepaged.c	/^static int khugepaged_find_target_node(void)$/;"	f	file:
khugepaged_full_scans	khugepaged.c	/^static unsigned int khugepaged_full_scans;$/;"	v	file:
khugepaged_has_work	khugepaged.c	/^static int khugepaged_has_work(void)$/;"	f	file:
khugepaged_init	khugepaged.c	/^int __init khugepaged_init(void)$/;"	f
khugepaged_max_ptes_none_attr	khugepaged.c	/^static struct kobj_attribute khugepaged_max_ptes_none_attr =$/;"	v	typeref:struct:kobj_attribute	file:
khugepaged_max_ptes_none_show	khugepaged.c	/^static ssize_t khugepaged_max_ptes_none_show(struct kobject *kobj,$/;"	f	file:
khugepaged_max_ptes_none_store	khugepaged.c	/^static ssize_t khugepaged_max_ptes_none_store(struct kobject *kobj,$/;"	f	file:
khugepaged_max_ptes_swap_attr	khugepaged.c	/^static struct kobj_attribute khugepaged_max_ptes_swap_attr =$/;"	v	typeref:struct:kobj_attribute	file:
khugepaged_max_ptes_swap_show	khugepaged.c	/^static ssize_t khugepaged_max_ptes_swap_show(struct kobject *kobj,$/;"	f	file:
khugepaged_max_ptes_swap_store	khugepaged.c	/^static ssize_t khugepaged_max_ptes_swap_store(struct kobject *kobj,$/;"	f	file:
khugepaged_node_load	khugepaged.c	/^static int khugepaged_node_load[MAX_NUMNODES];$/;"	v	file:
khugepaged_pages_collapsed	khugepaged.c	/^static unsigned int khugepaged_pages_collapsed;$/;"	v	file:
khugepaged_prealloc_page	khugepaged.c	/^static bool khugepaged_prealloc_page(struct page **hpage, bool *wait)$/;"	f	file:
khugepaged_scan	khugepaged.c	/^static struct khugepaged_scan khugepaged_scan = {$/;"	v	typeref:struct:khugepaged_scan	file:
khugepaged_scan	khugepaged.c	/^struct khugepaged_scan {$/;"	s	file:
khugepaged_scan_abort	khugepaged.c	/^static bool khugepaged_scan_abort(int nid)$/;"	f	file:
khugepaged_scan_file	khugepaged.c	/^static void khugepaged_scan_file(struct mm_struct *mm,$/;"	f	file:
khugepaged_scan_pmd	khugepaged.c	/^static int khugepaged_scan_pmd(struct mm_struct *mm,$/;"	f	file:
khugepaged_should_wakeup	khugepaged.c	/^static bool khugepaged_should_wakeup(void)$/;"	f	file:
khugepaged_sleep_expire	khugepaged.c	/^static unsigned long khugepaged_sleep_expire;$/;"	v	file:
khugepaged_test_exit	khugepaged.c	/^static inline int khugepaged_test_exit(struct mm_struct *mm)$/;"	f	file:
khugepaged_wait_event	khugepaged.c	/^static int khugepaged_wait_event(void)$/;"	f	file:
khugepaged_wait_work	khugepaged.c	/^static void khugepaged_wait_work(void)$/;"	f	file:
kick_deferred_free	zsmalloc.c	/^static void kick_deferred_free(struct zs_pool *pool) {}$/;"	f	file:
kick_deferred_free	zsmalloc.c	/^static void kick_deferred_free(struct zs_pool *pool)$/;"	f	file:
kill_proc	memory-failure.c	/^static int kill_proc(struct to_kill *tk, unsigned long pfn, int flags)$/;"	f	file:
kill_procs	memory-failure.c	/^static void kill_procs(struct list_head *to_kill, int forcekill, bool fail,$/;"	f	file:
kmalloc	slab_common.c	/^EXPORT_TRACEPOINT_SYMBOL(kmalloc);$/;"	v
kmalloc_cache_name	slab_common.c	/^kmalloc_cache_name(const char *prefix, unsigned int size)$/;"	f	file:
kmalloc_caches	slab_common.c	/^EXPORT_SYMBOL(kmalloc_caches);$/;"	v
kmalloc_info_struct	slab.h	/^extern const struct kmalloc_info_struct {$/;"	s
kmalloc_large_node	slub.c	/^static void *kmalloc_large_node(size_t size, gfp_t flags, int node)$/;"	f	file:
kmalloc_large_node_hook	slub.c	/^static inline void *kmalloc_large_node_hook(void *ptr, size_t size, gfp_t flags)$/;"	f	file:
kmalloc_node	slab_common.c	/^EXPORT_TRACEPOINT_SYMBOL(kmalloc_node);$/;"	v
kmalloc_order	slab_common.c	/^EXPORT_SYMBOL(kmalloc_order);$/;"	v
kmalloc_order	slab_common.c	/^void *kmalloc_order(size_t size, gfp_t flags, unsigned int order)$/;"	f
kmalloc_order_trace	slab_common.c	/^EXPORT_SYMBOL(kmalloc_order_trace);$/;"	v
kmalloc_order_trace	slab_common.c	/^void *kmalloc_order_trace(size_t size, gfp_t flags, unsigned int order)$/;"	f
kmalloc_slab	slab_common.c	/^struct kmem_cache *kmalloc_slab(size_t size, gfp_t flags)$/;"	f
kmap_flush_unused	highmem.c	/^void kmap_flush_unused(void)$/;"	f
kmap_high	highmem.c	/^EXPORT_SYMBOL(kmap_high);$/;"	v
kmap_high	highmem.c	/^void *kmap_high(struct page *page)$/;"	f
kmap_high_get	highmem.c	/^void *kmap_high_get(struct page *page)$/;"	f
kmap_to_page	highmem.c	/^EXPORT_SYMBOL(kmap_to_page);$/;"	v
kmap_to_page	highmem.c	/^struct page *kmap_to_page(void *vaddr)$/;"	f
kmem_cache	slab.h	/^struct kmem_cache {$/;"	s
kmem_cache	slab_common.c	/^struct kmem_cache *kmem_cache;$/;"	v	typeref:struct:kmem_cache
kmem_cache_alloc	slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	slab.c	/^void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f
kmem_cache_alloc	slab_common.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	slob.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	slob.c	/^void *kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)$/;"	f
kmem_cache_alloc	slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc);$/;"	v
kmem_cache_alloc	slub.c	/^void *kmem_cache_alloc(struct kmem_cache *s, gfp_t gfpflags)$/;"	f
kmem_cache_alloc_bulk	slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_bulk);$/;"	v
kmem_cache_alloc_bulk	slab.c	/^int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size,$/;"	f
kmem_cache_alloc_bulk	slob.c	/^EXPORT_SYMBOL(kmem_cache_alloc_bulk);$/;"	v
kmem_cache_alloc_bulk	slob.c	/^int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size,$/;"	f
kmem_cache_alloc_bulk	slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_bulk);$/;"	v
kmem_cache_alloc_bulk	slub.c	/^int kmem_cache_alloc_bulk(struct kmem_cache *s, gfp_t flags, size_t size,$/;"	f
kmem_cache_alloc_node	slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	slab.c	/^void *kmem_cache_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid)$/;"	f
kmem_cache_alloc_node	slab_common.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	slob.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	slob.c	/^void *kmem_cache_alloc_node(struct kmem_cache *cachep, gfp_t gfp, int node)$/;"	f
kmem_cache_alloc_node	slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node);$/;"	v
kmem_cache_alloc_node	slub.c	/^void *kmem_cache_alloc_node(struct kmem_cache *s, gfp_t gfpflags, int node)$/;"	f
kmem_cache_alloc_node_trace	slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node_trace);$/;"	v
kmem_cache_alloc_node_trace	slab.c	/^void *kmem_cache_alloc_node_trace(struct kmem_cache *cachep,$/;"	f
kmem_cache_alloc_node_trace	slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_node_trace);$/;"	v
kmem_cache_alloc_node_trace	slub.c	/^void *kmem_cache_alloc_node_trace(struct kmem_cache *s,$/;"	f
kmem_cache_alloc_trace	slab.c	/^EXPORT_SYMBOL(kmem_cache_alloc_trace);$/;"	v
kmem_cache_alloc_trace	slab.c	/^kmem_cache_alloc_trace(struct kmem_cache *cachep, gfp_t flags, size_t size)$/;"	f
kmem_cache_alloc_trace	slub.c	/^EXPORT_SYMBOL(kmem_cache_alloc_trace);$/;"	v
kmem_cache_alloc_trace	slub.c	/^void *kmem_cache_alloc_trace(struct kmem_cache *s, gfp_t gfpflags, size_t size)$/;"	f
kmem_cache_boot	slab.c	/^static struct kmem_cache kmem_cache_boot = {$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_boot	slob.c	/^struct kmem_cache kmem_cache_boot = {$/;"	v	typeref:struct:kmem_cache
kmem_cache_create	slab_common.c	/^EXPORT_SYMBOL(kmem_cache_create);$/;"	v
kmem_cache_create	slab_common.c	/^kmem_cache_create(const char *name, unsigned int size, unsigned int align,$/;"	f
kmem_cache_create_usercopy	slab_common.c	/^EXPORT_SYMBOL(kmem_cache_create_usercopy);$/;"	v
kmem_cache_create_usercopy	slab_common.c	/^kmem_cache_create_usercopy(const char *name,$/;"	f
kmem_cache_debug	slub.c	/^static inline int kmem_cache_debug(struct kmem_cache *s)$/;"	f	file:
kmem_cache_destroy	slab_common.c	/^EXPORT_SYMBOL(kmem_cache_destroy);$/;"	v
kmem_cache_destroy	slab_common.c	/^void kmem_cache_destroy(struct kmem_cache *s)$/;"	f
kmem_cache_flags	slab.c	/^slab_flags_t kmem_cache_flags(unsigned int object_size,$/;"	f
kmem_cache_flags	slab.h	/^static inline slab_flags_t kmem_cache_flags(unsigned int object_size,$/;"	f
kmem_cache_flags	slub.c	/^slab_flags_t kmem_cache_flags(unsigned int object_size,$/;"	f
kmem_cache_free	slab.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	slab.c	/^void kmem_cache_free(struct kmem_cache *cachep, void *objp)$/;"	f
kmem_cache_free	slab_common.c	/^EXPORT_TRACEPOINT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	slob.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	slob.c	/^void kmem_cache_free(struct kmem_cache *c, void *b)$/;"	f
kmem_cache_free	slub.c	/^EXPORT_SYMBOL(kmem_cache_free);$/;"	v
kmem_cache_free	slub.c	/^void kmem_cache_free(struct kmem_cache *s, void *x)$/;"	f
kmem_cache_free_bulk	slab.c	/^EXPORT_SYMBOL(kmem_cache_free_bulk);$/;"	v
kmem_cache_free_bulk	slab.c	/^void kmem_cache_free_bulk(struct kmem_cache *orig_s, size_t size, void **p)$/;"	f
kmem_cache_free_bulk	slob.c	/^EXPORT_SYMBOL(kmem_cache_free_bulk);$/;"	v
kmem_cache_free_bulk	slob.c	/^void kmem_cache_free_bulk(struct kmem_cache *s, size_t size, void **p)$/;"	f
kmem_cache_free_bulk	slub.c	/^EXPORT_SYMBOL(kmem_cache_free_bulk);$/;"	v
kmem_cache_free_bulk	slub.c	/^void kmem_cache_free_bulk(struct kmem_cache *s, size_t size, void **p)$/;"	f
kmem_cache_has_cpu_partial	slub.c	/^static inline bool kmem_cache_has_cpu_partial(struct kmem_cache *s)$/;"	f	file:
kmem_cache_init	slab.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init	slob.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init	slub.c	/^void __init kmem_cache_init(void)$/;"	f
kmem_cache_init_late	slab.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_init_late	slob.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_init_late	slub.c	/^void __init kmem_cache_init_late(void)$/;"	f
kmem_cache_node	slab.h	/^struct kmem_cache_node {$/;"	s
kmem_cache_node	slub.c	/^static struct kmem_cache *kmem_cache_node;$/;"	v	typeref:struct:kmem_cache	file:
kmem_cache_node_init	slab.c	/^static void kmem_cache_node_init(struct kmem_cache_node *parent)$/;"	f	file:
kmem_cache_open	slub.c	/^static int kmem_cache_open(struct kmem_cache *s, slab_flags_t flags)$/;"	f	file:
kmem_cache_release	slub.c	/^static void kmem_cache_release(struct kobject *k)$/;"	f	file:
kmem_cache_sanity_check	slab_common.c	/^static inline int kmem_cache_sanity_check(const char *name, unsigned int size)$/;"	f	file:
kmem_cache_sanity_check	slab_common.c	/^static int kmem_cache_sanity_check(const char *name, unsigned int size)$/;"	f	file:
kmem_cache_shrink	slab_common.c	/^EXPORT_SYMBOL(kmem_cache_shrink);$/;"	v
kmem_cache_shrink	slab_common.c	/^int kmem_cache_shrink(struct kmem_cache *cachep)$/;"	f
kmem_cache_shrink_all	slab_common.c	/^void kmem_cache_shrink_all(struct kmem_cache *s)$/;"	f
kmem_cache_size	slab_common.c	/^EXPORT_SYMBOL(kmem_cache_size);$/;"	v
kmem_cache_size	slab_common.c	/^unsigned int kmem_cache_size(struct kmem_cache *s)$/;"	f
kmem_caches_node	slab.h	/^			struct list_head kmem_caches_node;$/;"	m	struct:memcg_cache_params::__anon8::__anon10	typeref:struct:memcg_cache_params::__anon8::__anon10::list_head
kmem_freepages	slab.c	/^static void kmem_freepages(struct kmem_cache *cachep, struct page *page)$/;"	f	file:
kmem_getpages	slab.c	/^static struct page *kmem_getpages(struct kmem_cache *cachep, gfp_t flags,$/;"	f	file:
kmem_rcu_free	slab.c	/^static void kmem_rcu_free(struct rcu_head *head)$/;"	f	file:
kmem_rcu_free	slob.c	/^static void kmem_rcu_free(struct rcu_head *head)$/;"	f	file:
kmemcg_cache_deactivate	slab_common.c	/^static void kmemcg_cache_deactivate(struct kmem_cache *s)$/;"	f	file:
kmemcg_cache_deactivate_after_rcu	slab_common.c	/^static void kmemcg_cache_deactivate_after_rcu(struct kmem_cache *s)$/;"	f	file:
kmemcg_cache_shutdown	slab_common.c	/^static void kmemcg_cache_shutdown(struct percpu_ref *percpu_ref)$/;"	f	file:
kmemcg_cache_shutdown_fn	slab_common.c	/^static void kmemcg_cache_shutdown_fn(struct kmem_cache *s)$/;"	f	file:
kmemcg_rcufn	slab_common.c	/^static void kmemcg_rcufn(struct rcu_head *head)$/;"	f	file:
kmemcg_workfn	slab_common.c	/^static void kmemcg_workfn(struct work_struct *work)$/;"	f	file:
kmemdup	util.c	/^EXPORT_SYMBOL(kmemdup);$/;"	v
kmemdup	util.c	/^void *kmemdup(const void *src, size_t len, gfp_t gfp)$/;"	f
kmemdup_nul	util.c	/^EXPORT_SYMBOL(kmemdup_nul);$/;"	v
kmemdup_nul	util.c	/^char *kmemdup_nul(const char *s, size_t len, gfp_t gfp)$/;"	f
kmemleak_alloc	kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_alloc);$/;"	v
kmemleak_alloc	kmemleak.c	/^void __ref kmemleak_alloc(const void *ptr, size_t size, int min_count,$/;"	f
kmemleak_alloc_percpu	kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_alloc_percpu);$/;"	v
kmemleak_alloc_percpu	kmemleak.c	/^void __ref kmemleak_alloc_percpu(const void __percpu *ptr, size_t size,$/;"	f
kmemleak_alloc_phys	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_alloc_phys);$/;"	v
kmemleak_alloc_phys	kmemleak.c	/^void __ref kmemleak_alloc_phys(phys_addr_t phys, size_t size, int min_count,$/;"	f
kmemleak_boot_config	kmemleak.c	/^static int __init kmemleak_boot_config(char *str)$/;"	f	file:
kmemleak_clear	kmemleak.c	/^static void kmemleak_clear(void)$/;"	f	file:
kmemleak_disable	kmemleak.c	/^static void kmemleak_disable(void)$/;"	f	file:
kmemleak_do_cleanup	kmemleak.c	/^static void kmemleak_do_cleanup(struct work_struct *work)$/;"	f	file:
kmemleak_enabled	kmemleak.c	/^static int kmemleak_enabled = 1;$/;"	v	file:
kmemleak_error	kmemleak.c	/^static int kmemleak_error;$/;"	v	file:
kmemleak_fops	kmemleak.c	/^static const struct file_operations kmemleak_fops = {$/;"	v	typeref:struct:file_operations	file:
kmemleak_found_leaks	kmemleak.c	/^static bool kmemleak_found_leaks;$/;"	v	file:
kmemleak_free	kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free);$/;"	v
kmemleak_free	kmemleak.c	/^void __ref kmemleak_free(const void *ptr)$/;"	f
kmemleak_free_enabled	kmemleak.c	/^static int kmemleak_free_enabled = 1;$/;"	v	file:
kmemleak_free_part	kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free_part);$/;"	v
kmemleak_free_part	kmemleak.c	/^void __ref kmemleak_free_part(const void *ptr, size_t size)$/;"	f
kmemleak_free_part_phys	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_free_part_phys);$/;"	v
kmemleak_free_part_phys	kmemleak.c	/^void __ref kmemleak_free_part_phys(phys_addr_t phys, size_t size)$/;"	f
kmemleak_free_percpu	kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_free_percpu);$/;"	v
kmemleak_free_percpu	kmemleak.c	/^void __ref kmemleak_free_percpu(const void __percpu *ptr)$/;"	f
kmemleak_ignore	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_ignore);$/;"	v
kmemleak_ignore	kmemleak.c	/^void __ref kmemleak_ignore(const void *ptr)$/;"	f
kmemleak_ignore_phys	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_ignore_phys);$/;"	v
kmemleak_ignore_phys	kmemleak.c	/^void __ref kmemleak_ignore_phys(phys_addr_t phys)$/;"	f
kmemleak_init	kmemleak.c	/^void __init kmemleak_init(void)$/;"	f
kmemleak_initialized	kmemleak.c	/^static int kmemleak_initialized;$/;"	v	file:
kmemleak_late_init	kmemleak.c	/^late_initcall(kmemleak_late_init);$/;"	v
kmemleak_late_init	kmemleak.c	/^static int __init kmemleak_late_init(void)$/;"	f	file:
kmemleak_no_scan	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_no_scan);$/;"	v
kmemleak_no_scan	kmemleak.c	/^void __ref kmemleak_no_scan(const void *ptr)$/;"	f
kmemleak_not_leak	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_not_leak);$/;"	v
kmemleak_not_leak	kmemleak.c	/^void __ref kmemleak_not_leak(const void *ptr)$/;"	f
kmemleak_not_leak_phys	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_not_leak_phys);$/;"	v
kmemleak_not_leak_phys	kmemleak.c	/^void __ref kmemleak_not_leak_phys(phys_addr_t phys)$/;"	f
kmemleak_object	kmemleak.c	/^struct kmemleak_object {$/;"	s	file:
kmemleak_open	kmemleak.c	/^static int kmemleak_open(struct inode *inode, struct file *file)$/;"	f	file:
kmemleak_scan	kmemleak.c	/^static void kmemleak_scan(void)$/;"	f	file:
kmemleak_scan_area	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_scan_area);$/;"	v
kmemleak_scan_area	kmemleak.c	/^struct kmemleak_scan_area {$/;"	s	file:
kmemleak_scan_area	kmemleak.c	/^void __ref kmemleak_scan_area(const void *ptr, size_t size, gfp_t gfp)$/;"	f
kmemleak_scan_thread	kmemleak.c	/^static int kmemleak_scan_thread(void *arg)$/;"	f	file:
kmemleak_seq_next	kmemleak.c	/^static void *kmemleak_seq_next(struct seq_file *seq, void *v, loff_t *pos)$/;"	f	file:
kmemleak_seq_ops	kmemleak.c	/^static const struct seq_operations kmemleak_seq_ops = {$/;"	v	typeref:struct:seq_operations	file:
kmemleak_seq_show	kmemleak.c	/^static int kmemleak_seq_show(struct seq_file *seq, void *v)$/;"	f	file:
kmemleak_seq_start	kmemleak.c	/^static void *kmemleak_seq_start(struct seq_file *seq, loff_t *pos)$/;"	f	file:
kmemleak_seq_stop	kmemleak.c	/^static void kmemleak_seq_stop(struct seq_file *seq, void *v)$/;"	f	file:
kmemleak_skip_disable	kmemleak.c	/^static int kmemleak_skip_disable;$/;"	v	file:
kmemleak_stack_scan	kmemleak.c	/^static int kmemleak_stack_scan = 1;$/;"	v	file:
kmemleak_stop	kmemleak.c	250;"	d	file:
kmemleak_test_exit	kmemleak-test.c	/^module_exit(kmemleak_test_exit);$/;"	v
kmemleak_test_exit	kmemleak-test.c	/^static void __exit kmemleak_test_exit(void)$/;"	f	file:
kmemleak_test_init	kmemleak-test.c	/^module_init(kmemleak_test_init);$/;"	v
kmemleak_test_init	kmemleak-test.c	/^static int __init kmemleak_test_init(void)$/;"	f	file:
kmemleak_update_trace	kmemleak.c	/^EXPORT_SYMBOL(kmemleak_update_trace);$/;"	v
kmemleak_update_trace	kmemleak.c	/^void __ref kmemleak_update_trace(const void *ptr)$/;"	f
kmemleak_verbose	kmemleak.c	/^static bool kmemleak_verbose;$/;"	v	file:
kmemleak_vmalloc	kmemleak.c	/^EXPORT_SYMBOL_GPL(kmemleak_vmalloc);$/;"	v
kmemleak_vmalloc	kmemleak.c	/^void __ref kmemleak_vmalloc(const struct vm_struct *area, size_t size, gfp_t gfp)$/;"	f
kmemleak_warn	kmemleak.c	239;"	d	file:
kmemleak_warning	kmemleak.c	/^static int kmemleak_warning;$/;"	v	file:
kmemleak_write	kmemleak.c	/^static ssize_t kmemleak_write(struct file *file, const char __user *user_buf,$/;"	f	file:
kobj_to_hstate	hugetlb.c	/^static struct hstate *kobj_to_hstate(struct kobject *kobj, int *nidp)$/;"	f	file:
kobj_to_node_hstate	hugetlb.c	/^static struct hstate *kobj_to_node_hstate(struct kobject *kobj, int *nidp)$/;"	f	file:
kobjsize	nommu.c	/^unsigned int kobjsize(const void *objp)$/;"	f
kpfn	ksm.c	/^		unsigned long kpfn;$/;"	m	union:stable_node::__anon17	file:
krealloc	slab_common.c	/^EXPORT_SYMBOL(krealloc);$/;"	v
krealloc	slab_common.c	/^void *krealloc(const void *p, size_t new_size, gfp_t flags)$/;"	f
kref	zswap.c	/^	struct kref kref;$/;"	m	struct:zswap_pool	typeref:struct:zswap_pool::kref	file:
ksize	slab_common.c	/^EXPORT_SYMBOL(ksize);$/;"	v
ksize	slab_common.c	/^size_t ksize(const void *objp)$/;"	f
ksm_attr_group	ksm.c	/^static const struct attribute_group ksm_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
ksm_attrs	ksm.c	/^static struct attribute *ksm_attrs[] = {$/;"	v	typeref:struct:attribute	file:
ksm_check_stable_tree	ksm.c	/^static void ksm_check_stable_tree(unsigned long start_pfn,$/;"	f	file:
ksm_do_scan	ksm.c	/^static void ksm_do_scan(unsigned int scan_npages)$/;"	f	file:
ksm_init	ksm.c	/^static int __init ksm_init(void)$/;"	f	file:
ksm_init	ksm.c	/^subsys_initcall(ksm_init);$/;"	v
ksm_madvise	ksm.c	/^int ksm_madvise(struct vm_area_struct *vma, unsigned long start,$/;"	f
ksm_max_page_sharing	ksm.c	/^static int ksm_max_page_sharing = 256;$/;"	v	file:
ksm_memory_callback	ksm.c	/^static int ksm_memory_callback(struct notifier_block *self,$/;"	f	file:
ksm_merge_across_nodes	ksm.c	/^static unsigned int ksm_merge_across_nodes = 1;$/;"	v	file:
ksm_merge_across_nodes	ksm.c	286;"	d	file:
ksm_might_need_to_copy	ksm.c	/^struct page *ksm_might_need_to_copy(struct page *page,$/;"	f
ksm_migrate_page	ksm.c	/^void ksm_migrate_page(struct page *newpage, struct page *oldpage)$/;"	f
ksm_mm_head	ksm.c	/^static struct mm_slot ksm_mm_head = {$/;"	v	typeref:struct:mm_slot	file:
ksm_nr_node_ids	ksm.c	/^static int ksm_nr_node_ids = 1;$/;"	v	file:
ksm_nr_node_ids	ksm.c	287;"	d	file:
ksm_pages_shared	ksm.c	/^static unsigned long ksm_pages_shared;$/;"	v	file:
ksm_pages_sharing	ksm.c	/^static unsigned long ksm_pages_sharing;$/;"	v	file:
ksm_pages_unshared	ksm.c	/^static unsigned long ksm_pages_unshared;$/;"	v	file:
ksm_rmap_items	ksm.c	/^static unsigned long ksm_rmap_items;$/;"	v	file:
ksm_run	ksm.c	/^static unsigned long ksm_run = KSM_RUN_STOP;$/;"	v	file:
ksm_scan	ksm.c	/^static struct ksm_scan ksm_scan = {$/;"	v	typeref:struct:ksm_scan	file:
ksm_scan	ksm.c	/^struct ksm_scan {$/;"	s	file:
ksm_scan_thread	ksm.c	/^static int ksm_scan_thread(void *nothing)$/;"	f	file:
ksm_slab_free	ksm.c	/^static void __init ksm_slab_free(void)$/;"	f	file:
ksm_slab_init	ksm.c	/^static int __init ksm_slab_init(void)$/;"	f	file:
ksm_stable_node_chains	ksm.c	/^static unsigned long ksm_stable_node_chains;$/;"	v	file:
ksm_stable_node_chains_prune_millisecs	ksm.c	/^static int ksm_stable_node_chains_prune_millisecs = 2000;$/;"	v	file:
ksm_stable_node_dups	ksm.c	/^static unsigned long ksm_stable_node_dups;$/;"	v	file:
ksm_test_exit	ksm.c	/^static inline bool ksm_test_exit(struct mm_struct *mm)$/;"	f	file:
ksm_thread_pages_to_scan	ksm.c	/^static unsigned int ksm_thread_pages_to_scan = 100;$/;"	v	file:
ksm_thread_sleep_millisecs	ksm.c	/^static unsigned int ksm_thread_sleep_millisecs = 20;$/;"	v	file:
ksmd_should_run	ksm.c	/^static int ksmd_should_run(void)$/;"	f	file:
kstrdup	util.c	/^EXPORT_SYMBOL(kstrdup);$/;"	v
kstrdup	util.c	/^char *kstrdup(const char *s, gfp_t gfp)$/;"	f
kstrdup_const	util.c	/^EXPORT_SYMBOL(kstrdup_const);$/;"	v
kstrdup_const	util.c	/^const char *kstrdup_const(const char *s, gfp_t gfp)$/;"	f
kstrndup	util.c	/^EXPORT_SYMBOL(kstrndup);$/;"	v
kstrndup	util.c	/^char *kstrndup(const char *s, size_t max, gfp_t gfp)$/;"	f
kswapd	vmscan.c	/^static int kswapd(void *p)$/;"	f	file:
kswapd_classzone_idx	vmscan.c	/^static enum zone_type kswapd_classzone_idx(pg_data_t *pgdat,$/;"	f	file:
kswapd_cpu_online	vmscan.c	/^static int kswapd_cpu_online(unsigned int cpu)$/;"	f	file:
kswapd_init	vmscan.c	/^static int __init kswapd_init(void)$/;"	f	file:
kswapd_run	vmscan.c	/^int kswapd_run(int nid)$/;"	f
kswapd_shrink_node	vmscan.c	/^static bool kswapd_shrink_node(pg_data_t *pgdat,$/;"	f	file:
kswapd_stop	vmscan.c	/^void kswapd_stop(int nid)$/;"	f
kswapd_try_to_sleep	vmscan.c	/^static void kswapd_try_to_sleep(pg_data_t *pgdat, int alloc_order, int reclaim_order,$/;"	f	file:
ksys_fadvise64_64	fadvise.c	/^int ksys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice)$/;"	f
ksys_mmap_pgoff	mmap.c	/^unsigned long ksys_mmap_pgoff(unsigned long addr, unsigned long len,$/;"	f
ksys_mmap_pgoff	nommu.c	/^unsigned long ksys_mmap_pgoff(unsigned long addr, unsigned long len,$/;"	f
ksys_readahead	readahead.c	/^ssize_t ksys_readahead(int fd, loff_t offset, size_t count)$/;"	f
kunmap_high	highmem.c	/^EXPORT_SYMBOL(kunmap_high);$/;"	v
kunmap_high	highmem.c	/^void kunmap_high(struct page *page)$/;"	f
kvfree	util.c	/^EXPORT_SYMBOL(kvfree);$/;"	v
kvfree	util.c	/^void kvfree(const void *addr)$/;"	f
kvfree_rcu	list_lru.c	/^static void kvfree_rcu(struct rcu_head *head)$/;"	f	file:
kvfree_sensitive	util.c	/^EXPORT_SYMBOL(kvfree_sensitive);$/;"	v
kvfree_sensitive	util.c	/^void kvfree_sensitive(const void *addr, size_t len)$/;"	f
kvmalloc_node	util.c	/^EXPORT_SYMBOL(kvmalloc_node);$/;"	v
kvmalloc_node	util.c	/^void *kvmalloc_node(size_t size, gfp_t flags, int node)$/;"	f
kzfree	slab_common.c	/^EXPORT_SYMBOL(kzfree);$/;"	v
kzfree	slab_common.c	/^void kzfree(const void *p)$/;"	f
laptop_io_completion	page-writeback.c	/^void laptop_io_completion(struct backing_dev_info *info)$/;"	f
laptop_mode	page-writeback.c	/^EXPORT_SYMBOL(laptop_mode);$/;"	v
laptop_mode	page-writeback.c	/^int laptop_mode;$/;"	v
laptop_mode_timer_fn	page-writeback.c	/^void laptop_mode_timer_fn(struct timer_list *t)$/;"	f
laptop_sync_completion	page-writeback.c	/^void laptop_sync_completion(void)$/;"	f
last	hmm.c	/^	unsigned long		last;$/;"	m	struct:hmm_vma_walk	file:
last_chunks	z3fold.c	/^	unsigned short last_chunks;$/;"	m	struct:z3fold_header	file:
last_chunks	zbud.c	/^	unsigned int last_chunks;$/;"	m	struct:zbud_header	file:
last_migrate_reason	page_owner.c	/^	short last_migrate_reason;$/;"	m	struct:page_owner	file:
latent_entropy	page_alloc.c	/^EXPORT_SYMBOL(latent_entropy);$/;"	v
lazy_max_pages	vmalloc.c	/^static unsigned long lazy_max_pages(void)$/;"	f	file:
least_priority	swapfile.c	/^static int least_priority = -1;$/;"	v	file:
left_free	percpu-internal.h	/^	int                     left_free;      \/* size of free space along$/;"	m	struct:pcpu_block_md
legacy_special_mapping_vmops	mmap.c	/^static const struct vm_operations_struct legacy_special_mapping_vmops = {$/;"	v	typeref:struct:vm_operations_struct	file:
len	mmap.c	/^	unsigned long len;$/;"	m	struct:mmap_arg_struct	file:
len	nommu.c	/^	unsigned long len;$/;"	m	struct:mmap_arg_struct	file:
length	swap_cgroup.c	/^	unsigned long length;$/;"	m	struct:swap_cgroup_ctrl	file:
length	zswap.c	/^	unsigned int length;$/;"	m	struct:zswap_entry	file:
level	vmpressure.c	/^	enum vmpressure_levels level;$/;"	m	struct:vmpressure_event	typeref:enum:vmpressure_event::vmpressure_levels	file:
lh	highmem.c	/^	struct list_head lh;			\/* List of page_address_maps *\/$/;"	m	struct:page_address_slot	typeref:struct:page_address_slot::list_head	file:
limit	slab.c	/^	unsigned int limit;$/;"	m	struct:array_cache	file:
limit	slab.h	/^	unsigned int limit;$/;"	m	struct:slabinfo
line_no	kasan/kasan.h	/^	int line_no;$/;"	m	struct:kasan_source_location
linear_hugepage_index	hugetlb.c	/^EXPORT_SYMBOL_GPL(linear_hugepage_index);$/;"	v
linear_hugepage_index	hugetlb.c	/^pgoff_t linear_hugepage_index(struct vm_area_struct *vma,$/;"	f
link	hugetlb.c	/^	struct list_head link;$/;"	m	struct:file_region	typeref:struct:file_region::list_head	file:
link	ksm.c	/^	struct hlist_node link;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::hlist_node	file:
link_free	zsmalloc.c	/^struct link_free {$/;"	s	file:
link_va	vmalloc.c	/^link_va(struct vmap_area *va, struct rb_root *root,$/;"	f	file:
list	highmem.c	/^	struct list_head list;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::list_head	file:
list	kmemleak-test.c	/^	struct list_head list;$/;"	m	struct:test_node	typeref:struct:test_node::list_head	file:
list	ksm.c	/^				struct list_head list;$/;"	m	struct:stable_node::__anon14::__anon15::__anon16	typeref:struct:stable_node::__anon14::__anon15::__anon16::list_head	file:
list	memcontrol.c	/^	struct list_head list;$/;"	m	struct:mem_cgroup_event	typeref:struct:mem_cgroup_event::list_head	file:
list	memcontrol.c	/^	struct list_head list;$/;"	m	struct:mem_cgroup_eventfd_list	typeref:struct:mem_cgroup_eventfd_list::list_head	file:
list	percpu-internal.h	/^	struct list_head	list;		\/* linked to pcpu_slot lists *\/$/;"	m	struct:pcpu_chunk	typeref:struct:pcpu_chunk::list_head
list	slab.c	/^		unsigned int *list;$/;"	m	struct:freelist_init_state::__anon5	file:
list	slab.h	/^	struct list_head list;	\/* List of all slab caches on the system *\/$/;"	m	struct:kmem_cache	typeref:struct:kmem_cache::list_head
list	vmalloc.c	/^	struct llist_head list;$/;"	m	struct:vfree_deferred	typeref:struct:vfree_deferred::llist_head	file:
list	zpool.c	/^	struct list_head list;$/;"	m	struct:zpool	typeref:struct:zpool::list_head	file:
list	zsmalloc.c	/^	struct list_head list; \/* fullness list *\/$/;"	m	struct:zspage	typeref:struct:zspage::list_head	file:
list	zswap.c	/^	struct list_head list;$/;"	m	struct:zswap_pool	typeref:struct:zswap_pool::list_head	file:
list_locations	slub.c	/^static int list_locations(struct kmem_cache *s, char *buf,$/;"	f	file:
list_lock	slab.h	/^	spinlock_t list_lock;$/;"	m	struct:kmem_cache_node
list_lru_add	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_add);$/;"	v
list_lru_add	list_lru.c	/^bool list_lru_add(struct list_lru *lru, struct list_head *item)$/;"	f
list_lru_count_node	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_count_node);$/;"	v
list_lru_count_node	list_lru.c	/^unsigned long list_lru_count_node(struct list_lru *lru, int nid)$/;"	f
list_lru_count_one	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_count_one);$/;"	v
list_lru_count_one	list_lru.c	/^unsigned long list_lru_count_one(struct list_lru *lru,$/;"	f
list_lru_del	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_del);$/;"	v
list_lru_del	list_lru.c	/^bool list_lru_del(struct list_lru *lru, struct list_head *item)$/;"	f
list_lru_destroy	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_destroy);$/;"	v
list_lru_destroy	list_lru.c	/^void list_lru_destroy(struct list_lru *lru)$/;"	f
list_lru_from_kmem	list_lru.c	/^list_lru_from_kmem(struct list_lru_node *nlru, void *ptr,$/;"	f	file:
list_lru_from_memcg_idx	list_lru.c	/^list_lru_from_memcg_idx(struct list_lru_node *nlru, int idx)$/;"	f	file:
list_lru_isolate	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_isolate);$/;"	v
list_lru_isolate	list_lru.c	/^void list_lru_isolate(struct list_lru_one *list, struct list_head *item)$/;"	f
list_lru_isolate_move	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_isolate_move);$/;"	v
list_lru_isolate_move	list_lru.c	/^void list_lru_isolate_move(struct list_lru_one *list, struct list_head *item,$/;"	f
list_lru_memcg_aware	list_lru.c	/^static inline bool list_lru_memcg_aware(struct list_lru *lru)$/;"	f	file:
list_lru_register	list_lru.c	/^static void list_lru_register(struct list_lru *lru)$/;"	f	file:
list_lru_unregister	list_lru.c	/^static void list_lru_unregister(struct list_lru *lru)$/;"	f	file:
list_lru_walk_node	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_walk_node);$/;"	v
list_lru_walk_node	list_lru.c	/^unsigned long list_lru_walk_node(struct list_lru *lru, int nid,$/;"	f
list_lru_walk_one	list_lru.c	/^EXPORT_SYMBOL_GPL(list_lru_walk_one);$/;"	v
list_lru_walk_one	list_lru.c	/^list_lru_walk_one(struct list_lru *lru, int nid, struct mem_cgroup *memcg,$/;"	f
list_lru_walk_one_irq	list_lru.c	/^list_lru_walk_one_irq(struct list_lru *lru, int nid, struct mem_cgroup *memcg,$/;"	f
list_slab_objects	slub.c	/^static void list_slab_objects(struct kmem_cache *s, struct page *page,$/;"	f	file:
loc	slub.c	/^	struct location *loc;$/;"	m	struct:loc_track	typeref:struct:loc_track::location	file:
loc_track	slub.c	/^struct loc_track {$/;"	s	file:
local_memory_node	page_alloc.c	/^int local_memory_node(int node)$/;"	f
location	kasan/kasan.h	/^	struct kasan_source_location *location;$/;"	m	struct:kasan_global	typeref:struct:kasan_global::kasan_source_location
location	slub.c	/^struct location {$/;"	s	file:
location_to_obj	zsmalloc.c	/^static unsigned long location_to_obj(struct page *page, unsigned int obj_idx)$/;"	f	file:
lock	cma.h	/^	struct mutex    lock;$/;"	m	struct:cma	typeref:struct:cma::mutex
lock	dmapool.c	/^	spinlock_t lock;$/;"	m	struct:dma_pool	file:
lock	highmem.c	/^	spinlock_t lock;			\/* Protect this bucket's list *\/$/;"	m	struct:page_address_slot	file:
lock	kmemleak.c	/^	spinlock_t lock;$/;"	m	struct:kmemleak_object	file:
lock	memcontrol.c	/^	spinlock_t	  lock; \/* for from, to *\/$/;"	m	struct:move_charge_struct	file:
lock	memcontrol.c	/^	spinlock_t lock;$/;"	m	struct:mem_cgroup_tree_per_node	file:
lock	memory-failure.c	/^	spinlock_t lock;$/;"	m	struct:memory_failure_cpu	file:
lock	slab.c	/^	spinlock_t lock;$/;"	m	struct:alien_cache	file:
lock	swap_cgroup.c	/^	spinlock_t	lock;$/;"	m	struct:swap_cgroup_ctrl	file:
lock	vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block	file:
lock	vmalloc.c	/^	spinlock_t lock;$/;"	m	struct:vmap_block_queue	file:
lock	z3fold.c	/^	spinlock_t lock;$/;"	m	struct:z3fold_pool	file:
lock	zbud.c	/^	spinlock_t lock;$/;"	m	struct:zbud_pool	file:
lock	zsmalloc.c	/^	rwlock_t lock;$/;"	m	struct:zspage	file:
lock	zsmalloc.c	/^	spinlock_t lock;$/;"	m	struct:size_class	file:
lock	zswap.c	/^	spinlock_t lock;$/;"	m	struct:zswap_tree	file:
lock_anon_vma_root	rmap.c	/^static inline struct anon_vma *lock_anon_vma_root(struct anon_vma *root, struct anon_vma *anon_vma)$/;"	f	file:
lock_cluster	swapfile.c	/^static inline struct swap_cluster_info *lock_cluster(struct swap_info_struct *si,$/;"	f	file:
lock_cluster_or_swap_info	swapfile.c	/^static inline struct swap_cluster_info *lock_cluster_or_swap_info($/;"	f	file:
lock_kmap	highmem.c	137;"	d	file:
lock_kmap	highmem.c	142;"	d	file:
lock_kmap_any	highmem.c	139;"	d	file:
lock_kmap_any	highmem.c	144;"	d	file:
lock_page_lru	memcontrol.c	/^static void lock_page_lru(struct page *page, int *isolated)$/;"	f	file:
lock_page_maybe_drop_mmap	filemap.c	/^static int lock_page_maybe_drop_mmap(struct vm_fault *vmf, struct page *page,$/;"	f	file:
lock_page_memcg	memcontrol.c	/^EXPORT_SYMBOL(lock_page_memcg);$/;"	v
lock_page_memcg	memcontrol.c	/^struct mem_cgroup *lock_page_memcg(struct page *page)$/;"	f
lock_zspage	zsmalloc.c	/^static void lock_zspage(struct zspage *zspage)$/;"	f	file:
lookup_node	mempolicy.c	/^static int lookup_node(struct mm_struct *mm, unsigned long addr)$/;"	f	file:
lookup_object	kmemleak.c	/^static struct kmemleak_object *lookup_object(unsigned long ptr, int alias)$/;"	f	file:
lookup_page_ext	page_ext.c	/^struct page_ext *lookup_page_ext(const struct page *page)$/;"	f
lookup_swap_cache	swap_state.c	/^struct page *lookup_swap_cache(swp_entry_t entry, struct vm_area_struct *vma,$/;"	f
lookup_swap_cgroup	swap_cgroup.c	/^static struct swap_cgroup *lookup_swap_cgroup(swp_entry_t ent,$/;"	f	file:
lookup_swap_cgroup_id	swap_cgroup.c	/^unsigned short lookup_swap_cgroup_id(swp_entry_t ent)$/;"	f
lowmem_reserve_ratio_sysctl_handler	page_alloc.c	/^int lowmem_reserve_ratio_sysctl_handler(struct ctl_table *table, int write,$/;"	f
lru	memory-failure.c	830;"	d	file:
lru	memory-failure.c	879;"	d	file:
lru	z3fold.c	/^	struct list_head lru;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::list_head	file:
lru	zbud.c	/^	struct list_head lru;$/;"	m	struct:zbud_header	typeref:struct:zbud_header::list_head	file:
lru	zbud.c	/^	struct list_head lru;$/;"	m	struct:zbud_pool	typeref:struct:zbud_pool::list_head	file:
lru_add_drain	swap.c	/^void lru_add_drain(void)$/;"	f
lru_add_drain_all	swap.c	/^void lru_add_drain_all(void)$/;"	f
lru_add_drain_cpu	swap.c	/^void lru_add_drain_cpu(int cpu)$/;"	f
lru_add_drain_per_cpu	swap.c	/^static void lru_add_drain_per_cpu(struct work_struct *dummy)$/;"	f	file:
lru_add_page_tail	swap.c	/^void lru_add_page_tail(struct page *page, struct page *page_tail,$/;"	f
lru_cache_add	swap.c	/^void lru_cache_add(struct page *page)$/;"	f
lru_cache_add_active_or_unevictable	swap.c	/^void lru_cache_add_active_or_unevictable(struct page *page,$/;"	f
lru_cache_add_anon	swap.c	/^void lru_cache_add_anon(struct page *page)$/;"	f
lru_cache_add_file	swap.c	/^EXPORT_SYMBOL(lru_cache_add_file);$/;"	v
lru_cache_add_file	swap.c	/^void lru_cache_add_file(struct page *page)$/;"	f
lru_deactivate_file_fn	swap.c	/^static void lru_deactivate_file_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
lru_deactivate_fn	swap.c	/^static void lru_deactivate_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
lru_lazyfree_fn	swap.c	/^static void lru_lazyfree_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
lru_shrinker_id	list_lru.c	/^static int lru_shrinker_id(struct list_lru *lru)$/;"	f	file:
lruvec_init	mmzone.c	/^void lruvec_init(struct lruvec *lruvec)$/;"	f
lruvec_lru_size	vmscan.c	/^unsigned long lruvec_lru_size(struct lruvec *lruvec, enum lru_list lru, int zone_idx)$/;"	f
madvise_behavior	madvise.c	/^static long madvise_behavior(struct vm_area_struct *vma,$/;"	f	file:
madvise_behavior_valid	madvise.c	/^madvise_behavior_valid(int behavior)$/;"	f	file:
madvise_cold	madvise.c	/^static long madvise_cold(struct vm_area_struct *vma,$/;"	f	file:
madvise_cold_or_pageout_pte_range	madvise.c	/^static int madvise_cold_or_pageout_pte_range(pmd_t *pmd,$/;"	f	file:
madvise_cold_page_range	madvise.c	/^static void madvise_cold_page_range(struct mmu_gather *tlb,$/;"	f	file:
madvise_dontneed_free	madvise.c	/^static long madvise_dontneed_free(struct vm_area_struct *vma,$/;"	f	file:
madvise_dontneed_single_vma	madvise.c	/^static long madvise_dontneed_single_vma(struct vm_area_struct *vma,$/;"	f	file:
madvise_free_huge_pmd	huge_memory.c	/^bool madvise_free_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
madvise_free_pte_range	madvise.c	/^static int madvise_free_pte_range(pmd_t *pmd, unsigned long addr,$/;"	f	file:
madvise_free_single_vma	madvise.c	/^static int madvise_free_single_vma(struct vm_area_struct *vma,$/;"	f	file:
madvise_free_walk_ops	madvise.c	/^static const struct mm_walk_ops madvise_free_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
madvise_inject_error	madvise.c	/^static int madvise_inject_error(int behavior,$/;"	f	file:
madvise_need_mmap_write	madvise.c	/^static int madvise_need_mmap_write(int behavior)$/;"	f	file:
madvise_pageout	madvise.c	/^static long madvise_pageout(struct vm_area_struct *vma,$/;"	f	file:
madvise_pageout_page_range	madvise.c	/^static void madvise_pageout_page_range(struct mmu_gather *tlb,$/;"	f	file:
madvise_remove	madvise.c	/^static long madvise_remove(struct vm_area_struct *vma,$/;"	f	file:
madvise_vma	madvise.c	/^madvise_vma(struct vm_area_struct *vma, struct vm_area_struct **prev,$/;"	f	file:
madvise_walk_private	madvise.c	/^struct madvise_walk_private {$/;"	s	file:
madvise_willneed	madvise.c	/^static long madvise_willneed(struct vm_area_struct *vma,$/;"	f	file:
magic	zsmalloc.c	/^		unsigned int magic:MAGIC_VAL_BITS;$/;"	m	struct:zspage::__anon22	file:
make_alloc_exact	page_alloc.c	/^static void *make_alloc_exact(unsigned long addr, unsigned int order,$/;"	f	file:
make_black_object	kmemleak.c	/^static void make_black_object(unsigned long ptr)$/;"	f	file:
make_gray_object	kmemleak.c	/^static void make_gray_object(unsigned long ptr)$/;"	f	file:
make_huge_pte	hugetlb.c	/^static pte_t make_huge_pte(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
map	swap_cgroup.c	/^	struct page **map;$/;"	m	struct:swap_cgroup_ctrl	typeref:struct:swap_cgroup_ctrl::page	file:
map_kernel_range_noflush	vmalloc.c	/^int map_kernel_range_noflush(unsigned long addr, unsigned long size,$/;"	f
map_new_virtual	highmem.c	/^static inline unsigned long map_new_virtual(struct page *page)$/;"	f	file:
map_pte	page_vma_mapped.c	/^static bool map_pte(struct page_vma_mapped_walk *pvmw)$/;"	f	file:
map_swap_entry	swapfile.c	/^static sector_t map_swap_entry(swp_entry_t entry, struct block_device **bdev)$/;"	f	file:
map_swap_page	swapfile.c	/^sector_t map_swap_page(struct page *page, struct block_device **bdev)$/;"	f
map_vm_area	vmalloc.c	/^EXPORT_SYMBOL_GPL(map_vm_area);$/;"	v
map_vm_area	vmalloc.c	/^int map_vm_area(struct vm_struct *area, pgprot_t prot, struct page **pages)$/;"	f
mapcount	rmap.c	/^	int mapcount;$/;"	m	struct:page_referenced_arg	file:
mapped_count	z3fold.c	/^	unsigned short mapped_count:2;$/;"	m	struct:z3fold_header	file:
mapping_area	zsmalloc.c	/^struct mapping_area {$/;"	s	file:
mapping_needs_writeback	filemap.c	/^static bool mapping_needs_writeback(struct address_space *mapping)$/;"	f	file:
mark_free_pages	page_alloc.c	/^void mark_free_pages(struct zone *zone)$/;"	f
mark_oom_victim	oom_kill.c	/^static void mark_oom_victim(struct task_struct *tsk)$/;"	f	file:
mark_page_accessed	swap.c	/^EXPORT_SYMBOL(mark_page_accessed);$/;"	v
mark_page_accessed	swap.c	/^void mark_page_accessed(struct page *page)$/;"	f
mark_page_lazyfree	swap.c	/^void mark_page_lazyfree(struct page *page)$/;"	f
mask	memory-failure.c	/^	unsigned long mask;$/;"	m	struct:page_state	file:
max	slub.c	/^	unsigned long max;$/;"	m	struct:loc_track	file:
max_addr	kmemleak.c	/^static unsigned long max_addr;$/;"	v	file:
max_alloc_size	percpu-internal.h	/^	size_t			max_alloc_size; \/* largest allocation size *\/$/;"	m	struct:pcpu_chunk
max_alloc_size	percpu-internal.h	/^	size_t max_alloc_size;	\/* max allocation size *\/$/;"	m	struct:percpu_stats
max_low_pfn	memblock.c	/^unsigned long max_low_pfn;$/;"	v
max_mapnr	memory.c	/^EXPORT_SYMBOL(max_mapnr);$/;"	v
max_mapnr	memory.c	/^unsigned long max_mapnr;$/;"	v
max_mapnr	nommu.c	/^EXPORT_SYMBOL(max_mapnr);$/;"	v
max_mapnr	nommu.c	/^unsigned long max_mapnr;$/;"	v
max_mem_size	memory_hotplug.c	/^u64 max_mem_size = U64_MAX;$/;"	v
max_page_sharing	ksm.c	/^KSM_ATTR(max_page_sharing);$/;"	v
max_page_sharing_show	ksm.c	/^static ssize_t max_page_sharing_show(struct kobject *kobj,$/;"	f	file:
max_page_sharing_store	ksm.c	/^static ssize_t max_page_sharing_store(struct kobject *kobj,$/;"	f	file:
max_pfn	memblock.c	/^unsigned long max_pfn;$/;"	v
max_pid	slub.c	/^	long max_pid;$/;"	m	struct:location	file:
max_possible_pfn	memblock.c	/^unsigned long long max_possible_pfn;$/;"	v
max_ratio_store	backing-dev.c	/^static ssize_t max_ratio_store(struct device *dev,$/;"	f	file:
max_swapfile_size	swapfile.c	/^__weak unsigned long max_swapfile_size(void)$/;"	f
max_swapfiles_check	swapfile.c	/^late_initcall(max_swapfiles_check);$/;"	v
max_swapfiles_check	swapfile.c	/^static int __init max_swapfiles_check(void)$/;"	f	file:
max_time	slub.c	/^	long max_time;$/;"	m	struct:location	file:
may_expand_vm	mmap.c	/^bool may_expand_vm(struct mm_struct *mm, vm_flags_t flags, unsigned long npages)$/;"	f
may_swap	vmscan.c	/^	unsigned int may_swap:1;$/;"	m	struct:scan_control	file:
may_unmap	vmscan.c	/^	unsigned int may_unmap:1;$/;"	m	struct:scan_control	file:
may_write_to_inode	vmscan.c	/^static int may_write_to_inode(struct inode *inode, struct scan_control *sc)$/;"	f	file:
may_writepage	vmscan.c	/^	unsigned int may_writepage:1;$/;"	m	struct:scan_control	file:
maybe_pmd_mkwrite	huge_memory.c	/^pmd_t maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)$/;"	f
maybe_pud_mkwrite	huge_memory.c	/^static pud_t maybe_pud_mkwrite(pud_t pud, struct vm_area_struct *vma)$/;"	f	file:
maybe_unlock_mmap_for_io	internal.h	/^static inline struct file *maybe_unlock_mmap_for_io(struct vm_fault *vmf,$/;"	f
maybe_wipe_obj_freeptr	slub.c	/^static __always_inline void maybe_wipe_obj_freeptr(struct kmem_cache *s,$/;"	f	file:
mbind_range	mempolicy.c	/^static int mbind_range(struct mm_struct *mm, unsigned long start,$/;"	f	file:
mc	memcontrol.c	/^} mc = {$/;"	v	typeref:struct:move_charge_struct	file:
mc_handle_file_pte	memcontrol.c	/^static struct page *mc_handle_file_pte(struct vm_area_struct *vma,$/;"	f	file:
mc_handle_present_pte	memcontrol.c	/^static struct page *mc_handle_present_pte(struct vm_area_struct *vma,$/;"	f	file:
mc_handle_swap_pte	memcontrol.c	/^static struct page *mc_handle_swap_pte(struct vm_area_struct *vma,$/;"	f	file:
mc_target	memcontrol.c	/^union mc_target {$/;"	u	file:
mc_target_type	memcontrol.c	/^enum mc_target_type {$/;"	g	file:
mchunk_memmove	z3fold.c	/^static inline void *mchunk_memmove(struct z3fold_header *zhdr,$/;"	f	file:
mcopy_atomic	userfaultfd.c	/^ssize_t mcopy_atomic(struct mm_struct *dst_mm, unsigned long dst_start,$/;"	f
mcopy_atomic_pte	userfaultfd.c	/^static int mcopy_atomic_pte(struct mm_struct *dst_mm,$/;"	f	file:
md_blocks	percpu-internal.h	/^	struct pcpu_block_md	*md_blocks;	\/* metadata blocks *\/$/;"	m	struct:pcpu_chunk	typeref:struct:pcpu_chunk::pcpu_block_md
mdtc_calc_avail	page-writeback.c	/^static void mdtc_calc_avail(struct dirty_throttle_control *mdtc,$/;"	f	file:
mdtc_gdtc	page-writeback.c	/^static struct dirty_throttle_control *mdtc_gdtc(struct dirty_throttle_control *mdtc)$/;"	f	file:
mdtc_valid	page-writeback.c	/^static bool mdtc_valid(struct dirty_throttle_control *dtc)$/;"	f	file:
me_huge_page	memory-failure.c	/^static int me_huge_page(struct page *p, unsigned long pfn)$/;"	f	file:
me_kernel	memory-failure.c	/^static int me_kernel(struct page *p, unsigned long pfn)$/;"	f	file:
me_pagecache_clean	memory-failure.c	/^static int me_pagecache_clean(struct page *p, unsigned long pfn)$/;"	f	file:
me_pagecache_dirty	memory-failure.c	/^static int me_pagecache_dirty(struct page *p, unsigned long pfn)$/;"	f	file:
me_swapcache_clean	memory-failure.c	/^static int me_swapcache_clean(struct page *p, unsigned long pfn)$/;"	f	file:
me_swapcache_dirty	memory-failure.c	/^static int me_swapcache_dirty(struct page *p, unsigned long pfn)$/;"	f	file:
me_unknown	memory-failure.c	/^static int me_unknown(struct page *p, unsigned long pfn)$/;"	f	file:
mem_cgroup_alloc	memcontrol.c	/^static struct mem_cgroup *mem_cgroup_alloc(void)$/;"	f	file:
mem_cgroup_bind	memcontrol.c	/^static void mem_cgroup_bind(struct cgroup_subsys_state *root_css)$/;"	f	file:
mem_cgroup_can_attach	memcontrol.c	/^static int mem_cgroup_can_attach(struct cgroup_taskset *tset)$/;"	f	file:
mem_cgroup_cancel_attach	memcontrol.c	/^static void mem_cgroup_cancel_attach(struct cgroup_taskset *tset)$/;"	f	file:
mem_cgroup_cancel_charge	memcontrol.c	/^void mem_cgroup_cancel_charge(struct page *page, struct mem_cgroup *memcg,$/;"	f
mem_cgroup_charge_skmem	memcontrol.c	/^bool mem_cgroup_charge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f
mem_cgroup_charge_statistics	memcontrol.c	/^static void mem_cgroup_charge_statistics(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_clear_mc	memcontrol.c	/^static void mem_cgroup_clear_mc(void)$/;"	f	file:
mem_cgroup_commit_charge	memcontrol.c	/^void mem_cgroup_commit_charge(struct page *page, struct mem_cgroup *memcg,$/;"	f
mem_cgroup_count_precharge	memcontrol.c	/^static unsigned long mem_cgroup_count_precharge(struct mm_struct *mm)$/;"	f	file:
mem_cgroup_count_precharge_pte_range	memcontrol.c	/^static int mem_cgroup_count_precharge_pte_range(pmd_t *pmd,$/;"	f	file:
mem_cgroup_css_alloc	memcontrol.c	/^mem_cgroup_css_alloc(struct cgroup_subsys_state *parent_css)$/;"	f	file:
mem_cgroup_css_free	memcontrol.c	/^static void mem_cgroup_css_free(struct cgroup_subsys_state *css)$/;"	f	file:
mem_cgroup_css_from_page	memcontrol.c	/^struct cgroup_subsys_state *mem_cgroup_css_from_page(struct page *page)$/;"	f
mem_cgroup_css_offline	memcontrol.c	/^static void mem_cgroup_css_offline(struct cgroup_subsys_state *css)$/;"	f	file:
mem_cgroup_css_online	memcontrol.c	/^static int mem_cgroup_css_online(struct cgroup_subsys_state *css)$/;"	f	file:
mem_cgroup_css_released	memcontrol.c	/^static void mem_cgroup_css_released(struct cgroup_subsys_state *css)$/;"	f	file:
mem_cgroup_css_reset	memcontrol.c	/^static void mem_cgroup_css_reset(struct cgroup_subsys_state *css)$/;"	f	file:
mem_cgroup_do_precharge	memcontrol.c	/^static int mem_cgroup_do_precharge(unsigned long count)$/;"	f	file:
mem_cgroup_event	memcontrol.c	/^struct mem_cgroup_event {$/;"	s	file:
mem_cgroup_event_ratelimit	memcontrol.c	/^static bool mem_cgroup_event_ratelimit(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_eventfd_list	memcontrol.c	/^struct mem_cgroup_eventfd_list {$/;"	s	file:
mem_cgroup_flush_foreign	memcontrol.c	/^void mem_cgroup_flush_foreign(struct bdi_writeback *wb)$/;"	f
mem_cgroup_force_empty	memcontrol.c	/^static int mem_cgroup_force_empty(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_force_empty_write	memcontrol.c	/^static ssize_t mem_cgroup_force_empty_write(struct kernfs_open_file *of,$/;"	f	file:
mem_cgroup_free	memcontrol.c	/^static void mem_cgroup_free(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_from_id	memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_id(unsigned short id)$/;"	f
mem_cgroup_from_kmem	list_lru.c	/^static __always_inline struct mem_cgroup *mem_cgroup_from_kmem(void *ptr)$/;"	f	file:
mem_cgroup_from_obj	memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_obj(void *p)$/;"	f
mem_cgroup_from_task	memcontrol.c	/^EXPORT_SYMBOL(mem_cgroup_from_task);$/;"	v
mem_cgroup_from_task	memcontrol.c	/^struct mem_cgroup *mem_cgroup_from_task(struct task_struct *p)$/;"	f
mem_cgroup_get_max	memcontrol.c	/^unsigned long mem_cgroup_get_max(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_get_nr_swap_pages	memcontrol.c	/^long mem_cgroup_get_nr_swap_pages(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_get_oom_group	memcontrol.c	/^struct mem_cgroup *mem_cgroup_get_oom_group(struct task_struct *victim,$/;"	f
mem_cgroup_handle_over_high	memcontrol.c	/^void mem_cgroup_handle_over_high(void)$/;"	f
mem_cgroup_hierarchy_read	memcontrol.c	/^static u64 mem_cgroup_hierarchy_read(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_hierarchy_write	memcontrol.c	/^static int mem_cgroup_hierarchy_write(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_id_get_many	memcontrol.c	/^static void mem_cgroup_id_get_many(struct mem_cgroup *memcg, unsigned int n)$/;"	f	file:
mem_cgroup_id_get_online	memcontrol.c	/^static struct mem_cgroup *mem_cgroup_id_get_online(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_id_put	memcontrol.c	/^static inline void mem_cgroup_id_put(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_id_put_many	memcontrol.c	/^static void mem_cgroup_id_put_many(struct mem_cgroup *memcg, unsigned int n)$/;"	f	file:
mem_cgroup_id_remove	memcontrol.c	/^static void mem_cgroup_id_remove(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_init	memcontrol.c	/^static int __init mem_cgroup_init(void)$/;"	f	file:
mem_cgroup_init	memcontrol.c	/^subsys_initcall(mem_cgroup_init);$/;"	v
mem_cgroup_iter	memcontrol.c	/^struct mem_cgroup *mem_cgroup_iter(struct mem_cgroup *root,$/;"	f
mem_cgroup_iter_break	memcontrol.c	/^void mem_cgroup_iter_break(struct mem_cgroup *root,$/;"	f
mem_cgroup_largest_soft_limit_node	memcontrol.c	/^mem_cgroup_largest_soft_limit_node(struct mem_cgroup_tree_per_node *mctz)$/;"	f	file:
mem_cgroup_legacy_files	memcontrol.c	/^static struct cftype mem_cgroup_legacy_files[] = {$/;"	v	typeref:struct:cftype	file:
mem_cgroup_lru_names	memcontrol.c	/^static const char *const mem_cgroup_lru_names[] = {$/;"	v	file:
mem_cgroup_margin	memcontrol.c	/^static unsigned long mem_cgroup_margin(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_mark_under_oom	memcontrol.c	/^static void mem_cgroup_mark_under_oom(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_may_update_nodemask	memcontrol.c	/^static void mem_cgroup_may_update_nodemask(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_migrate	memcontrol.c	/^void mem_cgroup_migrate(struct page *oldpage, struct page *newpage)$/;"	f
mem_cgroup_move_account	memcontrol.c	/^static int mem_cgroup_move_account(struct page *page,$/;"	f	file:
mem_cgroup_move_charge	memcontrol.c	/^static void mem_cgroup_move_charge(void)$/;"	f	file:
mem_cgroup_move_charge_pte_range	memcontrol.c	/^static int mem_cgroup_move_charge_pte_range(pmd_t *pmd,$/;"	f	file:
mem_cgroup_move_charge_read	memcontrol.c	/^static u64 mem_cgroup_move_charge_read(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_move_charge_write	memcontrol.c	/^static int mem_cgroup_move_charge_write(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_move_swap_account	memcontrol.c	/^static inline int mem_cgroup_move_swap_account(swp_entry_t entry,$/;"	f	file:
mem_cgroup_move_swap_account	memcontrol.c	/^static int mem_cgroup_move_swap_account(swp_entry_t entry,$/;"	f	file:
mem_cgroup_move_task	memcontrol.c	/^static void mem_cgroup_move_task(void)$/;"	f	file:
mem_cgroup_node_nr_lru_pages	memcontrol.c	/^static unsigned long mem_cgroup_node_nr_lru_pages(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_nr_lru_pages	memcontrol.c	/^static unsigned long mem_cgroup_nr_lru_pages(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_oom	memcontrol.c	/^static enum oom_status mem_cgroup_oom(struct mem_cgroup *memcg, gfp_t mask, int order)$/;"	f	file:
mem_cgroup_oom_control_read	memcontrol.c	/^static int mem_cgroup_oom_control_read(struct seq_file *sf, void *v)$/;"	f	file:
mem_cgroup_oom_control_write	memcontrol.c	/^static int mem_cgroup_oom_control_write(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_oom_notify	memcontrol.c	/^static void mem_cgroup_oom_notify(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_notify_cb	memcontrol.c	/^static int mem_cgroup_oom_notify_cb(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_register_event	memcontrol.c	/^static int mem_cgroup_oom_register_event(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_oom_synchronize	memcontrol.c	/^bool mem_cgroup_oom_synchronize(bool handle)$/;"	f
mem_cgroup_oom_trylock	memcontrol.c	/^static bool mem_cgroup_oom_trylock(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_unlock	memcontrol.c	/^static void mem_cgroup_oom_unlock(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_oom_unregister_event	memcontrol.c	/^static void mem_cgroup_oom_unregister_event(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_out_of_memory	memcontrol.c	/^static bool mem_cgroup_out_of_memory(struct mem_cgroup *memcg, gfp_t gfp_mask,$/;"	f	file:
mem_cgroup_page_lruvec	memcontrol.c	/^struct lruvec *mem_cgroup_page_lruvec(struct page *page, struct pglist_data *pgdat)$/;"	f
mem_cgroup_page_nodeinfo	memcontrol.c	/^mem_cgroup_page_nodeinfo(struct mem_cgroup *memcg, struct page *page)$/;"	f	file:
mem_cgroup_precharge_mc	memcontrol.c	/^static int mem_cgroup_precharge_mc(struct mm_struct *mm)$/;"	f	file:
mem_cgroup_print_oom_context	memcontrol.c	/^void mem_cgroup_print_oom_context(struct mem_cgroup *memcg, struct task_struct *p)$/;"	f
mem_cgroup_print_oom_group	memcontrol.c	/^void mem_cgroup_print_oom_group(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_print_oom_meminfo	memcontrol.c	/^void mem_cgroup_print_oom_meminfo(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_protected	memcontrol.c	/^enum mem_cgroup_protection mem_cgroup_protected(struct mem_cgroup *root,$/;"	f
mem_cgroup_read_u64	memcontrol.c	/^static u64 mem_cgroup_read_u64(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_remove_exceeded	memcontrol.c	/^static void mem_cgroup_remove_exceeded(struct mem_cgroup_per_node *mz,$/;"	f	file:
mem_cgroup_remove_from_trees	memcontrol.c	/^static void mem_cgroup_remove_from_trees(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_reset	memcontrol.c	/^static ssize_t mem_cgroup_reset(struct kernfs_open_file *of, char *buf,$/;"	f	file:
mem_cgroup_resize_max	memcontrol.c	/^static int mem_cgroup_resize_max(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_scan_tasks	memcontrol.c	/^int mem_cgroup_scan_tasks(struct mem_cgroup *memcg,$/;"	f
mem_cgroup_select_victim_node	memcontrol.c	/^int mem_cgroup_select_victim_node(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_shrink_node	vmscan.c	/^unsigned long mem_cgroup_shrink_node(struct mem_cgroup *memcg,$/;"	f
mem_cgroup_size	memcontrol.c	/^unsigned long mem_cgroup_size(struct mem_cgroup *memcg)$/;"	f
mem_cgroup_sk_alloc	memcontrol.c	/^void mem_cgroup_sk_alloc(struct sock *sk)$/;"	f
mem_cgroup_sk_free	memcontrol.c	/^void mem_cgroup_sk_free(struct sock *sk)$/;"	f
mem_cgroup_soft_limit_reclaim	memcontrol.c	/^unsigned long mem_cgroup_soft_limit_reclaim(pg_data_t *pgdat, int order,$/;"	f
mem_cgroup_soft_reclaim	memcontrol.c	/^static int mem_cgroup_soft_reclaim(struct mem_cgroup *root_memcg,$/;"	f	file:
mem_cgroup_split_huge_fixup	memcontrol.c	/^void mem_cgroup_split_huge_fixup(struct page *head)$/;"	f
mem_cgroup_swap_full	memcontrol.c	/^bool mem_cgroup_swap_full(struct page *page)$/;"	f
mem_cgroup_swap_init	memcontrol.c	/^static int __init mem_cgroup_swap_init(void)$/;"	f	file:
mem_cgroup_swap_init	memcontrol.c	/^subsys_initcall(mem_cgroup_swap_init);$/;"	v
mem_cgroup_swapout	memcontrol.c	/^void mem_cgroup_swapout(struct page *page, swp_entry_t entry)$/;"	f
mem_cgroup_swappiness_read	memcontrol.c	/^static u64 mem_cgroup_swappiness_read(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_swappiness_write	memcontrol.c	/^static int mem_cgroup_swappiness_write(struct cgroup_subsys_state *css,$/;"	f	file:
mem_cgroup_threshold	memcontrol.c	/^static void mem_cgroup_threshold(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_throttle_swaprate	swapfile.c	/^void mem_cgroup_throttle_swaprate(struct mem_cgroup *memcg, int node,$/;"	f
mem_cgroup_track_foreign_dirty_slowpath	memcontrol.c	/^void mem_cgroup_track_foreign_dirty_slowpath(struct page *page,$/;"	f
mem_cgroup_tree	memcontrol.c	/^struct mem_cgroup_tree {$/;"	s	file:
mem_cgroup_tree_per_node	memcontrol.c	/^struct mem_cgroup_tree_per_node {$/;"	s	file:
mem_cgroup_try_charge	memcontrol.c	/^int mem_cgroup_try_charge(struct page *page, struct mm_struct *mm,$/;"	f
mem_cgroup_try_charge_delay	memcontrol.c	/^int mem_cgroup_try_charge_delay(struct page *page, struct mm_struct *mm,$/;"	f
mem_cgroup_try_charge_swap	memcontrol.c	/^int mem_cgroup_try_charge_swap(struct page *page, swp_entry_t entry)$/;"	f
mem_cgroup_uncharge	memcontrol.c	/^void mem_cgroup_uncharge(struct page *page)$/;"	f
mem_cgroup_uncharge_list	memcontrol.c	/^void mem_cgroup_uncharge_list(struct list_head *page_list)$/;"	f
mem_cgroup_uncharge_skmem	memcontrol.c	/^void mem_cgroup_uncharge_skmem(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f
mem_cgroup_uncharge_swap	memcontrol.c	/^void mem_cgroup_uncharge_swap(swp_entry_t entry, unsigned int nr_pages)$/;"	f
mem_cgroup_under_move	memcontrol.c	/^static bool mem_cgroup_under_move(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_unmark_under_oom	memcontrol.c	/^static void mem_cgroup_unmark_under_oom(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_update_lru_size	memcontrol.c	/^void mem_cgroup_update_lru_size(struct lruvec *lruvec, enum lru_list lru,$/;"	f
mem_cgroup_update_tree	memcontrol.c	/^static void mem_cgroup_update_tree(struct mem_cgroup *memcg, struct page *page)$/;"	f	file:
mem_cgroup_usage	memcontrol.c	/^static unsigned long mem_cgroup_usage(struct mem_cgroup *memcg, bool swap)$/;"	f	file:
mem_cgroup_usage_register_event	memcontrol.c	/^static int mem_cgroup_usage_register_event(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_usage_unregister_event	memcontrol.c	/^static void mem_cgroup_usage_unregister_event(struct mem_cgroup *memcg,$/;"	f	file:
mem_cgroup_wait_acct_move	memcontrol.c	/^static bool mem_cgroup_wait_acct_move(struct mem_cgroup *memcg)$/;"	f	file:
mem_cgroup_wb_domain	memcontrol.c	/^struct wb_domain *mem_cgroup_wb_domain(struct bdi_writeback *wb)$/;"	f
mem_cgroup_wb_stats	memcontrol.c	/^void mem_cgroup_wb_stats(struct bdi_writeback *wb, unsigned long *pfilepages,$/;"	f
mem_cgroup_write	memcontrol.c	/^static ssize_t mem_cgroup_write(struct kernfs_open_file *of,$/;"	f	file:
mem_fmt	hugetlb_cgroup.c	/^static char *mem_fmt(char *buf, int size, unsigned long hsize)$/;"	f	file:
mem_head	cma.h	/^	struct hlist_head mem_head;$/;"	m	struct:cma	typeref:struct:cma::hlist_head
mem_head_lock	cma.h	/^	spinlock_t mem_head_lock;$/;"	m	struct:cma
mem_hotplug_begin	memory_hotplug.c	/^void mem_hotplug_begin(void)$/;"	f
mem_hotplug_done	memory_hotplug.c	/^void mem_hotplug_done(void)$/;"	f
mem_hotplug_lock	memory_hotplug.c	/^DEFINE_STATIC_PERCPU_RWSEM(mem_hotplug_lock);$/;"	v
mem_init_print_info	page_alloc.c	/^void __init mem_init_print_info(const char *str)$/;"	f
mem_map	memory.c	/^EXPORT_SYMBOL(mem_map);$/;"	v
mem_map	memory.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_map	nommu.c	/^EXPORT_SYMBOL(mem_map);$/;"	v
mem_map	nommu.c	/^struct page *mem_map;$/;"	v	typeref:struct:page
mem_map_next	internal.h	/^static inline struct page *mem_map_next(struct page *iter,$/;"	f
mem_map_offset	internal.h	/^static inline struct page *mem_map_offset(struct page *base, int offset)$/;"	f
mem_pool	kmemleak.c	/^static struct kmemleak_object mem_pool[CONFIG_DEBUG_KMEMLEAK_MEM_POOL_SIZE];$/;"	v	typeref:struct:kmemleak_object	file:
mem_pool_alloc	kmemleak.c	/^static struct kmemleak_object *mem_pool_alloc(gfp_t gfp)$/;"	f	file:
mem_pool_free	kmemleak.c	/^static void mem_pool_free(struct kmemleak_object *object)$/;"	f	file:
mem_pool_free_count	kmemleak.c	/^static int mem_pool_free_count = ARRAY_SIZE(mem_pool);$/;"	v	file:
mem_section	sparse.c	/^EXPORT_SYMBOL(mem_section);$/;"	v
mem_section	sparse.c	/^struct mem_section **mem_section;$/;"	v	typeref:struct:mem_section
mem_section_usage_size	sparse.c	/^size_t mem_section_usage_size(void)$/;"	f
memblock_add	memblock.c	/^int __init_memblock memblock_add(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_add_node	memblock.c	/^int __init_memblock memblock_add_node(phys_addr_t base, phys_addr_t size,$/;"	f
memblock_add_range	memblock.c	/^int __init_memblock memblock_add_range(struct memblock_type *type,$/;"	f
memblock_addrs_overlap	memblock.c	/^static unsigned long __init_memblock memblock_addrs_overlap(phys_addr_t base1, phys_addr_t size1,$/;"	f	file:
memblock_alloc_internal	memblock.c	/^static void * __init memblock_alloc_internal($/;"	f	file:
memblock_alloc_range_nid	memblock.c	/^static phys_addr_t __init memblock_alloc_range_nid(phys_addr_t size,$/;"	f	file:
memblock_alloc_try_nid	memblock.c	/^void * __init memblock_alloc_try_nid($/;"	f
memblock_alloc_try_nid_raw	memblock.c	/^void * __init memblock_alloc_try_nid_raw($/;"	f
memblock_allow_resize	memblock.c	/^void __init memblock_allow_resize(void)$/;"	f
memblock_cap_memory_range	memblock.c	/^void __init memblock_cap_memory_range(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_cap_size	memblock.c	/^static inline phys_addr_t memblock_cap_size(phys_addr_t base, phys_addr_t *size)$/;"	f	file:
memblock_clear_hotplug	memblock.c	/^int __init_memblock memblock_clear_hotplug(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_clear_nomap	memblock.c	/^int __init_memblock memblock_clear_nomap(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_debug	memblock.c	/^DEFINE_SHOW_ATTRIBUTE(memblock_debug);$/;"	v
memblock_debug_show	memblock.c	/^static int memblock_debug_show(struct seq_file *m, void *private)$/;"	f	file:
memblock_discard	memblock.c	/^void __init memblock_discard(void)$/;"	f
memblock_double_array	memblock.c	/^static int __init_memblock memblock_double_array(struct memblock_type *type,$/;"	f	file:
memblock_dump	memblock.c	/^static void __init_memblock memblock_dump(struct memblock_type *type)$/;"	f	file:
memblock_end_of_DRAM	memblock.c	/^phys_addr_t __init_memblock memblock_end_of_DRAM(void)$/;"	f
memblock_enforce_memory_limit	memblock.c	/^void __init memblock_enforce_memory_limit(phys_addr_t limit)$/;"	f
memblock_find_in_range	memblock.c	/^phys_addr_t __init_memblock memblock_find_in_range(phys_addr_t start,$/;"	f
memblock_find_in_range_node	memblock.c	/^static phys_addr_t __init_memblock memblock_find_in_range_node(phys_addr_t size,$/;"	f	file:
memblock_free	memblock.c	/^int __init_memblock memblock_free(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_free_all	memblock.c	/^unsigned long __init memblock_free_all(void)$/;"	f
memblock_free_pages	page_alloc.c	/^void __init memblock_free_pages(struct page *page, unsigned long pfn,$/;"	f
memblock_get_current_limit	memblock.c	/^phys_addr_t __init_memblock memblock_get_current_limit(void)$/;"	f
memblock_init_debugfs	memblock.c	/^__initcall(memblock_init_debugfs);$/;"	v
memblock_init_debugfs	memblock.c	/^static int __init memblock_init_debugfs(void)$/;"	f	file:
memblock_insert_region	memblock.c	/^static void __init_memblock memblock_insert_region(struct memblock_type *type,$/;"	f	file:
memblock_is_map_memory	memblock.c	/^bool __init_memblock memblock_is_map_memory(phys_addr_t addr)$/;"	f
memblock_is_memory	memblock.c	/^bool __init_memblock memblock_is_memory(phys_addr_t addr)$/;"	f
memblock_is_region_memory	memblock.c	/^bool __init_memblock memblock_is_region_memory(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_is_region_reserved	memblock.c	/^bool __init_memblock memblock_is_region_reserved(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_is_reserved	memblock.c	/^bool __init_memblock memblock_is_reserved(phys_addr_t addr)$/;"	f
memblock_isolate_range	memblock.c	/^static int __init_memblock memblock_isolate_range(struct memblock_type *type,$/;"	f	file:
memblock_mark_hotplug	memblock.c	/^int __init_memblock memblock_mark_hotplug(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_mark_mirror	memblock.c	/^int __init_memblock memblock_mark_mirror(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_mark_nomap	memblock.c	/^int __init_memblock memblock_mark_nomap(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_mem_limit_remove_map	memblock.c	/^void __init memblock_mem_limit_remove_map(phys_addr_t limit)$/;"	f
memblock_mem_size	memblock.c	/^phys_addr_t __init memblock_mem_size(unsigned long limit_pfn)$/;"	f
memblock_merge_regions	memblock.c	/^static void __init_memblock memblock_merge_regions(struct memblock_type *type)$/;"	f	file:
memblock_overlaps_region	memblock.c	/^bool __init_memblock memblock_overlaps_region(struct memblock_type *type,$/;"	f
memblock_phys_alloc_range	memblock.c	/^phys_addr_t __init memblock_phys_alloc_range(phys_addr_t size,$/;"	f
memblock_phys_alloc_try_nid	memblock.c	/^phys_addr_t __init memblock_phys_alloc_try_nid(phys_addr_t size, phys_addr_t align, int nid)$/;"	f
memblock_phys_mem_size	memblock.c	/^phys_addr_t __init_memblock memblock_phys_mem_size(void)$/;"	f
memblock_remove	memblock.c	/^int __init_memblock memblock_remove(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_remove_range	memblock.c	/^static int __init_memblock memblock_remove_range(struct memblock_type *type,$/;"	f	file:
memblock_remove_region	memblock.c	/^static void __init_memblock memblock_remove_region(struct memblock_type *type, unsigned long r)$/;"	f	file:
memblock_reserve	memblock.c	/^int __init_memblock memblock_reserve(phys_addr_t base, phys_addr_t size)$/;"	f
memblock_reserved_size	memblock.c	/^phys_addr_t __init_memblock memblock_reserved_size(void)$/;"	f
memblock_search	memblock.c	/^static int __init_memblock memblock_search(struct memblock_type *type, phys_addr_t addr)$/;"	f	file:
memblock_search_pfn_nid	memblock.c	/^int __init_memblock memblock_search_pfn_nid(unsigned long pfn,$/;"	f
memblock_set_current_limit	memblock.c	/^void __init_memblock memblock_set_current_limit(phys_addr_t limit)$/;"	f
memblock_set_node	memblock.c	/^int __init_memblock memblock_set_node(phys_addr_t base, phys_addr_t size,$/;"	f
memblock_setclr_flag	memblock.c	/^static int __init_memblock memblock_setclr_flag(phys_addr_t base,$/;"	f	file:
memblock_start_of_DRAM	memblock.c	/^phys_addr_t __init_memblock memblock_start_of_DRAM(void)$/;"	f
memblock_trim_memory	memblock.c	/^void __init_memblock memblock_trim_memory(phys_addr_t align)$/;"	f
memblocks_present	sparse.c	/^void __init memblocks_present(void)$/;"	f
memcg	memcontrol.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:mem_cgroup_event	typeref:struct:mem_cgroup_event::mem_cgroup	file:
memcg	memcontrol.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:memcg_kmem_cache_create_work	typeref:struct:memcg_kmem_cache_create_work::mem_cgroup	file:
memcg	memcontrol.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:oom_wait_info	typeref:struct:oom_wait_info::mem_cgroup	file:
memcg	memcontrol.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:uncharge_gather	typeref:struct:uncharge_gather::mem_cgroup	file:
memcg	rmap.c	/^	struct mem_cgroup *memcg;$/;"	m	struct:page_referenced_arg	typeref:struct:page_referenced_arg::mem_cgroup	file:
memcg	slab.h	/^			struct mem_cgroup *memcg;$/;"	m	struct:memcg_cache_params::__anon8::__anon10	typeref:struct:memcg_cache_params::__anon8::__anon10::mem_cgroup
memcg1_event_names	memcontrol.c	/^static const char *const memcg1_event_names[] = {$/;"	v	file:
memcg1_events	memcontrol.c	/^static const unsigned int memcg1_events[] = {$/;"	v	file:
memcg1_stat_names	memcontrol.c	/^static const char *const memcg1_stat_names[] = {$/;"	v	file:
memcg1_stats	memcontrol.c	/^static const unsigned int memcg1_stats[] = {$/;"	v	file:
memcg_accumulate_slabinfo	slab_common.c	/^memcg_accumulate_slabinfo(struct kmem_cache *s, struct slabinfo *info)$/;"	f	file:
memcg_alloc_cache_id	memcontrol.c	/^static int memcg_alloc_cache_id(void)$/;"	f	file:
memcg_alloc_shrinker_maps	memcontrol.c	/^static int memcg_alloc_shrinker_maps(struct mem_cgroup *memcg)$/;"	f	file:
memcg_cache_array	slab.h	/^struct memcg_cache_array {$/;"	s
memcg_cache_params	slab.h	/^struct memcg_cache_params {$/;"	s
memcg_caches	slab.h	/^			struct memcg_cache_array __rcu *memcg_caches;$/;"	m	struct:memcg_cache_params::__anon8::__anon9	typeref:struct:memcg_cache_params::__anon8::__anon9::__rcu
memcg_cancel_update_list_lru	list_lru.c	/^static void memcg_cancel_update_list_lru(struct list_lru *lru,$/;"	f	file:
memcg_cancel_update_list_lru_node	list_lru.c	/^static void memcg_cancel_update_list_lru_node(struct list_lru_node *nlru,$/;"	f	file:
memcg_charge_slab	slab.h	/^static __always_inline int memcg_charge_slab(struct page *page,$/;"	f
memcg_charge_slab	slab.h	/^static inline int memcg_charge_slab(struct page *page, gfp_t gfp, int order,$/;"	f
memcg_check_events	memcontrol.c	/^static void memcg_check_events(struct mem_cgroup *memcg, struct page *page)$/;"	f	file:
memcg_congested	vmscan.c	/^static bool memcg_congested(pg_data_t *pgdat,$/;"	f	file:
memcg_congested	vmscan.c	/^static inline bool memcg_congested(struct pglist_data *pgdat,$/;"	f	file:
memcg_create_kmem_cache	slab_common.c	/^void memcg_create_kmem_cache(struct mem_cgroup *memcg,$/;"	f
memcg_deactivate_kmem_caches	slab_common.c	/^void memcg_deactivate_kmem_caches(struct mem_cgroup *memcg,$/;"	f
memcg_destroy_list_lru	list_lru.c	/^static void memcg_destroy_list_lru(struct list_lru *lru)$/;"	f	file:
memcg_destroy_list_lru_node	list_lru.c	/^static void memcg_destroy_list_lru_node(struct list_lru_node *nlru)$/;"	f	file:
memcg_drain_all_list_lrus	list_lru.c	/^void memcg_drain_all_list_lrus(int src_idx, struct mem_cgroup *dst_memcg)$/;"	f
memcg_drain_list_lru	list_lru.c	/^static void memcg_drain_list_lru(struct list_lru *lru,$/;"	f	file:
memcg_drain_list_lru_node	list_lru.c	/^static void memcg_drain_list_lru_node(struct list_lru *lru, int nid,$/;"	f	file:
memcg_event_ptable_queue_proc	memcontrol.c	/^static void memcg_event_ptable_queue_proc(struct file *file,$/;"	f	file:
memcg_event_remove	memcontrol.c	/^static void memcg_event_remove(struct work_struct *work)$/;"	f	file:
memcg_event_wake	memcontrol.c	/^static int memcg_event_wake(wait_queue_entry_t *wait, unsigned mode,$/;"	f	file:
memcg_events	memcontrol.c	/^static unsigned long memcg_events(struct mem_cgroup *memcg, int event)$/;"	f	file:
memcg_events_local	memcontrol.c	/^static unsigned long memcg_events_local(struct mem_cgroup *memcg, int event)$/;"	f	file:
memcg_exact_page_state	memcontrol.c	/^static unsigned long memcg_exact_page_state(struct mem_cgroup *memcg, int idx)$/;"	f	file:
memcg_expand_one_shrinker_map	memcontrol.c	/^static int memcg_expand_one_shrinker_map(struct mem_cgroup *memcg,$/;"	f	file:
memcg_expand_shrinker_maps	memcontrol.c	/^int memcg_expand_shrinker_maps(int new_id)$/;"	f
memcg_flush_percpu_vmevents	memcontrol.c	/^static void memcg_flush_percpu_vmevents(struct mem_cgroup *memcg)$/;"	f	file:
memcg_flush_percpu_vmstats	memcontrol.c	/^static void memcg_flush_percpu_vmstats(struct mem_cgroup *memcg)$/;"	f	file:
memcg_free_cache_id	memcontrol.c	/^static void memcg_free_cache_id(int id)$/;"	f	file:
memcg_free_kmem	memcontrol.c	/^static void memcg_free_kmem(struct mem_cgroup *memcg)$/;"	f	file:
memcg_free_shrinker_map_rcu	memcontrol.c	/^static void memcg_free_shrinker_map_rcu(struct rcu_head *head)$/;"	f	file:
memcg_free_shrinker_maps	memcontrol.c	/^static void memcg_free_shrinker_maps(struct mem_cgroup *memcg)$/;"	f	file:
memcg_from_slab_page	slab.h	/^static inline struct mem_cgroup *memcg_from_slab_page(struct page *page)$/;"	f
memcg_get_cache_ids	memcontrol.c	/^void memcg_get_cache_ids(void)$/;"	f
memcg_has_children	memcontrol.c	/^static inline bool memcg_has_children(struct mem_cgroup *memcg)$/;"	f	file:
memcg_hotplug_cpu_dead	memcontrol.c	/^static int memcg_hotplug_cpu_dead(unsigned int cpu)$/;"	f	file:
memcg_init_list_lru	list_lru.c	/^static int memcg_init_list_lru(struct list_lru *lru, bool memcg_aware)$/;"	f	file:
memcg_init_list_lru_node	list_lru.c	/^static int memcg_init_list_lru_node(struct list_lru_node *nlru)$/;"	f	file:
memcg_kmem_bypass	memcontrol.c	/^static inline bool memcg_kmem_bypass(void)$/;"	f	file:
memcg_kmem_cache_create_func	memcontrol.c	/^static void memcg_kmem_cache_create_func(struct work_struct *w)$/;"	f	file:
memcg_kmem_cache_create_work	memcontrol.c	/^struct memcg_kmem_cache_create_work {$/;"	s	file:
memcg_kmem_cache_wq	memcontrol.c	/^struct workqueue_struct *memcg_kmem_cache_wq;$/;"	v	typeref:struct:workqueue_struct
memcg_kmem_enabled_key	memcontrol.c	/^DEFINE_STATIC_KEY_FALSE(memcg_kmem_enabled_key);$/;"	v
memcg_kmem_enabled_key	memcontrol.c	/^EXPORT_SYMBOL(memcg_kmem_enabled_key);$/;"	v
memcg_kmem_get_cache	memcontrol.c	/^struct kmem_cache *memcg_kmem_get_cache(struct kmem_cache *cachep)$/;"	f
memcg_kmem_put_cache	memcontrol.c	/^void memcg_kmem_put_cache(struct kmem_cache *cachep)$/;"	f
memcg_link_cache	slab.h	/^static inline void memcg_link_cache(struct kmem_cache *s,$/;"	f
memcg_link_cache	slab_common.c	/^void memcg_link_cache(struct kmem_cache *s, struct mem_cgroup *memcg)$/;"	f
memcg_low_reclaim	vmscan.c	/^	unsigned int memcg_low_reclaim:1;$/;"	m	struct:scan_control	file:
memcg_low_skipped	vmscan.c	/^	unsigned int memcg_low_skipped:1;$/;"	m	struct:scan_control	file:
memcg_nr_cache_ids	memcontrol.c	/^int memcg_nr_cache_ids;$/;"	v
memcg_numa_stat_show	memcontrol.c	/^static int memcg_numa_stat_show(struct seq_file *m, void *v)$/;"	f	file:
memcg_offline_kmem	memcontrol.c	/^static void memcg_offline_kmem(struct mem_cgroup *memcg)$/;"	f	file:
memcg_online_kmem	memcontrol.c	/^static int memcg_online_kmem(struct mem_cgroup *memcg)$/;"	f	file:
memcg_oom_lock_dep_map	memcontrol.c	/^static struct lockdep_map memcg_oom_lock_dep_map = {$/;"	v	typeref:struct:lockdep_map	file:
memcg_oom_recover	memcontrol.c	/^static void memcg_oom_recover(struct mem_cgroup *memcg)$/;"	f	file:
memcg_oom_wake_function	memcontrol.c	/^static int memcg_oom_wake_function(wait_queue_entry_t *wait,$/;"	f	file:
memcg_propagate_slab_attrs	slub.c	/^static inline void memcg_propagate_slab_attrs(struct kmem_cache *s) { }$/;"	f	file:
memcg_propagate_slab_attrs	slub.c	/^static void memcg_propagate_slab_attrs(struct kmem_cache *s)$/;"	f	file:
memcg_put_cache_ids	memcontrol.c	/^void memcg_put_cache_ids(void)$/;"	f
memcg_root_cache	slab.h	/^static inline struct kmem_cache *memcg_root_cache(struct kmem_cache *s)$/;"	f
memcg_schedule_kmem_cache_create	memcontrol.c	/^static void memcg_schedule_kmem_cache_create(struct mem_cgroup *memcg,$/;"	f	file:
memcg_set_kmem_cache_dying	slab_common.c	/^static void memcg_set_kmem_cache_dying(struct kmem_cache *s)$/;"	f	file:
memcg_set_shrinker_bit	memcontrol.c	/^void memcg_set_shrinker_bit(struct mem_cgroup *memcg, int nid, int shrinker_id)$/;"	f
memcg_shrinker_map_size	memcontrol.c	/^static int memcg_shrinker_map_size;$/;"	v	file:
memcg_slab_next	slab_common.c	/^void *memcg_slab_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f
memcg_slab_show	slab_common.c	/^int memcg_slab_show(struct seq_file *m, void *p)$/;"	f
memcg_slab_start	slab_common.c	/^void *memcg_slab_start(struct seq_file *m, loff_t *pos)$/;"	f
memcg_slab_stop	slab_common.c	/^void memcg_slab_stop(struct seq_file *m, void *p)$/;"	f
memcg_slabinfo	slab_common.c	/^DEFINE_SHOW_ATTRIBUTE(memcg_slabinfo);$/;"	v
memcg_slabinfo_init	slab_common.c	/^late_initcall(memcg_slabinfo_init);$/;"	v
memcg_slabinfo_init	slab_common.c	/^static int __init memcg_slabinfo_init(void)$/;"	f	file:
memcg_slabinfo_show	slab_common.c	/^static int memcg_slabinfo_show(struct seq_file *m, void *unused)$/;"	f	file:
memcg_sockets_enabled_key	memcontrol.c	/^DEFINE_STATIC_KEY_FALSE(memcg_sockets_enabled_key);$/;"	v
memcg_sockets_enabled_key	memcontrol.c	/^EXPORT_SYMBOL(memcg_sockets_enabled_key);$/;"	v
memcg_stat_show	memcontrol.c	/^static int memcg_stat_show(struct seq_file *m, void *v)$/;"	f	file:
memcg_stock_pcp	memcontrol.c	/^struct memcg_stock_pcp {$/;"	s	file:
memcg_sysfs_enabled	slub.c	/^static bool memcg_sysfs_enabled = IS_ENABLED(CONFIG_SLUB_MEMCG_SYSFS_ON);$/;"	v	file:
memcg_to_vmpressure	memcontrol.c	/^struct vmpressure *memcg_to_vmpressure(struct mem_cgroup *memcg)$/;"	f
memcg_uncharge_slab	slab.h	/^static __always_inline void memcg_uncharge_slab(struct page *page, int order,$/;"	f
memcg_uncharge_slab	slab.h	/^static inline void memcg_uncharge_slab(struct page *page, int order,$/;"	f
memcg_unlink_cache	slab_common.c	/^static inline void memcg_unlink_cache(struct kmem_cache *s)$/;"	f	file:
memcg_unlink_cache	slab_common.c	/^static void memcg_unlink_cache(struct kmem_cache *s)$/;"	f	file:
memcg_update_all_caches	slab_common.c	/^int memcg_update_all_caches(int num_memcgs)$/;"	f
memcg_update_all_list_lrus	list_lru.c	/^int memcg_update_all_list_lrus(int new_size)$/;"	f
memcg_update_kmem_max	memcontrol.c	/^static int memcg_update_kmem_max(struct mem_cgroup *memcg,$/;"	f	file:
memcg_update_list_lru	list_lru.c	/^static int memcg_update_list_lru(struct list_lru *lru,$/;"	f	file:
memcg_update_list_lru_node	list_lru.c	/^static int memcg_update_list_lru_node(struct list_lru_node *nlru,$/;"	f	file:
memcg_update_tcp_max	memcontrol.c	/^static int memcg_update_tcp_max(struct mem_cgroup *memcg, unsigned long max)$/;"	f	file:
memcg_wb_domain_exit	memcontrol.c	/^static void memcg_wb_domain_exit(struct mem_cgroup *memcg)$/;"	f	file:
memcg_wb_domain_init	memcontrol.c	/^static int memcg_wb_domain_init(struct mem_cgroup *memcg, gfp_t gfp)$/;"	f	file:
memcg_wb_domain_size_changed	memcontrol.c	/^static void memcg_wb_domain_size_changed(struct mem_cgroup *memcg)$/;"	f	file:
memcg_write_event_control	memcontrol.c	/^static ssize_t memcg_write_event_control(struct kernfs_open_file *of,$/;"	f	file:
memcmp_pages	util.c	/^int memcmp_pages(struct page *page1, struct page *page2)$/;"	f
memcpy	kasan/common.c	/^void *memcpy(void *dest, const void *src, size_t len)$/;"	f
memcpy	kasan/common.c	119;"	d	file:
memdup_user	util.c	/^EXPORT_SYMBOL(memdup_user);$/;"	v
memdup_user	util.c	/^void *memdup_user(const void __user *src, size_t len)$/;"	f
memdup_user_nul	util.c	/^EXPORT_SYMBOL(memdup_user_nul);$/;"	v
memdup_user_nul	util.c	/^void *memdup_user_nul(const void __user *src, size_t len)$/;"	f
memfd_add_seals	memfd.c	/^static int memfd_add_seals(struct file *file, unsigned int seals)$/;"	f	file:
memfd_fcntl	memfd.c	/^long memfd_fcntl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f
memfd_file_seals_ptr	memfd.c	/^static unsigned int *memfd_file_seals_ptr(struct file *file)$/;"	f	file:
memfd_get_seals	memfd.c	/^static int memfd_get_seals(struct file *file)$/;"	f	file:
memfd_tag_pins	memfd.c	/^static void memfd_tag_pins(struct xa_state *xas)$/;"	f	file:
memfd_wait_for_pins	memfd.c	/^static int memfd_wait_for_pins(struct address_space *mapping)$/;"	f	file:
memhp_auto_online	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(memhp_auto_online);$/;"	v
memhp_auto_online	memory_hotplug.c	/^bool memhp_auto_online = true;$/;"	v
memhp_auto_online	memory_hotplug.c	/^bool memhp_auto_online;$/;"	v
memmap_init	page_alloc.c	/^void __meminit __weak memmap_init(unsigned long size, int nid,$/;"	f
memmap_init_zone	page_alloc.c	/^void __meminit memmap_init_zone(unsigned long size, int nid, unsigned long zone,$/;"	f
memmap_init_zone_device	page_alloc.c	/^void __ref memmap_init_zone_device(struct zone *zone,$/;"	f
memmap_valid_within	mmzone.c	/^bool memmap_valid_within(unsigned long pfn,$/;"	f
memmove	kasan/common.c	/^void *memmove(void *dest, const void *src, size_t len)$/;"	f
memmove	kasan/common.c	110;"	d	file:
memory_cgrp_subsys	memcontrol.c	/^EXPORT_SYMBOL(memory_cgrp_subsys);$/;"	v
memory_cgrp_subsys	memcontrol.c	/^struct cgroup_subsys memory_cgrp_subsys = {$/;"	v	typeref:struct:cgroup_subsys
memory_current_read	memcontrol.c	/^static u64 memory_current_read(struct cgroup_subsys_state *css,$/;"	f	file:
memory_events_local_show	memcontrol.c	/^static int memory_events_local_show(struct seq_file *m, void *v)$/;"	f	file:
memory_events_show	memcontrol.c	/^static int memory_events_show(struct seq_file *m, void *v)$/;"	f	file:
memory_failure	memory-failure.c	/^EXPORT_SYMBOL_GPL(memory_failure);$/;"	v
memory_failure	memory-failure.c	/^int memory_failure(unsigned long pfn, int flags)$/;"	f
memory_failure_cpu	memory-failure.c	/^struct memory_failure_cpu {$/;"	s	file:
memory_failure_dev_pagemap	memory-failure.c	/^static int memory_failure_dev_pagemap(unsigned long pfn, int flags,$/;"	f	file:
memory_failure_entry	memory-failure.c	/^struct memory_failure_entry {$/;"	s	file:
memory_failure_hugetlb	memory-failure.c	/^static int memory_failure_hugetlb(unsigned long pfn, int flags)$/;"	f	file:
memory_failure_init	memory-failure.c	/^core_initcall(memory_failure_init);$/;"	v
memory_failure_init	memory-failure.c	/^static int __init memory_failure_init(void)$/;"	f	file:
memory_failure_queue	memory-failure.c	/^EXPORT_SYMBOL_GPL(memory_failure_queue);$/;"	v
memory_failure_queue	memory-failure.c	/^void memory_failure_queue(unsigned long pfn, int flags)$/;"	f
memory_failure_work_func	memory-failure.c	/^static void memory_failure_work_func(struct work_struct *work)$/;"	f	file:
memory_files	memcontrol.c	/^static struct cftype memory_files[] = {$/;"	v	typeref:struct:cftype	file:
memory_high_show	memcontrol.c	/^static int memory_high_show(struct seq_file *m, void *v)$/;"	f	file:
memory_high_write	memcontrol.c	/^static ssize_t memory_high_write(struct kernfs_open_file *of,$/;"	f	file:
memory_is_nonzero	kasan/generic.c	/^static __always_inline unsigned long memory_is_nonzero(const void *start,$/;"	f	file:
memory_is_poisoned	kasan/generic.c	/^static __always_inline bool memory_is_poisoned(unsigned long addr, size_t size)$/;"	f	file:
memory_is_poisoned_1	kasan/generic.c	/^static __always_inline bool memory_is_poisoned_1(unsigned long addr)$/;"	f	file:
memory_is_poisoned_16	kasan/generic.c	/^static __always_inline bool memory_is_poisoned_16(unsigned long addr)$/;"	f	file:
memory_is_poisoned_2_4_8	kasan/generic.c	/^static __always_inline bool memory_is_poisoned_2_4_8(unsigned long addr,$/;"	f	file:
memory_is_poisoned_n	kasan/generic.c	/^static __always_inline bool memory_is_poisoned_n(unsigned long addr,$/;"	f	file:
memory_low_show	memcontrol.c	/^static int memory_low_show(struct seq_file *m, void *v)$/;"	f	file:
memory_low_write	memcontrol.c	/^static ssize_t memory_low_write(struct kernfs_open_file *of,$/;"	f	file:
memory_max_show	memcontrol.c	/^static int memory_max_show(struct seq_file *m, void *v)$/;"	f	file:
memory_max_write	memcontrol.c	/^static ssize_t memory_max_write(struct kernfs_open_file *of,$/;"	f	file:
memory_min_show	memcontrol.c	/^static int memory_min_show(struct seq_file *m, void *v)$/;"	f	file:
memory_min_write	memcontrol.c	/^static ssize_t memory_min_write(struct kernfs_open_file *of,$/;"	f	file:
memory_oom_group_show	memcontrol.c	/^static int memory_oom_group_show(struct seq_file *m, void *v)$/;"	f	file:
memory_oom_group_write	memcontrol.c	/^static ssize_t memory_oom_group_write(struct kernfs_open_file *of,$/;"	f	file:
memory_present	sparse.c	/^void __init memory_present(int nid, unsigned long start, unsigned long end)$/;"	f
memory_stat_format	memcontrol.c	/^static char *memory_stat_format(struct mem_cgroup *memcg)$/;"	f	file:
memory_stat_show	memcontrol.c	/^static int memory_stat_show(struct seq_file *m, void *v)$/;"	f	file:
mempolicy_nodemask_intersects	mempolicy.c	/^bool mempolicy_nodemask_intersects(struct task_struct *tsk,$/;"	f
mempolicy_operations	mempolicy.c	/^static const struct mempolicy_operations {$/;"	s	file:
mempolicy_slab_node	mempolicy.c	/^unsigned int mempolicy_slab_node(void)$/;"	f
mempool_alloc	mempool.c	/^EXPORT_SYMBOL(mempool_alloc);$/;"	v
mempool_alloc	mempool.c	/^void *mempool_alloc(mempool_t *pool, gfp_t gfp_mask)$/;"	f
mempool_alloc_pages	mempool.c	/^EXPORT_SYMBOL(mempool_alloc_pages);$/;"	v
mempool_alloc_pages	mempool.c	/^void *mempool_alloc_pages(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_alloc_slab	mempool.c	/^EXPORT_SYMBOL(mempool_alloc_slab);$/;"	v
mempool_alloc_slab	mempool.c	/^void *mempool_alloc_slab(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_create	mempool.c	/^EXPORT_SYMBOL(mempool_create);$/;"	v
mempool_create	mempool.c	/^mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_create_node	mempool.c	/^EXPORT_SYMBOL(mempool_create_node);$/;"	v
mempool_create_node	mempool.c	/^mempool_t *mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_destroy	mempool.c	/^EXPORT_SYMBOL(mempool_destroy);$/;"	v
mempool_destroy	mempool.c	/^void mempool_destroy(mempool_t *pool)$/;"	f
mempool_exit	mempool.c	/^EXPORT_SYMBOL(mempool_exit);$/;"	v
mempool_exit	mempool.c	/^void mempool_exit(mempool_t *pool)$/;"	f
mempool_free	mempool.c	/^EXPORT_SYMBOL(mempool_free);$/;"	v
mempool_free	mempool.c	/^void mempool_free(void *element, mempool_t *pool)$/;"	f
mempool_free_pages	mempool.c	/^EXPORT_SYMBOL(mempool_free_pages);$/;"	v
mempool_free_pages	mempool.c	/^void mempool_free_pages(void *element, void *pool_data)$/;"	f
mempool_free_slab	mempool.c	/^EXPORT_SYMBOL(mempool_free_slab);$/;"	v
mempool_free_slab	mempool.c	/^void mempool_free_slab(void *element, void *pool_data)$/;"	f
mempool_init	mempool.c	/^EXPORT_SYMBOL(mempool_init);$/;"	v
mempool_init	mempool.c	/^int mempool_init(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_init_node	mempool.c	/^EXPORT_SYMBOL(mempool_init_node);$/;"	v
mempool_init_node	mempool.c	/^int mempool_init_node(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,$/;"	f
mempool_kfree	mempool.c	/^EXPORT_SYMBOL(mempool_kfree);$/;"	v
mempool_kfree	mempool.c	/^void mempool_kfree(void *element, void *pool_data)$/;"	f
mempool_kmalloc	mempool.c	/^EXPORT_SYMBOL(mempool_kmalloc);$/;"	v
mempool_kmalloc	mempool.c	/^void *mempool_kmalloc(gfp_t gfp_mask, void *pool_data)$/;"	f
mempool_resize	mempool.c	/^EXPORT_SYMBOL(mempool_resize);$/;"	v
mempool_resize	mempool.c	/^int mempool_resize(mempool_t *pool, int new_min_nr)$/;"	f
memremap_pages	memremap.c	/^EXPORT_SYMBOL_GPL(memremap_pages);$/;"	v
memremap_pages	memremap.c	/^void *memremap_pages(struct dev_pagemap *pgmap, int nid)$/;"	f
memset	kasan/common.c	/^void *memset(void *addr, int c, size_t len)$/;"	f
memset	kasan/common.c	102;"	d	file:
memsw_cgroup_files	memcontrol.c	/^static struct cftype memsw_cgroup_files[] = {$/;"	v	typeref:struct:cftype	file:
memsw_cgroup_usage_register_event	memcontrol.c	/^static int memsw_cgroup_usage_register_event(struct mem_cgroup *memcg,$/;"	f	file:
memsw_cgroup_usage_unregister_event	memcontrol.c	/^static void memsw_cgroup_usage_unregister_event(struct mem_cgroup *memcg,$/;"	f	file:
memtest	memtest.c	/^static void __init memtest(u64 pattern, phys_addr_t start_phys, phys_addr_t size)$/;"	f	file:
memunmap_pages	memremap.c	/^EXPORT_SYMBOL_GPL(memunmap_pages);$/;"	v
memunmap_pages	memremap.c	/^void memunmap_pages(struct dev_pagemap *pgmap)$/;"	f
merge_across_nodes	ksm.c	/^KSM_ATTR(merge_across_nodes);$/;"	v
merge_across_nodes_show	ksm.c	/^static ssize_t merge_across_nodes_show(struct kobject *kobj,$/;"	f	file:
merge_across_nodes_store	ksm.c	/^static ssize_t merge_across_nodes_store(struct kobject *kobj,$/;"	f	file:
merge_or_add_vmap_area	vmalloc.c	/^merge_or_add_vmap_area(struct vmap_area *va,$/;"	f	file:
metadata_access_disable	slub.c	/^static inline void metadata_access_disable(void)$/;"	f	file:
metadata_access_enable	slub.c	/^static inline void metadata_access_enable(void)$/;"	f	file:
mfill_atomic_pte	userfaultfd.c	/^static __always_inline ssize_t mfill_atomic_pte(struct mm_struct *dst_mm,$/;"	f	file:
mfill_zeropage	userfaultfd.c	/^ssize_t mfill_zeropage(struct mm_struct *dst_mm, unsigned long start,$/;"	f
mfill_zeropage_pte	userfaultfd.c	/^static int mfill_zeropage_pte(struct mm_struct *dst_mm,$/;"	f	file:
middle_chunks	z3fold.c	/^	unsigned short middle_chunks;$/;"	m	struct:z3fold_header	file:
migrate_balanced_pgdat	migrate.c	/^static bool migrate_balanced_pgdat(struct pglist_data *pgdat,$/;"	f	file:
migrate_huge_page_move_mapping	migrate.c	/^int migrate_huge_page_move_mapping(struct address_space *mapping,$/;"	f
migrate_lock_init	zsmalloc.c	/^static void migrate_lock_init(struct zspage *zspage) {}$/;"	f	file:
migrate_lock_init	zsmalloc.c	/^static void migrate_lock_init(struct zspage *zspage)$/;"	f	file:
migrate_misplaced_page	migrate.c	/^int migrate_misplaced_page(struct page *page, struct vm_area_struct *vma,$/;"	f
migrate_misplaced_transhuge_page	migrate.c	/^int migrate_misplaced_transhuge_page(struct mm_struct *mm,$/;"	f
migrate_page	migrate.c	/^EXPORT_SYMBOL(migrate_page);$/;"	v
migrate_page	migrate.c	/^int migrate_page(struct address_space *mapping,$/;"	f
migrate_page_add	mempolicy.c	/^static int migrate_page_add(struct page *page, struct list_head *pagelist,$/;"	f	file:
migrate_page_copy	migrate.c	/^EXPORT_SYMBOL(migrate_page_copy);$/;"	v
migrate_page_copy	migrate.c	/^void migrate_page_copy(struct page *newpage, struct page *page)$/;"	f
migrate_page_move_mapping	migrate.c	/^EXPORT_SYMBOL(migrate_page_move_mapping);$/;"	v
migrate_page_move_mapping	migrate.c	/^int migrate_page_move_mapping(struct address_space *mapping,$/;"	f
migrate_page_states	migrate.c	/^EXPORT_SYMBOL(migrate_page_states);$/;"	v
migrate_page_states	migrate.c	/^void migrate_page_states(struct page *newpage, struct page *page)$/;"	f
migrate_pages	migrate.c	/^int migrate_pages(struct list_head *from, new_page_t get_new_page,$/;"	f
migrate_pfn	internal.h	/^	unsigned long migrate_pfn;	\/* isolate_migratepages search base *\/$/;"	m	struct:compact_control
migrate_prep	migrate.c	/^int migrate_prep(void)$/;"	f
migrate_prep_local	migrate.c	/^int migrate_prep_local(void)$/;"	f
migrate_read_lock	zsmalloc.c	/^static void migrate_read_lock(struct zspage *zspage) {}$/;"	f	file:
migrate_read_lock	zsmalloc.c	/^static void migrate_read_lock(struct zspage *zspage)$/;"	f	file:
migrate_read_unlock	zsmalloc.c	/^static void migrate_read_unlock(struct zspage *zspage) {}$/;"	f	file:
migrate_read_unlock	zsmalloc.c	/^static void migrate_read_unlock(struct zspage *zspage)$/;"	f	file:
migrate_reason_names	debug.c	/^const char *migrate_reason_names[MR_TYPES] = {$/;"	v
migrate_to_node	mempolicy.c	/^static int migrate_to_node(struct mm_struct *mm, int source, int dest,$/;"	f	file:
migrate_vma_check_page	migrate.c	/^static bool migrate_vma_check_page(struct page *page)$/;"	f	file:
migrate_vma_collect	migrate.c	/^static void migrate_vma_collect(struct migrate_vma *migrate)$/;"	f	file:
migrate_vma_collect_hole	migrate.c	/^static int migrate_vma_collect_hole(unsigned long start,$/;"	f	file:
migrate_vma_collect_pmd	migrate.c	/^static int migrate_vma_collect_pmd(pmd_t *pmdp,$/;"	f	file:
migrate_vma_collect_skip	migrate.c	/^static int migrate_vma_collect_skip(unsigned long start,$/;"	f	file:
migrate_vma_finalize	migrate.c	/^EXPORT_SYMBOL(migrate_vma_finalize);$/;"	v
migrate_vma_finalize	migrate.c	/^void migrate_vma_finalize(struct migrate_vma *migrate)$/;"	f
migrate_vma_insert_page	migrate.c	/^static void migrate_vma_insert_page(struct migrate_vma *migrate,$/;"	f	file:
migrate_vma_pages	migrate.c	/^EXPORT_SYMBOL(migrate_vma_pages);$/;"	v
migrate_vma_pages	migrate.c	/^void migrate_vma_pages(struct migrate_vma *migrate)$/;"	f
migrate_vma_prepare	migrate.c	/^static void migrate_vma_prepare(struct migrate_vma *migrate)$/;"	f	file:
migrate_vma_setup	migrate.c	/^EXPORT_SYMBOL(migrate_vma_setup);$/;"	v
migrate_vma_setup	migrate.c	/^int migrate_vma_setup(struct migrate_vma *args)$/;"	f
migrate_vma_unmap	migrate.c	/^static void migrate_vma_unmap(struct migrate_vma *migrate)$/;"	f	file:
migrate_vma_walk_ops	migrate.c	/^static const struct mm_walk_ops migrate_vma_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
migrate_write_lock	zsmalloc.c	/^static void migrate_write_lock(struct zspage *zspage)$/;"	f	file:
migrate_write_unlock	zsmalloc.c	/^static void migrate_write_unlock(struct zspage *zspage)$/;"	f	file:
migrate_zspage	zsmalloc.c	/^static int migrate_zspage(struct zs_pool *pool, struct size_class *class,$/;"	f	file:
migratepages	internal.h	/^	struct list_head migratepages;	\/* List of pages being migrated *\/$/;"	m	struct:compact_control	typeref:struct:compact_control::list_head
migratetype	internal.h	/^	int migratetype;		\/* migratetype of direct compactor *\/$/;"	m	struct:compact_control
migratetype	internal.h	/^	int migratetype;$/;"	m	struct:alloc_context
migratetype_names	page_alloc.c	/^const char * const migratetype_names[MIGRATE_TYPES] = {$/;"	v
migration_entry_wait	migrate.c	/^void migration_entry_wait(struct mm_struct *mm, pmd_t *pmd,$/;"	f
migration_entry_wait_huge	migrate.c	/^void migration_entry_wait_huge(struct vm_area_struct *vma,$/;"	f
migration_wait	zsmalloc.c	/^	struct wait_queue_head migration_wait;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::wait_queue_head	file:
min_addr	kmemleak.c	/^static unsigned long min_addr = ULONG_MAX;$/;"	v	file:
min_alloc_size	percpu-internal.h	/^	size_t min_alloc_size;	\/* min allocaiton size *\/$/;"	m	struct:percpu_stats
min_count	kmemleak.c	/^	int min_count;$/;"	m	struct:kmemleak_object	file:
min_free_kbytes	page_alloc.c	/^int min_free_kbytes = 1024;$/;"	v
min_low_pfn	memblock.c	/^unsigned long min_low_pfn;$/;"	v
min_order	page_alloc.c	/^	u32 min_order;$/;"	m	struct:__anon7	file:
min_partial	slub.c	/^SLAB_ATTR(min_partial);$/;"	v
min_partial_show	slub.c	/^static ssize_t min_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
min_partial_store	slub.c	/^static ssize_t min_partial_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
min_pid	slub.c	/^	long min_pid;$/;"	m	struct:location	file:
min_ratio_store	backing-dev.c	/^static ssize_t min_ratio_store(struct device *dev,$/;"	f	file:
min_time	slub.c	/^	long min_time;$/;"	m	struct:location	file:
mincore_hugetlb	mincore.c	/^static int mincore_hugetlb(pte_t *pte, unsigned long hmask, unsigned long addr,$/;"	f	file:
mincore_page	mincore.c	/^static unsigned char mincore_page(struct address_space *mapping, pgoff_t pgoff)$/;"	f	file:
mincore_pte_range	mincore.c	/^static int mincore_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,$/;"	f	file:
mincore_unmapped_range	mincore.c	/^static int mincore_unmapped_range(unsigned long addr, unsigned long end,$/;"	f	file:
mincore_walk_ops	mincore.c	/^static const struct mm_walk_ops mincore_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
mlock	memory-failure.c	828;"	d	file:
mlock	memory-failure.c	877;"	d	file:
mlock_fixup	mlock.c	/^static int mlock_fixup(struct vm_area_struct *vma, struct vm_area_struct **prev,$/;"	f	file:
mlock_future_check	mmap.c	/^static inline int mlock_future_check(struct mm_struct *mm,$/;"	f	file:
mlock_migrate_page	internal.h	/^static inline void mlock_migrate_page(struct page *new, struct page *old) { }$/;"	f
mlock_migrate_page	internal.h	/^static inline void mlock_migrate_page(struct page *newpage, struct page *page)$/;"	f
mlock_vma_page	internal.h	/^static inline void mlock_vma_page(struct page *page) { }$/;"	f
mlock_vma_page	mlock.c	/^void mlock_vma_page(struct page *page)$/;"	f
mm	khugepaged.c	/^	struct mm_struct *mm;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::mm_struct	file:
mm	ksm.c	/^	struct mm_struct *mm;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::mm_struct	file:
mm	ksm.c	/^	struct mm_struct *mm;$/;"	m	struct:rmap_item	typeref:struct:rmap_item::mm_struct	file:
mm	memcontrol.c	/^	struct mm_struct  *mm;$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::mm_struct	file:
mm_alloc_pmd	userfaultfd.c	/^static pmd_t *mm_alloc_pmd(struct mm_struct *mm, unsigned long address)$/;"	f	file:
mm_compute_batch	mm_init.c	/^static void __meminit mm_compute_batch(void)$/;"	f	file:
mm_compute_batch_init	mm_init.c	/^__initcall(mm_compute_batch_init);$/;"	v
mm_compute_batch_init	mm_init.c	/^static int __init mm_compute_batch_init(void)$/;"	f	file:
mm_compute_batch_notifier	mm_init.c	/^static int __meminit mm_compute_batch_notifier(struct notifier_block *self,$/;"	f	file:
mm_drop_all_locks	mmap.c	/^void mm_drop_all_locks(struct mm_struct *mm)$/;"	f
mm_find_pmd	rmap.c	/^pmd_t *mm_find_pmd(struct mm_struct *mm, unsigned long address)$/;"	f
mm_get_huge_zero_page	huge_memory.c	/^struct page *mm_get_huge_zero_page(struct mm_struct *mm)$/;"	f
mm_head	khugepaged.c	/^	struct list_head mm_head;$/;"	m	struct:khugepaged_scan	typeref:struct:khugepaged_scan::list_head	file:
mm_kobj	mm_init.c	/^EXPORT_SYMBOL_GPL(mm_kobj);$/;"	v
mm_kobj	mm_init.c	/^struct kobject *mm_kobj;$/;"	v	typeref:struct:kobject
mm_list	ksm.c	/^	struct list_head mm_list;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::list_head	file:
mm_node	khugepaged.c	/^	struct list_head mm_node;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::list_head	file:
mm_percpu_wq	vmstat.c	/^struct workqueue_struct *mm_percpu_wq;$/;"	v	typeref:struct:workqueue_struct
mm_put_huge_zero_page	huge_memory.c	/^void mm_put_huge_zero_page(struct mm_struct *mm)$/;"	f
mm_shuffle_ctl	shuffle.h	/^enum mm_shuffle_ctl {$/;"	g
mm_slot	khugepaged.c	/^	struct mm_slot *mm_slot;$/;"	m	struct:khugepaged_scan	typeref:struct:khugepaged_scan::mm_slot	file:
mm_slot	khugepaged.c	/^struct mm_slot {$/;"	s	file:
mm_slot	ksm.c	/^	struct mm_slot *mm_slot;$/;"	m	struct:ksm_scan	typeref:struct:ksm_scan::mm_slot	file:
mm_slot	ksm.c	/^struct mm_slot {$/;"	s	file:
mm_slot_cache	ksm.c	/^static struct kmem_cache *mm_slot_cache;$/;"	v	typeref:struct:kmem_cache	file:
mm_sysfs_init	mm_init.c	/^postcore_initcall(mm_sysfs_init);$/;"	v
mm_sysfs_init	mm_init.c	/^static int __init mm_sysfs_init(void)$/;"	f	file:
mm_take_all_locks	mmap.c	/^int mm_take_all_locks(struct mm_struct *mm)$/;"	f
mmap_arg_struct	mmap.c	/^struct mmap_arg_struct {$/;"	s	file:
mmap_arg_struct	nommu.c	/^struct mmap_arg_struct {$/;"	s	file:
mmap_base	util.c	/^static unsigned long mmap_base(unsigned long rnd, struct rlimit *rlim_stack)$/;"	f	file:
mmap_init	mmap.c	/^void __init mmap_init(void)$/;"	f
mmap_init	nommu.c	/^void __init mmap_init(void)$/;"	f
mmap_is_legacy	util.c	/^static int mmap_is_legacy(struct rlimit *rlim_stack)$/;"	f	file:
mmap_pages_allocated	nommu.c	/^atomic_long_t mmap_pages_allocated;$/;"	v
mmap_region	mmap.c	/^unsigned long mmap_region(struct file *file, unsigned long addr,$/;"	f
mmap_rnd_bits_max	mmap.c	/^const int mmap_rnd_bits_max = CONFIG_ARCH_MMAP_RND_BITS_MAX;$/;"	v
mmap_rnd_bits_min	mmap.c	/^const int mmap_rnd_bits_min = CONFIG_ARCH_MMAP_RND_BITS_MIN;$/;"	v
mmap_rnd_compat_bits_max	mmap.c	/^const int mmap_rnd_compat_bits_max = CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MAX;$/;"	v
mmap_rnd_compat_bits_min	mmap.c	/^const int mmap_rnd_compat_bits_min = CONFIG_ARCH_MMAP_RND_COMPAT_BITS_MIN;$/;"	v
mminit_dprintk	internal.h	/^static inline void mminit_dprintk(enum mminit_level level,$/;"	f
mminit_dprintk	internal.h	432;"	d
mminit_level	internal.h	/^enum mminit_level {$/;"	g
mminit_loglevel	mm_init.c	/^int __meminitdata mminit_loglevel;$/;"	v
mminit_validate_memmodel_limits	internal.h	/^static inline void mminit_validate_memmodel_limits(unsigned long *start_pfn,$/;"	f
mminit_validate_memmodel_limits	sparse.c	/^void __meminit mminit_validate_memmodel_limits(unsigned long *start_pfn,$/;"	f
mminit_verify_pageflags_layout	internal.h	/^static inline void mminit_verify_pageflags_layout(void)$/;"	f
mminit_verify_pageflags_layout	mm_init.c	/^void __init mminit_verify_pageflags_layout(void)$/;"	f
mminit_verify_zonelist	internal.h	/^static inline void mminit_verify_zonelist(void)$/;"	f
mminit_verify_zonelist	mm_init.c	/^void __init mminit_verify_zonelist(void)$/;"	f
mmu-y	Makefile	/^mmu-y			:= nommu.o$/;"	m
mmu_notifier_free_rcu	mmu_notifier.c	/^static void mmu_notifier_free_rcu(struct rcu_head *rcu)$/;"	f	file:
mmu_notifier_get_locked	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_get_locked);$/;"	v
mmu_notifier_get_locked	mmu_notifier.c	/^struct mmu_notifier *mmu_notifier_get_locked(const struct mmu_notifier_ops *ops,$/;"	f
mmu_notifier_put	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_put);$/;"	v
mmu_notifier_put	mmu_notifier.c	/^void mmu_notifier_put(struct mmu_notifier *mn)$/;"	f
mmu_notifier_range_update_to_read_only	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_range_update_to_read_only);$/;"	v
mmu_notifier_range_update_to_read_only	mmu_notifier.c	/^mmu_notifier_range_update_to_read_only(const struct mmu_notifier_range *range)$/;"	f
mmu_notifier_register	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_register);$/;"	v
mmu_notifier_register	mmu_notifier.c	/^int mmu_notifier_register(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
mmu_notifier_synchronize	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_synchronize);$/;"	v
mmu_notifier_synchronize	mmu_notifier.c	/^void mmu_notifier_synchronize(void)$/;"	f
mmu_notifier_unregister	mmu_notifier.c	/^EXPORT_SYMBOL_GPL(mmu_notifier_unregister);$/;"	v
mmu_notifier_unregister	mmu_notifier.c	/^void mmu_notifier_unregister(struct mmu_notifier *mn, struct mm_struct *mm)$/;"	f
mod_memcg_obj_state	memcontrol.c	/^void mod_memcg_obj_state(void *p, int idx, int val)$/;"	f
mod_node_page_state	vmstat.c	/^EXPORT_SYMBOL(mod_node_page_state);$/;"	v
mod_node_page_state	vmstat.c	/^void mod_node_page_state(struct pglist_data *pgdat, enum node_stat_item item,$/;"	f
mod_node_state	vmstat.c	/^static inline void mod_node_state(struct pglist_data *pgdat,$/;"	f	file:
mod_zone_page_state	vmstat.c	/^EXPORT_SYMBOL(mod_zone_page_state);$/;"	v
mod_zone_page_state	vmstat.c	/^void mod_zone_page_state(struct zone *zone, enum zone_stat_item item,$/;"	f
mod_zone_state	vmstat.c	/^static inline void mod_zone_state(struct zone *zone,$/;"	f	file:
mod_zspage_inuse	zsmalloc.c	/^static inline void mod_zspage_inuse(struct zspage *zspage, int val)$/;"	f	file:
mode	internal.h	/^	enum migrate_mode mode;		\/* Async or sync migration mode *\/$/;"	m	struct:compact_control	typeref:enum:compact_control::migrate_mode
mode	shmem.c	/^	umode_t mode;$/;"	m	struct:shmem_options	file:
mode	vmpressure.c	/^	enum vmpressure_modes mode;$/;"	m	struct:vmpressure_event	typeref:enum:vmpressure_event::vmpressure_modes	file:
module_name	kasan/kasan.h	/^	const void *module_name;	\/* Name of the module where the global variable is declared. *\/$/;"	m	struct:kasan_global
movable_node_enabled	memory_hotplug.c	/^bool movable_node_enabled = false;$/;"	v
movable_zone	page_alloc.c	/^EXPORT_SYMBOL(movable_zone);$/;"	v
movable_zone	page_alloc.c	/^int movable_zone;$/;"	v
move_charge_struct	memcontrol.c	/^static struct move_charge_struct {$/;"	s	file:
move_freelist_head	compaction.c	/^move_freelist_head(struct list_head *freelist, struct page *freepage)$/;"	f	file:
move_freelist_tail	compaction.c	/^move_freelist_tail(struct list_head *freelist, struct page *freepage)$/;"	f	file:
move_freepages	page_alloc.c	/^static int move_freepages(struct zone *zone,$/;"	f	file:
move_freepages_block	page_alloc.c	/^int move_freepages_block(struct zone *zone, struct page *page,$/;"	f
move_huge_pmd	huge_memory.c	/^bool move_huge_pmd(struct vm_area_struct *vma, unsigned long old_addr,$/;"	f
move_hugetlb_state	hugetlb.c	/^void move_hugetlb_state(struct page *oldpage, struct page *newpage, int reason)$/;"	f
move_normal_pmd	mremap.c	/^static bool move_normal_pmd(struct vm_area_struct *vma, unsigned long old_addr,$/;"	f	file:
move_page_tables	mremap.c	/^unsigned long move_page_tables(struct vm_area_struct *vma,$/;"	f
move_pages_to_lru	vmscan.c	/^static unsigned noinline_for_stack move_pages_to_lru(struct lruvec *lruvec,$/;"	f	file:
move_pfn_range_to_zone	memory_hotplug.c	/^void __ref move_pfn_range_to_zone(struct zone *zone, unsigned long start_pfn,$/;"	f
move_ptes	mremap.c	/^static void move_ptes(struct vm_area_struct *vma, pmd_t *old_pmd,$/;"	f	file:
move_soft_dirty_pmd	huge_memory.c	/^static pmd_t move_soft_dirty_pmd(pmd_t pmd)$/;"	f	file:
move_soft_dirty_pte	mremap.c	/^static pte_t move_soft_dirty_pte(pte_t pte)$/;"	f	file:
move_to_new_page	migrate.c	/^static int move_to_new_page(struct page *newpage, struct page *page,$/;"	f	file:
move_vma	mremap.c	/^static unsigned long move_vma(struct vm_area_struct *vma,$/;"	f	file:
moved_charge	memcontrol.c	/^	unsigned long moved_charge;$/;"	m	struct:move_charge_struct	file:
moved_swap	memcontrol.c	/^	unsigned long moved_swap;$/;"	m	struct:move_charge_struct	file:
moving_task	memcontrol.c	/^	struct task_struct *moving_task;	\/* a task moving charges *\/$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::task_struct	file:
mpol	shmem.c	/^	struct mempolicy *mpol;$/;"	m	struct:shmem_options	typeref:struct:shmem_options::mempolicy	file:
mpol_free_shared_policy	mempolicy.c	/^void mpol_free_shared_policy(struct shared_policy *p)$/;"	f
mpol_misplaced	mempolicy.c	/^int mpol_misplaced(struct page *page, struct vm_area_struct *vma, unsigned long addr)$/;"	f
mpol_new	mempolicy.c	/^static struct mempolicy *mpol_new(unsigned short mode, unsigned short flags,$/;"	f	file:
mpol_new_bind	mempolicy.c	/^static int mpol_new_bind(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_new_interleave	mempolicy.c	/^static int mpol_new_interleave(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_new_preferred	mempolicy.c	/^static int mpol_new_preferred(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_ops	mempolicy.c	/^static const struct mempolicy_operations mpol_ops[MPOL_MAX] = {$/;"	v	typeref:struct:mempolicy_operations	file:
mpol_ops	mempolicy.c	/^} mpol_ops[MPOL_MAX];$/;"	v	typeref:struct:mempolicy_operations	file:
mpol_parse_str	mempolicy.c	/^int mpol_parse_str(char *str, struct mempolicy **mpol)$/;"	f
mpol_put_task_policy	mempolicy.c	/^void mpol_put_task_policy(struct task_struct *task)$/;"	f
mpol_rebind_default	mempolicy.c	/^static void mpol_rebind_default(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_rebind_mm	mempolicy.c	/^void mpol_rebind_mm(struct mm_struct *mm, nodemask_t *new)$/;"	f
mpol_rebind_nodemask	mempolicy.c	/^static void mpol_rebind_nodemask(struct mempolicy *pol, const nodemask_t *nodes)$/;"	f	file:
mpol_rebind_policy	mempolicy.c	/^static void mpol_rebind_policy(struct mempolicy *pol, const nodemask_t *newmask)$/;"	f	file:
mpol_rebind_preferred	mempolicy.c	/^static void mpol_rebind_preferred(struct mempolicy *pol,$/;"	f	file:
mpol_rebind_task	mempolicy.c	/^void mpol_rebind_task(struct task_struct *tsk, const nodemask_t *new)$/;"	f
mpol_relative_nodemask	mempolicy.c	/^static void mpol_relative_nodemask(nodemask_t *ret, const nodemask_t *orig,$/;"	f	file:
mpol_set_nodemask	mempolicy.c	/^static int mpol_set_nodemask(struct mempolicy *pol,$/;"	f	file:
mpol_set_shared_policy	mempolicy.c	/^int mpol_set_shared_policy(struct shared_policy *info,$/;"	f
mpol_shared_policy_init	mempolicy.c	/^void mpol_shared_policy_init(struct shared_policy *sp, struct mempolicy *mpol)$/;"	f
mpol_shared_policy_lookup	mempolicy.c	/^mpol_shared_policy_lookup(struct shared_policy *sp, unsigned long idx)$/;"	f
mpol_store_user_nodemask	mempolicy.c	/^static inline int mpol_store_user_nodemask(const struct mempolicy *pol)$/;"	f	file:
mpol_to_str	mempolicy.c	/^void mpol_to_str(char *buffer, int maxlen, struct mempolicy *pol)$/;"	f
mprotect_fixup	mprotect.c	/^mprotect_fixup(struct vm_area_struct *vma, struct vm_area_struct **pprev,$/;"	f
mremap_to	mremap.c	/^static unsigned long mremap_to(unsigned long addr, unsigned long old_len,$/;"	f	file:
munlock_vma_page	mlock.c	/^unsigned int munlock_vma_page(struct page *page)$/;"	f
munlock_vma_pages_all	internal.h	/^static inline void munlock_vma_pages_all(struct vm_area_struct *vma)$/;"	f
munlock_vma_pages_range	mlock.c	/^void munlock_vma_pages_range(struct vm_area_struct *vma,$/;"	f
n	cma_debug.c	/^	unsigned long n;$/;"	m	struct:cma_mem	file:
name	cma.h	/^	const char *name;$/;"	m	struct:cma
name	dmapool.c	/^	char name[32];$/;"	m	struct:dma_pool	file:
name	kasan/kasan.h	/^	const void *name;$/;"	m	struct:kasan_global
name	slab.h	/^	const char *name;	\/* Slab name for sysfs *\/$/;"	m	struct:kmem_cache
name	slab.h	/^	const char *name;$/;"	m	struct:kmalloc_info_struct
name	slub.c	/^	const char *name;$/;"	m	struct:saved_alias	file:
name	z3fold.c	/^	const char *name;$/;"	m	struct:z3fold_pool	file:
name	zsmalloc.c	/^	const char *name;$/;"	m	struct:zs_pool	file:
nd	memory-failure.c	/^	struct list_head nd;$/;"	m	struct:to_kill	typeref:struct:to_kill::list_head	file:
need_activate_page_drain	swap.c	/^static bool need_activate_page_drain(int cpu)$/;"	f	file:
need_page_idle	page_idle.c	/^static bool need_page_idle(void)$/;"	f	file:
need_page_owner	page_owner.c	/^static bool need_page_owner(void)$/;"	f	file:
need_update	vmstat.c	/^static bool need_update(int cpu)$/;"	f	file:
new_kmalloc_cache	slab_common.c	/^new_kmalloc_cache(int idx, int type, slab_flags_t flags)$/;"	f	file:
new_node_page	memory_hotplug.c	/^static struct page *new_node_page(struct page *page, unsigned long private)$/;"	f	file:
new_non_cma_page	gup.c	/^static struct page *new_non_cma_page(struct page *page, unsigned long private)$/;"	f	file:
new_page	memory-failure.c	/^static struct page *new_page(struct page *p, unsigned long private)$/;"	f	file:
new_page	mempolicy.c	/^static struct page *new_page(struct page *page, unsigned long start)$/;"	f	file:
new_slab	slub.c	/^static struct page *new_slab(struct kmem_cache *s, gfp_t flags, int node)$/;"	f	file:
new_slab_objects	slub.c	/^static inline void *new_slab_objects(struct kmem_cache *s, gfp_t flags,$/;"	f	file:
new_vmap_block	vmalloc.c	/^static void *new_vmap_block(unsigned int order, gfp_t gfp_mask)$/;"	f	file:
next	kasan/kasan.h	/^	struct qlist_node *next;$/;"	m	struct:qlist_node	typeref:struct:qlist_node::qlist_node
next	shmem.c	/^	pgoff_t next;		\/* the next page offset to be fallocated *\/$/;"	m	struct:shmem_falloc	file:
next	slub.c	/^	struct saved_alias *next;$/;"	m	struct:saved_alias	typeref:struct:saved_alias::saved_alias	file:
next	zsmalloc.c	/^		unsigned long next;$/;"	m	union:link_free::__anon21	file:
next_active_pageblock	memory_hotplug.c	/^static unsigned long next_active_pageblock(unsigned long pfn)$/;"	f	file:
next_freelist_entry	slub.c	/^static void *next_freelist_entry(struct kmem_cache *s, struct page *page,$/;"	f	file:
next_node_allowed	hugetlb.c	/^static int next_node_allowed(int nid, nodemask_t *nodes_allowed)$/;"	f	file:
next_online_pgdat	mmzone.c	/^struct pglist_data *next_online_pgdat(struct pglist_data *pgdat)$/;"	f
next_present_section_nr	sparse.c	/^static inline unsigned long next_present_section_nr(unsigned long section_nr)$/;"	f	file:
next_random_slot	slab.c	/^static freelist_idx_t next_random_slot(union freelist_init_state *state)$/;"	f	file:
next_reap	slab.h	/^	unsigned long next_reap;	\/* updated without locking *\/$/;"	m	struct:kmem_cache_node
next_reap_node	slab.c	/^static void next_reap_node(void)$/;"	f	file:
next_reap_node	slab.c	500;"	d	file:
next_se	swapfile.c	/^static inline struct swap_extent *next_se(struct swap_extent *se)$/;"	f	file:
next_search_order	compaction.c	/^static int next_search_order(struct compact_control *cc, int order)$/;"	f	file:
next_tid	slub.c	/^static inline unsigned long next_tid(unsigned long tid)$/;"	f	file:
next_zone	mmzone.c	/^struct zone *next_zone(struct zone *zone)$/;"	f
nid	ksm.c	/^		int nid;		\/* when node of unstable tree *\/$/;"	m	union:rmap_item::__anon18	file:
nid	ksm.c	/^	int nid;$/;"	m	struct:stable_node	file:
nmask	mempolicy.c	/^	nodemask_t *nmask;$/;"	m	struct:queue_pages	file:
no_more_pkmaps	highmem.c	/^static inline int no_more_pkmaps(unsigned int pkmap_nr, unsigned int color)$/;"	f	file:
no_page_table	gup.c	/^static struct page *no_page_table(struct vm_area_struct *vma,$/;"	f	file:
no_set_skip_hint	internal.h	/^	bool no_set_skip_hint;		\/* Don't mark blocks for skipping *\/$/;"	m	struct:compact_control
noaliencache_setup	slab.c	/^static int __init noaliencache_setup(char *s)$/;"	f	file:
node	cma_debug.c	/^	struct hlist_node node;$/;"	m	struct:cma_mem	typeref:struct:cma_mem::hlist_node	file:
node	kmemleak.c	/^	struct hlist_node node;$/;"	m	struct:kmemleak_scan_area	typeref:struct:kmemleak_scan_area::hlist_node	file:
node	ksm.c	/^		struct rb_node node;	\/* when node of stable tree *\/$/;"	m	union:stable_node::__anon14	typeref:struct:stable_node::__anon14::rb_node	file:
node	ksm.c	/^		struct rb_node node;	\/* when node of unstable tree *\/$/;"	m	union:rmap_item::__anon19	typeref:struct:rmap_item::__anon19::rb_node	file:
node	vmpressure.c	/^	struct list_head node;$/;"	m	struct:vmpressure_event	typeref:struct:vmpressure_event::list_head	file:
node	zswap.c	/^	struct hlist_node node;$/;"	m	struct:zswap_pool	typeref:struct:zswap_pool::hlist_node	file:
node_dirty_limit	page-writeback.c	/^static unsigned long node_dirty_limit(struct pglist_data *pgdat)$/;"	f	file:
node_dirty_ok	page-writeback.c	/^bool node_dirty_ok(struct pglist_data *pgdat)$/;"	f
node_dirtyable_memory	page-writeback.c	/^static unsigned long node_dirtyable_memory(struct pglist_data *pgdat)$/;"	f	file:
node_hstate	hugetlb.c	/^struct node_hstate {$/;"	s	file:
node_hstates	hugetlb.c	/^static struct node_hstate node_hstates[MAX_NUMNODES];$/;"	v	typeref:struct:node_hstate	file:
node_load	page_alloc.c	/^static int node_load[MAX_NUMNODES];$/;"	v	file:
node_map_pfn_alignment	page_alloc.c	/^unsigned long __init node_map_pfn_alignment(void)$/;"	f
node_match	slub.c	/^static inline int node_match(struct page *page, int node)$/;"	f	file:
node_nr_objs	slub.c	/^static inline unsigned long node_nr_objs(struct kmem_cache_node *n)$/;"	f	file:
node_nr_slabs	slub.c	/^static inline unsigned long node_nr_slabs(struct kmem_cache_node *n)$/;"	f	file:
node_page_state	vmstat.c	/^unsigned long node_page_state(struct pglist_data *pgdat,$/;"	f
node_pagecache_reclaimable	vmscan.c	/^static unsigned long node_pagecache_reclaimable(struct pglist_data *pgdat)$/;"	f	file:
node_reclaim	internal.h	/^static inline int node_reclaim(struct pglist_data *pgdat, gfp_t mask,$/;"	f
node_reclaim	vmscan.c	/^int node_reclaim(struct pglist_data *pgdat, gfp_t gfp_mask, unsigned int order)$/;"	f
node_states	page_alloc.c	/^EXPORT_SYMBOL(node_states);$/;"	v
node_states_check_changes_offline	memory_hotplug.c	/^static void node_states_check_changes_offline(unsigned long nr_pages,$/;"	f	file:
node_states_check_changes_online	memory_hotplug.c	/^static void node_states_check_changes_online(unsigned long nr_pages,$/;"	f	file:
node_states_clear_node	memory_hotplug.c	/^static void node_states_clear_node(int node, struct memory_notify *arg)$/;"	f	file:
node_states_set_node	memory_hotplug.c	/^static void node_states_set_node(int node, struct memory_notify *arg)$/;"	f	file:
node_to_va	vmalloc.c	/^static struct vmap_area *node_to_va(struct rb_node *n)$/;"	f	file:
node_unmapped_file_pages	vmscan.c	/^static inline unsigned long node_unmapped_file_pages(struct pglist_data *pgdat)$/;"	f	file:
nodemask	internal.h	/^	nodemask_t *nodemask;$/;"	m	struct:alloc_context
nodemask	vmscan.c	/^	nodemask_t	*nodemask;$/;"	m	struct:scan_control	file:
nodes	slub.c	/^	nodemask_t nodes;$/;"	m	struct:location	file:
nommu_region_sem	nommu.c	/^DECLARE_RWSEM(nommu_region_sem);$/;"	v
nommu_region_tree	nommu.c	/^struct rb_root nommu_region_tree = RB_ROOT;$/;"	v	typeref:struct:rb_root
nommu_shrink_inode_mappings	nommu.c	/^int nommu_shrink_inode_mappings(struct inode *inode, size_t size,$/;"	f
noop_backing_dev_info	backing-dev.c	/^EXPORT_SYMBOL_GPL(noop_backing_dev_info);$/;"	v
noop_backing_dev_info	backing-dev.c	/^struct backing_dev_info noop_backing_dev_info = {$/;"	v	typeref:struct:backing_dev_info
not_found	page_vma_mapped.c	/^static inline bool not_found(struct page_vma_mapped_walk *pvmw)$/;"	f	file:
note_cmpxchg_failure	slub.c	/^static inline void note_cmpxchg_failure(const char *n,$/;"	f	file:
notifiers_decrement	hmm.c	/^static void notifiers_decrement(struct hmm *hmm)$/;"	f	file:
nr	vmscan.c	/^	} nr;$/;"	m	struct:scan_control	typeref:struct:scan_control::__anon2	file:
nr_alloc	percpu-internal.h	/^	int			nr_alloc;	\/* # of allocations *\/$/;"	m	struct:pcpu_chunk
nr_alloc	percpu-internal.h	/^	u64 nr_alloc;		\/* lifetime # of allocations *\/$/;"	m	struct:percpu_stats
nr_anon	memcontrol.c	/^	unsigned long nr_anon;$/;"	m	struct:uncharge_gather	file:
nr_bits	percpu-internal.h	/^	int			nr_bits;	\/* total bits responsible for *\/$/;"	m	struct:pcpu_block_md
nr_chunks	percpu-internal.h	/^	u32 nr_chunks;		\/* current # of live chunks *\/$/;"	m	struct:percpu_stats
nr_cur_alloc	percpu-internal.h	/^	u64 nr_cur_alloc;	\/* current # of allocations *\/$/;"	m	struct:percpu_stats
nr_dealloc	percpu-internal.h	/^	u64 nr_dealloc;		\/* lifetime # of deallocations *\/$/;"	m	struct:percpu_stats
nr_empty_pop_pages	percpu-internal.h	/^	int                     nr_empty_pop_pages; \/* # of empty populated pages *\/$/;"	m	struct:pcpu_chunk
nr_falloced	shmem.c	/^	pgoff_t nr_falloced;	\/* how many new pages have been fallocated *\/$/;"	m	struct:shmem_falloc	file:
nr_file	memcontrol.c	/^	unsigned long nr_file;$/;"	m	struct:uncharge_gather	file:
nr_free_buffer_pages	page_alloc.c	/^EXPORT_SYMBOL_GPL(nr_free_buffer_pages);$/;"	v
nr_free_buffer_pages	page_alloc.c	/^unsigned long nr_free_buffer_pages(void)$/;"	f
nr_free_highpages	highmem.c	/^unsigned int nr_free_highpages (void)$/;"	f
nr_free_pagecache_pages	page_alloc.c	/^unsigned long nr_free_pagecache_pages(void)$/;"	f
nr_free_zone_pages	page_alloc.c	/^static unsigned long nr_free_zone_pages(int offset)$/;"	f	file:
nr_freepages	internal.h	/^	unsigned int nr_freepages;	\/* Number of isolated free pages *\/$/;"	m	struct:compact_control
nr_huge	memcontrol.c	/^	unsigned long nr_huge;$/;"	m	struct:uncharge_gather	file:
nr_hugepages	hugetlb.c	/^HSTATE_ATTR(nr_hugepages);$/;"	v
nr_hugepages_mempolicy	hugetlb.c	/^HSTATE_ATTR(nr_hugepages_mempolicy);$/;"	v
nr_hugepages_mempolicy_show	hugetlb.c	/^static ssize_t nr_hugepages_mempolicy_show(struct kobject *kobj,$/;"	f	file:
nr_hugepages_mempolicy_store	hugetlb.c	/^static ssize_t nr_hugepages_mempolicy_store(struct kobject *kobj,$/;"	f	file:
nr_hugepages_show	hugetlb.c	/^static ssize_t nr_hugepages_show(struct kobject *kobj,$/;"	f	file:
nr_hugepages_show_common	hugetlb.c	/^static ssize_t nr_hugepages_show_common(struct kobject *kobj,$/;"	f	file:
nr_hugepages_store	hugetlb.c	/^static ssize_t nr_hugepages_store(struct kobject *kobj,$/;"	f	file:
nr_hugepages_store_common	hugetlb.c	/^static ssize_t nr_hugepages_store_common(bool obey_mempolicy,$/;"	f	file:
nr_kmem	memcontrol.c	/^	unsigned long nr_kmem;$/;"	m	struct:uncharge_gather	file:
nr_max_alloc	percpu-internal.h	/^	u64 nr_max_alloc;	\/* max # of live allocations *\/$/;"	m	struct:percpu_stats
nr_max_chunks	percpu-internal.h	/^	u32 nr_max_chunks;	\/* max # of live chunks *\/$/;"	m	struct:percpu_stats
nr_migratepages	internal.h	/^	unsigned int nr_migratepages;	\/* Number of pages to migrate *\/$/;"	m	struct:compact_control
nr_node_ids	page_alloc.c	/^EXPORT_SYMBOL(nr_node_ids);$/;"	v
nr_online_nodes	page_alloc.c	/^EXPORT_SYMBOL(nr_online_nodes);$/;"	v
nr_overcommit_hugepages	hugetlb.c	/^HSTATE_ATTR(nr_overcommit_hugepages);$/;"	v
nr_overcommit_hugepages_show	hugetlb.c	/^static ssize_t nr_overcommit_hugepages_show(struct kobject *kobj,$/;"	f	file:
nr_overcommit_hugepages_store	hugetlb.c	/^static ssize_t nr_overcommit_hugepages_store(struct kobject *kobj,$/;"	f	file:
nr_pages	memcontrol.c	/^	unsigned int nr_pages;$/;"	m	struct:memcg_stock_pcp	file:
nr_pages	percpu-internal.h	/^	int			nr_pages;	\/* # of pages served by this chunk *\/$/;"	m	struct:pcpu_chunk
nr_pages_per_call	gup_benchmark.c	/^	__u32 nr_pages_per_call;$/;"	m	struct:gup_benchmark	file:
nr_partial	slab.h	/^	unsigned long nr_partial;$/;"	m	struct:kmem_cache_node
nr_populated	percpu-internal.h	/^	int			nr_populated;	\/* # of populated pages *\/$/;"	m	struct:pcpu_chunk
nr_pte_mapped_thp	khugepaged.c	/^	int nr_pte_mapped_thp;$/;"	m	struct:mm_slot	file:
nr_reclaimed	vmscan.c	/^	unsigned long nr_reclaimed;$/;"	m	struct:scan_control	file:
nr_rotate_swap	swapfile.c	/^atomic_t nr_rotate_swap = ATOMIC_INIT(0);$/;"	v
nr_scanned	vmscan.c	/^	unsigned long nr_scanned;$/;"	m	struct:scan_control	file:
nr_shmem	memcontrol.c	/^	unsigned long nr_shmem;$/;"	m	struct:uncharge_gather	file:
nr_slabs	slab.h	/^	atomic_long_t nr_slabs;$/;"	m	struct:kmem_cache_node
nr_swap_pages	swapfile.c	/^EXPORT_SYMBOL_GPL(nr_swap_pages);$/;"	v
nr_swap_pages	swapfile.c	/^atomic_long_t nr_swap_pages;$/;"	v
nr_swapfiles	swapfile.c	/^static unsigned int nr_swapfiles;$/;"	v	file:
nr_to_reclaim	vmscan.c	/^	unsigned long nr_to_reclaim;$/;"	m	struct:scan_control	file:
nr_unswapped	shmem.c	/^	pgoff_t nr_unswapped;	\/* how often writepage refused to swap out *\/$/;"	m	struct:shmem_falloc	file:
nr_vmalloc_pages	vmalloc.c	/^static atomic_long_t nr_vmalloc_pages;$/;"	v	file:
nr_wb_congested	backing-dev.c	/^static atomic_t nr_wb_congested[2];$/;"	v	file:
num_fault_mutexes	hugetlb.c	/^static int num_fault_mutexes;$/;"	v	file:
num_free_chunks	z3fold.c	/^static int num_free_chunks(struct z3fold_header *zhdr)$/;"	f	file:
num_free_chunks	zbud.c	/^static int num_free_chunks(struct zbud_header *zhdr)$/;"	f	file:
num_objs	slab.h	/^	unsigned long num_objs;$/;"	m	struct:slabinfo
num_slabs	slab.h	/^	unsigned long num_slabs;$/;"	m	struct:slabinfo
numa_default_policy	mempolicy.c	/^void numa_default_policy(void)$/;"	f
numa_migrate_prep	memory.c	/^static int numa_migrate_prep(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
numa_node	page_alloc.c	/^EXPORT_PER_CPU_SYMBOL(numa_node);$/;"	v
numa_policy_init	mempolicy.c	/^void __init numa_policy_init(void)$/;"	f
numa_zonelist_order	page_alloc.c	/^char numa_zonelist_order[] = "Node";$/;"	v
numa_zonelist_order_handler	page_alloc.c	/^int numa_zonelist_order_handler(struct ctl_table *table, int write,$/;"	f
numabalancing_override	mempolicy.c	/^static int __initdata numabalancing_override;$/;"	v	file:
numamigrate_isolate_page	migrate.c	/^static int numamigrate_isolate_page(pg_data_t *pgdat, struct page *page)$/;"	f	file:
obj-y	Makefile	/^obj-y			:= filemap.o mempool.o oom_kill.o fadvise.o \\$/;"	m
obj_free	zsmalloc.c	/^static void obj_free(struct size_class *class, unsigned long obj)$/;"	f	file:
obj_idx	zsmalloc.c	/^	int obj_idx;$/;"	m	struct:zs_compact_control	file:
obj_malloc	zsmalloc.c	/^static unsigned long obj_malloc(struct size_class *class,$/;"	f	file:
obj_offset	slab.c	/^static int obj_offset(struct kmem_cache *cachep)$/;"	f	file:
obj_offset	slab.c	358;"	d	file:
obj_to_head	zsmalloc.c	/^static unsigned long obj_to_head(struct page *page, void *obj)$/;"	f	file:
obj_to_location	zsmalloc.c	/^static void obj_to_location(unsigned long obj, struct page **page,$/;"	f	file:
object_cache	kmemleak.c	/^static struct kmem_cache *object_cache;$/;"	v	typeref:struct:kmem_cache	file:
object_err	slub.c	/^void object_err(struct kmem_cache *s, struct page *page,$/;"	f
object_list	kmemleak.c	/^	struct list_head object_list;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::list_head	file:
object_no_scan	kmemleak.c	/^static void object_no_scan(unsigned long ptr)$/;"	f	file:
object_set_excess_ref	kmemleak.c	/^static void object_set_excess_ref(unsigned long ptr, unsigned long excess_ref)$/;"	f	file:
object_size	slab.h	/^	unsigned int object_size;\/* The original size of the object *\/$/;"	m	struct:kmem_cache
object_size	slub.c	/^SLAB_ATTR_RO(object_size);$/;"	v
object_size_show	slub.c	/^static ssize_t object_size_show(struct kmem_cache *s, char *buf)$/;"	f	file:
object_tree_root	kmemleak.c	/^static struct rb_root object_tree_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
objects	slub.c	/^SLAB_ATTR_RO(objects);$/;"	v
objects_partial	slub.c	/^SLAB_ATTR_RO(objects_partial);$/;"	v
objects_partial_show	slub.c	/^static ssize_t objects_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objects_per_slab	slab.h	/^	unsigned int objects_per_slab;$/;"	m	struct:slabinfo
objects_show	slub.c	/^static ssize_t objects_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objs	zsmalloc.c	/^	unsigned long objs[NR_ZS_STAT_TYPE];$/;"	m	struct:zs_size_stat	file:
objs_per_slab	slub.c	/^SLAB_ATTR_RO(objs_per_slab);$/;"	v
objs_per_slab_show	slub.c	/^static ssize_t objs_per_slab_show(struct kmem_cache *s, char *buf)$/;"	f	file:
objs_per_zspage	zsmalloc.c	/^	int objs_per_zspage;$/;"	m	struct:size_class	file:
odr_indicator	kasan/kasan.h	/^	char *odr_indicator;$/;"	m	struct:kasan_global
offline_isolated_pages_cb	memory_hotplug.c	/^offline_isolated_pages_cb(unsigned long start, unsigned long nr_pages,$/;"	f	file:
offline_mem_sections	sparse.c	/^void offline_mem_sections(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
offline_page_ext	page_ext.c	/^static int __meminit offline_page_ext(unsigned long start_pfn,$/;"	f	file:
offline_pages	memory_hotplug.c	/^int offline_pages(unsigned long start_pfn, unsigned long nr_pages)$/;"	f
offset	dmapool.c	/^	unsigned int offset;$/;"	m	struct:dma_page	file:
offset	mmap.c	/^	unsigned long offset;$/;"	m	struct:mmap_arg_struct	file:
offset	nommu.c	/^	unsigned long offset;$/;"	m	struct:mmap_arg_struct	file:
offset	zswap.c	/^	pgoff_t offset;$/;"	m	struct:zswap_entry	file:
offset_il_node	mempolicy.c	/^static unsigned offset_il_node(struct mempolicy *pol, unsigned long n)$/;"	f	file:
offset_to_swap_extent	swapfile.c	/^offset_to_swap_extent(struct swap_info_struct *sis, unsigned long offset)$/;"	f	file:
oldchecksum	ksm.c	/^	unsigned int oldchecksum;	\/* when unstable *\/$/;"	m	struct:rmap_item	file:
on_freelist	slub.c	/^static int on_freelist(struct kmem_cache *s, struct page *page, void *search)$/;"	f	file:
ondemand_readahead	readahead.c	/^ondemand_readahead(struct address_space *mapping,$/;"	f	file:
one_stable_tree	ksm.c	/^static struct rb_root one_stable_tree[1] = { RB_ROOT };$/;"	v	typeref:struct:rb_root	file:
one_unstable_tree	ksm.c	/^static struct rb_root one_unstable_tree[1] = { RB_ROOT };$/;"	v	typeref:struct:rb_root	file:
online_mem_sections	sparse.c	/^void online_mem_sections(unsigned long start_pfn, unsigned long end_pfn)$/;"	f
online_memory_block	memory_hotplug.c	/^static int online_memory_block(struct memory_block *mem, void *arg)$/;"	f	file:
online_page_callback	memory_hotplug.c	/^static online_page_callback_t online_page_callback = generic_online_page;$/;"	v	file:
online_page_ext	page_ext.c	/^static int __meminit online_page_ext(unsigned long start_pfn,$/;"	f	file:
online_pages	memory_hotplug.c	/^int __ref online_pages(unsigned long pfn, unsigned long nr_pages, int online_type)$/;"	f
online_pages_range	memory_hotplug.c	/^static int online_pages_range(unsigned long start_pfn, unsigned long nr_pages,$/;"	f	file:
oo_make	slub.c	/^static inline struct kmem_cache_order_objects oo_make(unsigned int order,$/;"	f	file:
oo_objects	slub.c	/^static inline unsigned int oo_objects(struct kmem_cache_order_objects x)$/;"	f	file:
oo_order	slub.c	/^static inline unsigned int oo_order(struct kmem_cache_order_objects x)$/;"	f	file:
oom_badness	oom_kill.c	/^unsigned long oom_badness(struct task_struct *p, unsigned long totalpages)$/;"	f
oom_constraint_text	oom_kill.c	/^static const char * const oom_constraint_text[] = {$/;"	v	file:
oom_cpuset_eligible	oom_kill.c	/^static bool oom_cpuset_eligible(struct task_struct *start,$/;"	f	file:
oom_cpuset_eligible	oom_kill.c	/^static bool oom_cpuset_eligible(struct task_struct *tsk, struct oom_control *oc)$/;"	f	file:
oom_evaluate_task	oom_kill.c	/^static int oom_evaluate_task(struct task_struct *task, void *arg)$/;"	f	file:
oom_init	oom_kill.c	/^static int __init oom_init(void)$/;"	f	file:
oom_kill_memcg_member	oom_kill.c	/^static int oom_kill_memcg_member(struct task_struct *task, void *message)$/;"	f	file:
oom_kill_process	oom_kill.c	/^static void oom_kill_process(struct oom_control *oc, const char *message)$/;"	f	file:
oom_killer_disable	oom_kill.c	/^bool oom_killer_disable(signed long timeout)$/;"	f
oom_killer_enable	oom_kill.c	/^void oom_killer_enable(void)$/;"	f
oom_lock	oom_kill.c	/^DEFINE_MUTEX(oom_lock);$/;"	v
oom_reap_task	oom_kill.c	/^static void oom_reap_task(struct task_struct *tsk)$/;"	f	file:
oom_reap_task_mm	oom_kill.c	/^static bool oom_reap_task_mm(struct task_struct *tsk, struct mm_struct *mm)$/;"	f	file:
oom_reaper	oom_kill.c	/^static int oom_reaper(void *unused)$/;"	f	file:
oom_reaper_list	oom_kill.c	/^static struct task_struct *oom_reaper_list;$/;"	v	typeref:struct:task_struct	file:
oom_reaper_th	oom_kill.c	/^static struct task_struct *oom_reaper_th;$/;"	v	typeref:struct:task_struct	file:
oom_reserves_allowed	page_alloc.c	/^static bool oom_reserves_allowed(struct task_struct *tsk)$/;"	f	file:
oom_status	memcontrol.c	/^enum oom_status {$/;"	g	file:
oom_unkillable_task	oom_kill.c	/^static bool oom_unkillable_task(struct task_struct *p)$/;"	f	file:
oom_victims	oom_kill.c	/^static atomic_t oom_victims = ATOMIC_INIT(0);$/;"	v	file:
oom_wait_info	memcontrol.c	/^struct oom_wait_info {$/;"	s	file:
ops	z3fold.c	/^	const struct z3fold_ops *ops;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::z3fold_ops	file:
ops	zbud.c	/^	const struct zbud_ops *ops;$/;"	m	struct:zbud_pool	typeref:struct:zbud_pool::zbud_ops	file:
ops	zpool.c	/^	const struct zpool_ops *ops;$/;"	m	struct:zpool	typeref:struct:zpool::zpool_ops	file:
optimal_redzone	kasan/common.c	/^static inline unsigned int optimal_redzone(unsigned int object_size)$/;"	f	file:
order	internal.h	/^	int order;			\/* order a direct compactor needs *\/$/;"	m	struct:compact_control
order	page_owner.c	/^	unsigned short order;$/;"	m	struct:page_owner	file:
order	slub.c	/^SLAB_ATTR(order);$/;"	v
order	vmscan.c	/^	s8 order;$/;"	m	struct:scan_control	file:
order_objects	slub.c	/^static inline unsigned int order_objects(unsigned int order, unsigned int size)$/;"	f	file:
order_per_bit	cma.h	/^	unsigned int order_per_bit; \/* Order of pages represented by one bit *\/$/;"	m	struct:cma
order_show	slub.c	/^static ssize_t order_show(struct kmem_cache *s, char *buf)$/;"	f	file:
order_store	slub.c	/^static ssize_t order_store(struct kmem_cache *s,$/;"	f	file:
out_of_memory	oom_kill.c	/^bool out_of_memory(struct oom_control *oc)$/;"	f
overcommit_kbytes_handler	util.c	/^int overcommit_kbytes_handler(struct ctl_table *table, int write,$/;"	f
overcommit_ratio_handler	util.c	/^int overcommit_ratio_handler(struct ctl_table *table, int write,$/;"	f
overlap_memmap_init	page_alloc.c	/^overlap_memmap_init(unsigned long zone, unsigned long *pfn)$/;"	f	file:
overlaps	usercopy.c	/^static bool overlaps(const unsigned long ptr, unsigned long n,$/;"	f	file:
p	cma_debug.c	/^	struct page *p;$/;"	m	struct:cma_mem	typeref:struct:cma_mem::page	file:
p4d_clear_bad	pgtable-generic.c	/^void p4d_clear_bad(p4d_t *p4d)$/;"	f
pack_shadow	workingset.c	/^static void *pack_shadow(int memcgid, pg_data_t *pgdat, unsigned long eviction,$/;"	f	file:
page	filemap.c	/^	struct page *page;$/;"	m	struct:wait_page_key	typeref:struct:wait_page_key::page	file:
page	filemap.c	/^	struct page *page;$/;"	m	struct:wait_page_queue	typeref:struct:wait_page_queue::page	file:
page	highmem.c	/^	struct page *page;$/;"	m	struct:page_address_map	typeref:struct:page_address_map::page	file:
page	internal.h	/^	struct page *page;$/;"	m	struct:capture_control	typeref:struct:capture_control::page
page	memcontrol.c	/^	struct page	*page;$/;"	m	union:mc_target	typeref:struct:mc_target::page	file:
page	slub.c	/^	struct page *page;$/;"	m	struct:detached_freelist	typeref:struct:detached_freelist::page	file:
page-alloc-y	Makefile	/^page-alloc-y := page_alloc.o$/;"	m
page_action	memory-failure.c	/^static int page_action(struct page_state *ps, struct page *p,$/;"	f	file:
page_add_anon_rmap	rmap.c	/^void page_add_anon_rmap(struct page *page,$/;"	f
page_add_file_rmap	rmap.c	/^void page_add_file_rmap(struct page *page, bool compound)$/;"	f
page_add_new_anon_rmap	rmap.c	/^void page_add_new_anon_rmap(struct page *page,$/;"	f
page_address	highmem.c	/^EXPORT_SYMBOL(page_address);$/;"	v
page_address	highmem.c	/^void *page_address(const struct page *page)$/;"	f
page_address_htable	highmem.c	/^} ____cacheline_aligned_in_smp page_address_htable[1<<PA_HASH_ORDER];$/;"	v	typeref:struct:page_address_slot	file:
page_address_in_vma	rmap.c	/^unsigned long page_address_in_vma(struct page *page, struct vm_area_struct *vma)$/;"	f
page_address_init	highmem.c	/^void __init page_address_init(void)$/;"	f
page_address_map	highmem.c	/^struct page_address_map {$/;"	s	file:
page_address_maps	highmem.c	/^static struct page_address_map page_address_maps[LAST_PKMAP];$/;"	v	typeref:struct:page_address_map	file:
page_address_slot	highmem.c	/^static struct page_address_slot {$/;"	s	file:
page_alloc_cpu_dead	page_alloc.c	/^static int page_alloc_cpu_dead(unsigned int cpu)$/;"	f	file:
page_alloc_init	page_alloc.c	/^void __init page_alloc_init(void)$/;"	f
page_alloc_init_late	page_alloc.c	/^void __init page_alloc_init_late(void)$/;"	f
page_alloc_shuffle	shuffle.c	/^__meminit void page_alloc_shuffle(enum mm_shuffle_ctl ctl)$/;"	f
page_alloc_shuffle	shuffle.h	/^static inline void page_alloc_shuffle(enum mm_shuffle_ctl ctl)$/;"	f
page_alloc_shuffle_key	shuffle.c	/^DEFINE_STATIC_KEY_FALSE(page_alloc_shuffle_key);$/;"	v
page_alloc_shuffle_key	shuffle.h	/^DECLARE_STATIC_KEY_FALSE(page_alloc_shuffle_key);$/;"	v
page_anon_vma	util.c	/^struct anon_vma *page_anon_vma(struct page *page)$/;"	f
page_cache_async_readahead	readahead.c	/^EXPORT_SYMBOL_GPL(page_cache_async_readahead);$/;"	v
page_cache_async_readahead	readahead.c	/^page_cache_async_readahead(struct address_space *mapping,$/;"	f
page_cache_delete	filemap.c	/^static void page_cache_delete(struct address_space *mapping,$/;"	f	file:
page_cache_delete_batch	filemap.c	/^static void page_cache_delete_batch(struct address_space *mapping,$/;"	f	file:
page_cache_free_page	filemap.c	/^static void page_cache_free_page(struct address_space *mapping,$/;"	f	file:
page_cache_next_miss	filemap.c	/^EXPORT_SYMBOL(page_cache_next_miss);$/;"	v
page_cache_next_miss	filemap.c	/^pgoff_t page_cache_next_miss(struct address_space *mapping,$/;"	f
page_cache_prev_miss	filemap.c	/^EXPORT_SYMBOL(page_cache_prev_miss);$/;"	v
page_cache_prev_miss	filemap.c	/^pgoff_t page_cache_prev_miss(struct address_space *mapping,$/;"	f
page_cache_sync_readahead	readahead.c	/^EXPORT_SYMBOL_GPL(page_cache_sync_readahead);$/;"	v
page_cache_sync_readahead	readahead.c	/^void page_cache_sync_readahead(struct address_space *mapping,$/;"	f
page_cgroup_ino	memcontrol.c	/^ino_t page_cgroup_ino(struct page *page)$/;"	f
page_check_dirty_writeback	vmscan.c	/^static void page_check_dirty_writeback(struct page *page,$/;"	f	file:
page_check_references	vmscan.c	/^static enum page_references page_check_references(struct page *page,$/;"	f	file:
page_cluster	swap.c	/^int page_cluster;$/;"	v
page_counter_cancel	page_counter.c	/^void page_counter_cancel(struct page_counter *counter, unsigned long nr_pages)$/;"	f
page_counter_charge	page_counter.c	/^void page_counter_charge(struct page_counter *counter, unsigned long nr_pages)$/;"	f
page_counter_memparse	page_counter.c	/^int page_counter_memparse(const char *buf, const char *max,$/;"	f
page_counter_set_low	page_counter.c	/^void page_counter_set_low(struct page_counter *counter, unsigned long nr_pages)$/;"	f
page_counter_set_max	page_counter.c	/^int page_counter_set_max(struct page_counter *counter, unsigned long nr_pages)$/;"	f
page_counter_set_min	page_counter.c	/^void page_counter_set_min(struct page_counter *counter, unsigned long nr_pages)$/;"	f
page_counter_try_charge	page_counter.c	/^bool page_counter_try_charge(struct page_counter *counter,$/;"	f
page_counter_uncharge	page_counter.c	/^void page_counter_uncharge(struct page_counter *counter, unsigned long nr_pages)$/;"	f
page_cpupid_xchg_last	mmzone.c	/^int page_cpupid_xchg_last(struct page *page, int cpupid)$/;"	f
page_endio	filemap.c	/^EXPORT_SYMBOL_GPL(page_endio);$/;"	v
page_endio	filemap.c	/^void page_endio(struct page *page, bool is_write, int err)$/;"	f
page_evictable	vmscan.c	/^int page_evictable(struct page *page)$/;"	f
page_expected_state	page_alloc.c	/^static inline bool page_expected_state(struct page *page,$/;"	f	file:
page_ext_callback	page_ext.c	/^static int __meminit page_ext_callback(struct notifier_block *self,$/;"	f	file:
page_ext_init	page_ext.c	/^void __init page_ext_init(void)$/;"	f
page_ext_init_flatmem	page_ext.c	/^void __init page_ext_init_flatmem(void)$/;"	f
page_ext_ops	page_ext.c	/^static struct page_ext_operations *page_ext_ops[] = {$/;"	v	typeref:struct:page_ext_operations	file:
page_ext_size	page_ext.c	/^unsigned long page_ext_size = sizeof(struct page_ext);$/;"	v
page_frag_alloc	page_alloc.c	/^EXPORT_SYMBOL(page_frag_alloc);$/;"	v
page_frag_alloc	page_alloc.c	/^void *page_frag_alloc(struct page_frag_cache *nc,$/;"	f
page_frag_free	page_alloc.c	/^EXPORT_SYMBOL(page_frag_free);$/;"	v
page_frag_free	page_alloc.c	/^void page_frag_free(void *addr)$/;"	f
page_get_anon_vma	rmap.c	/^struct anon_vma *page_get_anon_vma(struct page *page)$/;"	f
page_huge_active	hugetlb.c	/^bool page_huge_active(struct page *page)$/;"	f
page_idle_attr_group	page_idle.c	/^static const struct attribute_group page_idle_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
page_idle_bin_attrs	page_idle.c	/^static struct bin_attribute *page_idle_bin_attrs[] = {$/;"	v	typeref:struct:bin_attribute	file:
page_idle_bitmap_attr	page_idle.c	/^static struct bin_attribute page_idle_bitmap_attr =$/;"	v	typeref:struct:bin_attribute	file:
page_idle_bitmap_read	page_idle.c	/^static ssize_t page_idle_bitmap_read(struct file *file, struct kobject *kobj,$/;"	f	file:
page_idle_bitmap_write	page_idle.c	/^static ssize_t page_idle_bitmap_write(struct file *file, struct kobject *kobj,$/;"	f	file:
page_idle_clear_pte_refs	page_idle.c	/^static void page_idle_clear_pte_refs(struct page *page)$/;"	f	file:
page_idle_clear_pte_refs_one	page_idle.c	/^static bool page_idle_clear_pte_refs_one(struct page *page,$/;"	f	file:
page_idle_get_page	page_idle.c	/^static struct page *page_idle_get_page(unsigned long pfn)$/;"	f	file:
page_idle_init	page_idle.c	/^static int __init page_idle_init(void)$/;"	f	file:
page_idle_init	page_idle.c	/^subsys_initcall(page_idle_init);$/;"	v
page_idle_ops	page_idle.c	/^struct page_ext_operations page_idle_ops = {$/;"	v	typeref:struct:page_ext_operations
page_init_poison	debug.c	/^EXPORT_SYMBOL_GPL(page_init_poison);$/;"	v
page_init_poison	debug.c	/^void page_init_poison(struct page *page, size_t size)$/;"	f
page_is_buddy	page_alloc.c	/^static inline int page_is_buddy(struct page *page, struct page *buddy,$/;"	f	file:
page_is_consistent	page_alloc.c	/^static int page_is_consistent(struct zone *zone, struct page *page)$/;"	f	file:
page_list	dmapool.c	/^	struct list_head page_list;$/;"	m	struct:dma_page	typeref:struct:dma_page::list_head	file:
page_list	dmapool.c	/^	struct list_head page_list;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::list_head	file:
page_lock	z3fold.c	/^	spinlock_t page_lock;$/;"	m	struct:z3fold_header	file:
page_lock_anon_vma_read	rmap.c	/^struct anon_vma *page_lock_anon_vma_read(struct page *page)$/;"	f
page_mapcount_is_zero	rmap.c	/^static int page_mapcount_is_zero(struct page *page)$/;"	f	file:
page_mapped	util.c	/^EXPORT_SYMBOL(page_mapped);$/;"	v
page_mapped	util.c	/^bool page_mapped(struct page *page)$/;"	f
page_mapped_in_vma	page_vma_mapped.c	/^int page_mapped_in_vma(struct page *page, struct vm_area_struct *vma)$/;"	f
page_mapping	util.c	/^EXPORT_SYMBOL(page_mapping);$/;"	v
page_mapping	util.c	/^struct address_space *page_mapping(struct page *page)$/;"	f
page_mapping_file	util.c	/^struct address_space *page_mapping_file(struct page *page)$/;"	f
page_mask	gup.c	/^	unsigned int page_mask;$/;"	m	struct:follow_page_context	file:
page_match	filemap.c	/^	int page_match;$/;"	m	struct:wait_page_key	file:
page_mkclean	rmap.c	/^EXPORT_SYMBOL_GPL(page_mkclean);$/;"	v
page_mkclean	rmap.c	/^int page_mkclean(struct page *page)$/;"	f
page_mkclean_one	rmap.c	/^static bool page_mkclean_one(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
page_move_anon_rmap	rmap.c	/^void page_move_anon_rmap(struct page *page, struct vm_area_struct *vma)$/;"	f
page_not_mapped	rmap.c	/^static int page_not_mapped(struct page *page)$/;"	f	file:
page_order	internal.h	/^static inline unsigned int page_order(struct page *page)$/;"	f
page_order_unsafe	internal.h	253;"	d
page_outside_zone_boundaries	page_alloc.c	/^static int page_outside_zone_boundaries(struct zone *zone, struct page *page)$/;"	f	file:
page_owner	page_owner.c	/^struct page_owner {$/;"	s	file:
page_owner_enabled	page_owner.c	/^static bool page_owner_enabled = false;$/;"	v	file:
page_owner_inited	page_owner.c	/^DEFINE_STATIC_KEY_FALSE(page_owner_inited);$/;"	v
page_owner_ops	page_owner.c	/^struct page_ext_operations page_owner_ops = {$/;"	v	typeref:struct:page_ext_operations
page_poisoning_enabled	page_poison.c	/^EXPORT_SYMBOL_GPL(page_poisoning_enabled);$/;"	v
page_poisoning_enabled	page_poison.c	/^bool page_poisoning_enabled(void)$/;"	f
page_ptl_cachep	memory.c	/^static struct kmem_cache *page_ptl_cachep;$/;"	v	typeref:struct:kmem_cache	file:
page_ref_freeze	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_freeze);$/;"	v
page_ref_mod	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_mod);$/;"	v
page_ref_mod_and_return	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_mod_and_return);$/;"	v
page_ref_mod_and_test	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_mod_and_test);$/;"	v
page_ref_mod_unless	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_mod_unless);$/;"	v
page_ref_set	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_set);$/;"	v
page_ref_unfreeze	debug_page_ref.c	/^EXPORT_TRACEPOINT_SYMBOL(page_ref_unfreeze);$/;"	v
page_referenced	rmap.c	/^int page_referenced(struct page *page,$/;"	f
page_referenced_arg	rmap.c	/^struct page_referenced_arg {$/;"	s	file:
page_referenced_one	rmap.c	/^static bool page_referenced_one(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
page_references	vmscan.c	/^enum page_references {$/;"	g	file:
page_remove_anon_compound_rmap	rmap.c	/^static void page_remove_anon_compound_rmap(struct page *page)$/;"	f	file:
page_remove_file_rmap	rmap.c	/^static void page_remove_file_rmap(struct page *page, bool compound)$/;"	f	file:
page_remove_rmap	rmap.c	/^void page_remove_rmap(struct page *page, bool compound)$/;"	f
page_rmapping	util.c	/^void *page_rmapping(struct page *page)$/;"	f
page_slot	highmem.c	/^static struct page_address_slot *page_slot(const struct page *page)$/;"	f	file:
page_stable_node	ksm.c	/^static inline struct stable_node *page_stable_node(struct page *page)$/;"	f	file:
page_state	memory-failure.c	/^static struct page_state {$/;"	s	file:
page_swap_info	swapfile.c	/^struct swap_info_struct *page_swap_info(struct page *page)$/;"	f
page_swapcount	swapfile.c	/^int page_swapcount(struct page *page)$/;"	f
page_swapped	swapfile.c	/^static bool page_swapped(struct page *page)$/;"	f	file:
page_table_shareable	hugetlb.c	/^static unsigned long page_table_shareable(struct vm_area_struct *svma,$/;"	f	file:
page_to_nid	sparse.c	/^EXPORT_SYMBOL(page_to_nid);$/;"	v
page_to_nid	sparse.c	/^int page_to_nid(const struct page *page)$/;"	f
page_trans_huge_map_swapcount	swapfile.c	/^static int page_trans_huge_map_swapcount(struct page *page, int *total_mapcount,$/;"	f	file:
page_trans_huge_mapcount	huge_memory.c	/^int page_trans_huge_mapcount(struct page *page, int *total_mapcount)$/;"	f
page_unlock_anon_vma_read	rmap.c	/^void page_unlock_anon_vma_read(struct anon_vma *anon_vma)$/;"	f
page_vma_mapped_walk	page_vma_mapped.c	/^bool page_vma_mapped_walk(struct page_vma_mapped_walk *pvmw)$/;"	f
page_waitqueue	filemap.c	/^static wait_queue_head_t *page_waitqueue(struct page *page)$/;"	f	file:
page_writeback_cpu_online	page-writeback.c	/^static int page_writeback_cpu_online(unsigned int cpu)$/;"	f	file:
page_writeback_init	page-writeback.c	/^void __init page_writeback_init(void)$/;"	f
pageblock_end_pfn	compaction.c	51;"	d	file:
pageblock_free	memory_hotplug.c	/^static inline int pageblock_free(struct page *page)$/;"	f	file:
pageblock_pfn_to_page	internal.h	/^static inline struct page *pageblock_pfn_to_page(unsigned long start_pfn,$/;"	f
pageblock_skip_persistent	compaction.c	/^static bool pageblock_skip_persistent(struct page *page)$/;"	f	file:
pageblock_skip_persistent	compaction.c	/^static inline bool pageblock_skip_persistent(struct page *page)$/;"	f	file:
pageblock_start_pfn	compaction.c	50;"	d	file:
pagecache_get_page	filemap.c	/^EXPORT_SYMBOL(pagecache_get_page);$/;"	v
pagecache_get_page	filemap.c	/^struct page *pagecache_get_page(struct address_space *mapping, pgoff_t offset,$/;"	f
pagecache_init	filemap.c	/^void __init pagecache_init(void)$/;"	f
pagecache_isize_extended	truncate.c	/^EXPORT_SYMBOL(pagecache_isize_extended);$/;"	v
pagecache_isize_extended	truncate.c	/^void pagecache_isize_extended(struct inode *inode, loff_t from, loff_t to)$/;"	f
pagecache_write_begin	filemap.c	/^EXPORT_SYMBOL(pagecache_write_begin);$/;"	v
pagecache_write_begin	filemap.c	/^int pagecache_write_begin(struct file *file, struct address_space *mapping,$/;"	f
pagecache_write_end	filemap.c	/^EXPORT_SYMBOL(pagecache_write_end);$/;"	v
pagecache_write_end	filemap.c	/^int pagecache_write_end(struct file *file, struct address_space *mapping,$/;"	f
pagefault_out_of_memory	oom_kill.c	/^void pagefault_out_of_memory(void)$/;"	f
pageflag_names	debug.c	/^const struct trace_print_flags pageflag_names[] = {$/;"	v	typeref:struct:trace_print_flags
pagelist	mempolicy.c	/^	struct list_head *pagelist;$/;"	m	struct:queue_pages	typeref:struct:queue_pages::list_head	file:
pageout	madvise.c	/^	bool pageout;$/;"	m	struct:madvise_walk_private	file:
pageout	vmscan.c	/^static pageout_t pageout(struct page *page, struct address_space *mapping,$/;"	f	file:
pageout_t	vmscan.c	/^} pageout_t;$/;"	t	typeref:enum:__anon3	file:
pageowner_init	page_owner.c	/^static int __init pageowner_init(void)$/;"	f	file:
pages_allocated	zsmalloc.c	/^	atomic_long_t pages_allocated;$/;"	m	struct:zs_pool	file:
pages_collapsed_attr	khugepaged.c	/^static struct kobj_attribute pages_collapsed_attr =$/;"	v	typeref:struct:kobj_attribute	file:
pages_collapsed_show	khugepaged.c	/^static ssize_t pages_collapsed_show(struct kobject *kobj,$/;"	f	file:
pages_nr	z3fold.c	/^	atomic64_t pages_nr;$/;"	m	struct:z3fold_pool	file:
pages_nr	zbud.c	/^	u64 pages_nr;$/;"	m	struct:zbud_pool	file:
pages_per_zspage	zsmalloc.c	/^	int pages_per_zspage;$/;"	m	struct:size_class	file:
pages_shared	ksm.c	/^KSM_ATTR_RO(pages_shared);$/;"	v
pages_shared_show	ksm.c	/^static ssize_t pages_shared_show(struct kobject *kobj,$/;"	f	file:
pages_sharing	ksm.c	/^KSM_ATTR_RO(pages_sharing);$/;"	v
pages_sharing_show	ksm.c	/^static ssize_t pages_sharing_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan	ksm.c	/^KSM_ATTR(pages_to_scan);$/;"	v
pages_to_scan_attr	khugepaged.c	/^static struct kobj_attribute pages_to_scan_attr =$/;"	v	typeref:struct:kobj_attribute	file:
pages_to_scan_show	khugepaged.c	/^static ssize_t pages_to_scan_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan_show	ksm.c	/^static ssize_t pages_to_scan_show(struct kobject *kobj,$/;"	f	file:
pages_to_scan_store	khugepaged.c	/^static ssize_t pages_to_scan_store(struct kobject *kobj,$/;"	f	file:
pages_to_scan_store	ksm.c	/^static ssize_t pages_to_scan_store(struct kobject *kobj,$/;"	f	file:
pages_unshared	ksm.c	/^KSM_ATTR_RO(pages_unshared);$/;"	v
pages_unshared_show	ksm.c	/^static ssize_t pages_unshared_show(struct kobject *kobj,$/;"	f	file:
pages_volatile	ksm.c	/^KSM_ATTR_RO(pages_volatile);$/;"	v
pages_volatile_show	ksm.c	/^static ssize_t pages_volatile_show(struct kobject *kobj,$/;"	f	file:
pageset_init	page_alloc.c	/^static void pageset_init(struct per_cpu_pageset *p)$/;"	f	file:
pageset_set_batch	page_alloc.c	/^static void pageset_set_batch(struct per_cpu_pageset *p, unsigned long batch)$/;"	f	file:
pageset_set_high	page_alloc.c	/^static void pageset_set_high(struct per_cpu_pageset *p,$/;"	f	file:
pageset_set_high_and_batch	page_alloc.c	/^static void pageset_set_high_and_batch(struct zone *zone,$/;"	f	file:
pageset_update	page_alloc.c	/^static void pageset_update(struct per_cpu_pages *pcp, unsigned long high,$/;"	f	file:
pagetypeinfo_op	vmstat.c	/^static const struct seq_operations pagetypeinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
pagetypeinfo_show	vmstat.c	/^static int pagetypeinfo_show(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showblockcount	vmstat.c	/^static int pagetypeinfo_showblockcount(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showblockcount_print	vmstat.c	/^static void pagetypeinfo_showblockcount_print(struct seq_file *m,$/;"	f	file:
pagetypeinfo_showfree	vmstat.c	/^static int pagetypeinfo_showfree(struct seq_file *m, void *arg)$/;"	f	file:
pagetypeinfo_showfree_print	vmstat.c	/^static void pagetypeinfo_showfree_print(struct seq_file *m,$/;"	f	file:
pagetypeinfo_showmixedcount	vmstat.c	/^static void pagetypeinfo_showmixedcount(struct seq_file *m, pg_data_t *pgdat)$/;"	f	file:
pagetypeinfo_showmixedcount_print	page_owner.c	/^void pagetypeinfo_showmixedcount_print(struct seq_file *m,$/;"	f
pagevec_lookup_entries	swap.c	/^unsigned pagevec_lookup_entries(struct pagevec *pvec,$/;"	f
pagevec_lookup_range	swap.c	/^EXPORT_SYMBOL(pagevec_lookup_range);$/;"	v
pagevec_lookup_range	swap.c	/^unsigned pagevec_lookup_range(struct pagevec *pvec,$/;"	f
pagevec_lookup_range_nr_tag	swap.c	/^EXPORT_SYMBOL(pagevec_lookup_range_nr_tag);$/;"	v
pagevec_lookup_range_nr_tag	swap.c	/^unsigned pagevec_lookup_range_nr_tag(struct pagevec *pvec,$/;"	f
pagevec_lookup_range_tag	swap.c	/^EXPORT_SYMBOL(pagevec_lookup_range_tag);$/;"	v
pagevec_lookup_range_tag	swap.c	/^unsigned pagevec_lookup_range_tag(struct pagevec *pvec,$/;"	f
pagevec_lru_move_fn	swap.c	/^static void pagevec_lru_move_fn(struct pagevec *pvec,$/;"	f	file:
pagevec_move_tail	swap.c	/^static void pagevec_move_tail(struct pagevec *pvec)$/;"	f	file:
pagevec_move_tail_fn	swap.c	/^static void pagevec_move_tail_fn(struct page *page, struct lruvec *lruvec,$/;"	f	file:
pagevec_remove_exceptionals	swap.c	/^void pagevec_remove_exceptionals(struct pagevec *pvec)$/;"	f
paint_it	kmemleak.c	/^static void paint_it(struct kmemleak_object *object, int color)$/;"	f	file:
paint_ptr	kmemleak.c	/^static void paint_ptr(unsigned long ptr, int color)$/;"	f	file:
parent_hugetlb_cgroup	hugetlb_cgroup.c	/^parent_hugetlb_cgroup(struct hugetlb_cgroup *h_cg)$/;"	f	file:
parent_nodeinfo	memcontrol.c	/^parent_nodeinfo(struct mem_cgroup_per_node *pn, int nid)$/;"	f	file:
parse_hardened_usercopy	usercopy.c	/^static int __init parse_hardened_usercopy(char *str)$/;"	f	file:
parse_memtest	memtest.c	/^static int __init parse_memtest(char *arg)$/;"	f	file:
parsed_hstate	hugetlb.c	/^static struct hstate * __initdata parsed_hstate;$/;"	v	typeref:struct:__initdata	file:
parsed_valid_hugepagesz	hugetlb.c	/^static bool __initdata parsed_valid_hugepagesz = true;$/;"	v	file:
partial	slab.h	/^	struct list_head partial;$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::list_head
partial	slub.c	/^SLAB_ATTR_RO(partial);$/;"	v
partial_show	slub.c	/^static ssize_t partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
pcpu_addr_in_chunk	percpu.c	/^static bool pcpu_addr_in_chunk(struct pcpu_chunk *chunk, void *addr)$/;"	f	file:
pcpu_addr_to_page	percpu-km.c	/^static struct page *pcpu_addr_to_page(void *addr)$/;"	f	file:
pcpu_addr_to_page	percpu-vm.c	/^static struct page *pcpu_addr_to_page(void *addr)$/;"	f	file:
pcpu_alloc	percpu.c	/^static void __percpu *pcpu_alloc(size_t size, size_t align, bool reserved,$/;"	f	file:
pcpu_alloc_alloc_info	percpu.c	/^struct pcpu_alloc_info * __init pcpu_alloc_alloc_info(int nr_groups,$/;"	f
pcpu_alloc_area	percpu.c	/^static int pcpu_alloc_area(struct pcpu_chunk *chunk, int alloc_bits,$/;"	f	file:
pcpu_alloc_chunk	percpu.c	/^static struct pcpu_chunk *pcpu_alloc_chunk(gfp_t gfp)$/;"	f	file:
pcpu_alloc_first_chunk	percpu.c	/^static struct pcpu_chunk * __init pcpu_alloc_first_chunk(unsigned long tmp_addr,$/;"	f	file:
pcpu_alloc_pages	percpu-vm.c	/^static int pcpu_alloc_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_atomic_alloc_failed	percpu.c	/^static bool pcpu_atomic_alloc_failed;$/;"	v	file:
pcpu_balance_workfn	percpu.c	/^static void pcpu_balance_workfn(struct work_struct *work)$/;"	f	file:
pcpu_base_addr	percpu.c	/^EXPORT_SYMBOL_GPL(pcpu_base_addr);$/;"	v
pcpu_block_md	percpu-internal.h	/^struct pcpu_block_md {$/;"	s
pcpu_block_off_to_off	percpu.c	/^static unsigned long pcpu_block_off_to_off(int index, int off)$/;"	f	file:
pcpu_block_refresh_hint	percpu.c	/^static void pcpu_block_refresh_hint(struct pcpu_chunk *chunk, int index)$/;"	f	file:
pcpu_block_update	percpu.c	/^static void pcpu_block_update(struct pcpu_block_md *block, int start, int end)$/;"	f	file:
pcpu_block_update_hint_alloc	percpu.c	/^static void pcpu_block_update_hint_alloc(struct pcpu_chunk *chunk, int bit_off,$/;"	f	file:
pcpu_block_update_hint_free	percpu.c	/^static void pcpu_block_update_hint_free(struct pcpu_chunk *chunk, int bit_off,$/;"	f	file:
pcpu_block_update_scan	percpu.c	/^static void pcpu_block_update_scan(struct pcpu_chunk *chunk, int bit_off,$/;"	f	file:
pcpu_build_alloc_info	percpu.c	/^static struct pcpu_alloc_info * __init pcpu_build_alloc_info($/;"	f	file:
pcpu_chunk	percpu-internal.h	/^struct pcpu_chunk {$/;"	s
pcpu_chunk_addr	percpu.c	/^static unsigned long pcpu_chunk_addr(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_addr_search	percpu.c	/^static struct pcpu_chunk *pcpu_chunk_addr_search(void *addr)$/;"	f	file:
pcpu_chunk_depopulated	percpu.c	/^static void pcpu_chunk_depopulated(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_map_bits	percpu-internal.h	/^static inline int pcpu_chunk_map_bits(struct pcpu_chunk *chunk)$/;"	f
pcpu_chunk_move	percpu.c	/^static void pcpu_chunk_move(struct pcpu_chunk *chunk, int slot)$/;"	f	file:
pcpu_chunk_nr_blocks	percpu-internal.h	/^static inline int pcpu_chunk_nr_blocks(struct pcpu_chunk *chunk)$/;"	f
pcpu_chunk_page	percpu-vm.c	/^static struct page *pcpu_chunk_page(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_chunk_populated	percpu.c	/^static void pcpu_chunk_populated(struct pcpu_chunk *chunk, int page_start,$/;"	f	file:
pcpu_chunk_refresh_hint	percpu.c	/^static void pcpu_chunk_refresh_hint(struct pcpu_chunk *chunk, bool full_scan)$/;"	f	file:
pcpu_chunk_relocate	percpu.c	/^static void pcpu_chunk_relocate(struct pcpu_chunk *chunk, int oslot)$/;"	f	file:
pcpu_chunk_slot	percpu.c	/^static int pcpu_chunk_slot(const struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_create_chunk	percpu-km.c	/^static struct pcpu_chunk *pcpu_create_chunk(gfp_t gfp)$/;"	f	file:
pcpu_create_chunk	percpu-vm.c	/^static struct pcpu_chunk *pcpu_create_chunk(gfp_t gfp)$/;"	f	file:
pcpu_depopulate_chunk	percpu-km.c	/^static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_depopulate_chunk	percpu-vm.c	/^static void pcpu_depopulate_chunk(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_destroy_chunk	percpu-km.c	/^static void pcpu_destroy_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_destroy_chunk	percpu-vm.c	/^static void pcpu_destroy_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_dfl_fc_alloc	percpu.c	/^static void * __init pcpu_dfl_fc_alloc(unsigned int cpu, size_t size,$/;"	f	file:
pcpu_dfl_fc_free	percpu.c	/^static void __init pcpu_dfl_fc_free(void *ptr, size_t size)$/;"	f	file:
pcpu_drain	page_alloc.c	/^struct pcpu_drain {$/;"	s	file:
pcpu_drain_mutex	page_alloc.c	/^DEFINE_MUTEX(pcpu_drain_mutex);$/;"	v
pcpu_dump_alloc_info	percpu.c	/^static void pcpu_dump_alloc_info(const char *lvl,$/;"	f	file:
pcpu_embed_first_chunk	percpu.c	/^int __init pcpu_embed_first_chunk(size_t reserved_size, size_t dyn_size,$/;"	f
pcpu_find_block_fit	percpu.c	/^static int pcpu_find_block_fit(struct pcpu_chunk *chunk, int alloc_bits,$/;"	f	file:
pcpu_find_zero_area	percpu.c	/^static unsigned long pcpu_find_zero_area(unsigned long *map,$/;"	f	file:
pcpu_for_each_fit_region	percpu.c	482;"	d	file:
pcpu_for_each_md_free_region	percpu.c	476;"	d	file:
pcpu_for_each_pop_region	percpu.c	295;"	d	file:
pcpu_for_each_unpop_region	percpu.c	290;"	d	file:
pcpu_free_alloc_info	percpu.c	/^void __init pcpu_free_alloc_info(struct pcpu_alloc_info *ai)$/;"	f
pcpu_free_area	percpu.c	/^static void pcpu_free_area(struct pcpu_chunk *chunk, int off)$/;"	f	file:
pcpu_free_chunk	percpu.c	/^static void pcpu_free_chunk(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_free_pages	percpu-vm.c	/^static void pcpu_free_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_free_vm_areas	vmalloc.c	/^void pcpu_free_vm_areas(struct vm_struct **vms, int nr_vms)$/;"	f
pcpu_get_page_chunk	percpu.c	/^static struct pcpu_chunk *pcpu_get_page_chunk(struct page *page)$/;"	f	file:
pcpu_get_pages	percpu-vm.c	/^static struct page **pcpu_get_pages(void)$/;"	f	file:
pcpu_get_vm_areas	vmalloc.c	/^struct vm_struct **pcpu_get_vm_areas(const unsigned long *offsets,$/;"	f
pcpu_index_alloc_map	percpu.c	/^static unsigned long *pcpu_index_alloc_map(struct pcpu_chunk *chunk, int index)$/;"	f	file:
pcpu_init_md_block	percpu.c	/^static void pcpu_init_md_block(struct pcpu_block_md *block, int nr_bits)$/;"	f	file:
pcpu_init_md_blocks	percpu.c	/^static void pcpu_init_md_blocks(struct pcpu_chunk *chunk)$/;"	f	file:
pcpu_is_populated	percpu.c	/^static bool pcpu_is_populated(struct pcpu_chunk *chunk, int bit_off, int bits,$/;"	f	file:
pcpu_lock	percpu.c	/^DEFINE_SPINLOCK(pcpu_lock);	\/* all internal data structures *\/$/;"	v
pcpu_map_pages	percpu-vm.c	/^static int pcpu_map_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_mem_free	percpu.c	/^static void pcpu_mem_free(void *ptr)$/;"	f	file:
pcpu_mem_zalloc	percpu.c	/^static void *pcpu_mem_zalloc(size_t size, gfp_t gfp)$/;"	f	file:
pcpu_next_fit_region	percpu.c	/^static void pcpu_next_fit_region(struct pcpu_chunk *chunk, int alloc_bits,$/;"	f	file:
pcpu_next_hint	percpu.c	/^static int pcpu_next_hint(struct pcpu_block_md *block, int alloc_bits)$/;"	f	file:
pcpu_next_md_free_region	percpu.c	/^static void pcpu_next_md_free_region(struct pcpu_chunk *chunk, int *bit_off,$/;"	f	file:
pcpu_next_pop	percpu.c	/^static void pcpu_next_pop(unsigned long *bitmap, int *rs, int *re, int end)$/;"	f	file:
pcpu_next_unpop	percpu.c	/^static void pcpu_next_unpop(unsigned long *bitmap, int *rs, int *re, int end)$/;"	f	file:
pcpu_nr_empty_pop_pages	percpu.c	/^int pcpu_nr_empty_pop_pages;$/;"	v
pcpu_nr_pages	percpu.c	/^unsigned long pcpu_nr_pages(void)$/;"	f
pcpu_nr_pages_to_map_bits	percpu-internal.h	/^static inline int pcpu_nr_pages_to_map_bits(int pages)$/;"	f
pcpu_nr_populated	percpu.c	/^static unsigned long pcpu_nr_populated;$/;"	v	file:
pcpu_off_to_block_index	percpu.c	/^static unsigned long pcpu_off_to_block_index(int off)$/;"	f	file:
pcpu_off_to_block_off	percpu.c	/^static unsigned long pcpu_off_to_block_off(int off)$/;"	f	file:
pcpu_page_first_chunk	percpu.c	/^int __init pcpu_page_first_chunk(size_t reserved_size,$/;"	f
pcpu_page_idx	percpu.c	/^static int __maybe_unused pcpu_page_idx(unsigned int cpu, int page_idx)$/;"	f	file:
pcpu_populate_chunk	percpu-km.c	/^static int pcpu_populate_chunk(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_populate_chunk	percpu-vm.c	/^static int pcpu_populate_chunk(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_post_map_flush	percpu-vm.c	/^static void pcpu_post_map_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_post_unmap_tlb_flush	percpu-vm.c	/^static void pcpu_post_unmap_tlb_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_pre_unmap_flush	percpu-vm.c	/^static void pcpu_pre_unmap_flush(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_region_overlap	percpu.c	/^static inline bool pcpu_region_overlap(int a, int b, int x, int y)$/;"	f	file:
pcpu_schedule_balance_work	percpu.c	/^static void pcpu_schedule_balance_work(void)$/;"	f	file:
pcpu_set_page_chunk	percpu.c	/^static void pcpu_set_page_chunk(struct page *page, struct pcpu_chunk *pcpu)$/;"	f	file:
pcpu_setup_first_chunk	percpu.c	/^void __init pcpu_setup_first_chunk(const struct pcpu_alloc_info *ai,$/;"	f
pcpu_size_to_slot	percpu.c	/^static int pcpu_size_to_slot(int size)$/;"	f	file:
pcpu_stats	percpu-stats.c	/^struct percpu_stats pcpu_stats;$/;"	v	typeref:struct:percpu_stats
pcpu_stats_ai	percpu-stats.c	/^struct pcpu_alloc_info pcpu_stats_ai;$/;"	v	typeref:struct:pcpu_alloc_info
pcpu_stats_area_alloc	percpu-internal.h	/^static inline void pcpu_stats_area_alloc(struct pcpu_chunk *chunk, size_t size)$/;"	f
pcpu_stats_area_dealloc	percpu-internal.h	/^static inline void pcpu_stats_area_dealloc(struct pcpu_chunk *chunk)$/;"	f
pcpu_stats_chunk_alloc	percpu-internal.h	/^static inline void pcpu_stats_chunk_alloc(void)$/;"	f
pcpu_stats_chunk_dealloc	percpu-internal.h	/^static inline void pcpu_stats_chunk_dealloc(void)$/;"	f
pcpu_stats_save_ai	percpu-internal.h	/^static inline void pcpu_stats_save_ai(const struct pcpu_alloc_info *ai)$/;"	f
pcpu_unit_page_offset	percpu.c	/^static unsigned long pcpu_unit_page_offset(unsigned int cpu, int page_idx)$/;"	f	file:
pcpu_unmap_pages	percpu-vm.c	/^static void pcpu_unmap_pages(struct pcpu_chunk *chunk,$/;"	f	file:
pcpu_update_empty_pages	percpu.c	/^static inline void pcpu_update_empty_pages(struct pcpu_chunk *chunk, int nr)$/;"	f	file:
pcpu_verify_alloc_info	percpu-km.c	/^static int __init pcpu_verify_alloc_info(const struct pcpu_alloc_info *ai)$/;"	f	file:
pcpu_verify_alloc_info	percpu-vm.c	/^static int __init pcpu_verify_alloc_info(const struct pcpu_alloc_info *ai)$/;"	f	file:
per_cpu_ptr_to_phys	percpu.c	/^phys_addr_t per_cpu_ptr_to_phys(void *addr)$/;"	f
per_cpu_remove_cache	kasan/quarantine.c	/^static void per_cpu_remove_cache(void *arg)$/;"	f	file:
per_node_hstate_attr_group	hugetlb.c	/^static const struct attribute_group per_node_hstate_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
per_node_hstate_attrs	hugetlb.c	/^static struct attribute *per_node_hstate_attrs[] = {$/;"	v	typeref:struct:attribute	file:
percpu_alloc_setup	percpu.c	/^static int __init percpu_alloc_setup(char *str)$/;"	f	file:
percpu_enable_async	percpu.c	/^static int __init percpu_enable_async(void)$/;"	f	file:
percpu_enable_async	percpu.c	/^subsys_initcall(percpu_enable_async);$/;"	v
percpu_pagelist_fraction	page_alloc.c	/^int percpu_pagelist_fraction;$/;"	v
percpu_pagelist_fraction_sysctl_handler	page_alloc.c	/^int percpu_pagelist_fraction_sysctl_handler(struct ctl_table *table, int write,$/;"	f
percpu_stats	percpu-internal.h	/^struct percpu_stats {$/;"	s
percpu_stats	percpu-stats.c	/^DEFINE_SHOW_ATTRIBUTE(percpu_stats);$/;"	v
percpu_stats_show	percpu-stats.c	/^static int percpu_stats_show(struct seq_file *m, void *v)$/;"	f	file:
persistent_huge_pages	hugetlb.c	2423;"	d	file:
pfmemalloc_match	slub.c	/^static inline bool pfmemalloc_match(struct page *page, gfp_t gfpflags)$/;"	f	file:
pfn	memory-failure.c	/^	unsigned long pfn;$/;"	m	struct:memory_failure_entry	file:
pfn_end	memremap.c	/^static unsigned long pfn_end(struct dev_pagemap *pgmap)$/;"	f	file:
pfn_first	memremap.c	/^static unsigned long pfn_first(struct dev_pagemap *pgmap)$/;"	f	file:
pfn_in_hpage	page_vma_mapped.c	/^static inline bool pfn_in_hpage(struct page *hpage, unsigned long pfn)$/;"	f	file:
pfn_inject_exit	hwpoison-inject.c	/^module_exit(pfn_inject_exit);$/;"	v
pfn_inject_exit	hwpoison-inject.c	/^static void pfn_inject_exit(void)$/;"	f	file:
pfn_inject_init	hwpoison-inject.c	/^module_init(pfn_inject_init);$/;"	v
pfn_inject_init	hwpoison-inject.c	/^static int pfn_inject_init(void)$/;"	f	file:
pfn_max_align_down	page_alloc.c	/^static unsigned long pfn_max_align_down(unsigned long pfn)$/;"	f	file:
pfn_max_align_up	page_alloc.c	/^static unsigned long pfn_max_align_up(unsigned long pfn)$/;"	f	file:
pfn_next	memremap.c	/^static unsigned long pfn_next(unsigned long pfn)$/;"	f	file:
pfn_range_valid_gigantic	hugetlb.c	/^static bool pfn_range_valid_gigantic(struct zone *z,$/;"	f	file:
pfn_to_bitidx	page_alloc.c	/^static inline int pfn_to_bitidx(struct page *page, unsigned long pfn)$/;"	f	file:
pgd_clear_bad	pgtable-generic.c	/^void pgd_clear_bad(pgd_t *pgd)$/;"	f
pgdat_balanced	vmscan.c	/^static bool pgdat_balanced(pg_data_t *pgdat, int order, int classzone_idx)$/;"	f	file:
pgdat_init_internals	page_alloc.c	/^static void __meminit pgdat_init_internals(struct pglist_data *pgdat)$/;"	f	file:
pgdat_init_kcompactd	page_alloc.c	/^static void pgdat_init_kcompactd(struct pglist_data *pgdat) {}$/;"	f	file:
pgdat_init_kcompactd	page_alloc.c	/^static void pgdat_init_kcompactd(struct pglist_data *pgdat)$/;"	f	file:
pgdat_init_report_one_done	page_alloc.c	/^static inline void __init pgdat_init_report_one_done(void)$/;"	f	file:
pgdat_init_split_queue	page_alloc.c	/^static void pgdat_init_split_queue(struct pglist_data *pgdat) {}$/;"	f	file:
pgdat_init_split_queue	page_alloc.c	/^static void pgdat_init_split_queue(struct pglist_data *pgdat)$/;"	f	file:
pgdat_memcg_congested	vmscan.c	/^static bool pgdat_memcg_congested(pg_data_t *pgdat, struct mem_cgroup *memcg)$/;"	f	file:
pgdat_page_ext_init	page_ext.c	/^void __meminit pgdat_page_ext_init(struct pglist_data *pgdat)$/;"	f
pgdat_set_deferred_range	page_alloc.c	/^static inline void pgdat_set_deferred_range(pg_data_t *pgdat) {}$/;"	f	file:
pgdat_set_deferred_range	page_alloc.c	/^static inline void pgdat_set_deferred_range(pg_data_t *pgdat)$/;"	f	file:
pgdat_watermark_boosted	vmscan.c	/^static bool pgdat_watermark_boosted(pg_data_t *pgdat, int classzone_idx)$/;"	f	file:
pgmap	gup.c	/^	struct dev_pagemap *pgmap;$/;"	m	struct:follow_page_context	typeref:struct:follow_page_context::dev_pagemap	file:
pgmap	hmm.c	/^	struct dev_pagemap	*pgmap;$/;"	m	struct:hmm_vma_walk	typeref:struct:hmm_vma_walk::dev_pagemap	file:
pgmap_array_delete	memremap.c	/^static void pgmap_array_delete(struct resource *res)$/;"	f	file:
pgpgout	memcontrol.c	/^	unsigned long pgpgout;$/;"	m	struct:uncharge_gather	file:
pgtable_trans_huge_deposit	pgtable-generic.c	/^void pgtable_trans_huge_deposit(struct mm_struct *mm, pmd_t *pmdp,$/;"	f
pgtable_trans_huge_withdraw	pgtable-generic.c	/^pgtable_t pgtable_trans_huge_withdraw(struct mm_struct *mm, pmd_t *pmdp)$/;"	f
pid	kasan/kasan.h	/^	u32 pid;$/;"	m	struct:kasan_track
pid	kmemleak.c	/^	pid_t pid;			\/* pid of the current task *\/$/;"	m	struct:kmemleak_object	file:
pid	slub.c	/^	int pid;		\/* Pid context *\/$/;"	m	struct:track	file:
pin_tag	zsmalloc.c	/^static void pin_tag(unsigned long handle)$/;"	f	file:
pkmap_count	highmem.c	/^static int pkmap_count[LAST_PKMAP];$/;"	v	file:
pkmap_page_table	highmem.c	/^pte_t * pkmap_page_table;$/;"	v
pm_restore_gfp_mask	page_alloc.c	/^void pm_restore_gfp_mask(void)$/;"	f
pm_restrict_gfp_mask	page_alloc.c	/^void pm_restrict_gfp_mask(void)$/;"	f
pm_suspended_storage	page_alloc.c	/^bool pm_suspended_storage(void)$/;"	f
pmd_clear_bad	pgtable-generic.c	/^void pmd_clear_bad(pmd_t *pmd)$/;"	f
pmd_devmap_trans_unstable	memory.c	/^static int pmd_devmap_trans_unstable(pmd_t *pmd)$/;"	f	file:
pmd_migration_entry_wait	migrate.c	/^void pmd_migration_entry_wait(struct mm_struct *mm, pmd_t *pmd)$/;"	f
pmd_move_must_withdraw	huge_memory.c	/^static inline int pmd_move_must_withdraw(spinlock_t *new_pmd_ptl,$/;"	f	file:
pmd_none_or_clear_bad_unless_trans_huge	mprotect.c	/^static inline int pmd_none_or_clear_bad_unless_trans_huge(pmd_t *pmd)$/;"	f	file:
pmd_to_hmm_pfn_flags	hmm.c	/^static inline uint64_t pmd_to_hmm_pfn_flags(struct hmm_range *range, pmd_t pmd)$/;"	f	file:
pmd_trans_migrating	migrate.c	/^bool pmd_trans_migrating(pmd_t pmd)$/;"	f
pmdp_clear_flush_young	pgtable-generic.c	/^int pmdp_clear_flush_young(struct vm_area_struct *vma,$/;"	f
pmdp_collapse_flush	pgtable-generic.c	/^pmd_t pmdp_collapse_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
pmdp_huge_clear_flush	pgtable-generic.c	/^pmd_t pmdp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
pmdp_invalidate	pgtable-generic.c	/^pmd_t pmdp_invalidate(struct vm_area_struct *vma, unsigned long address,$/;"	f
pmdp_set_access_flags	pgtable-generic.c	/^int pmdp_set_access_flags(struct vm_area_struct *vma,$/;"	f
pointer	kmemleak.c	/^	unsigned long pointer;$/;"	m	struct:kmemleak_object	file:
poison	slub.c	/^SLAB_ATTR(poison);$/;"	v
poison_element	mempool.c	/^static inline void poison_element(mempool_t *pool, void *element)$/;"	f	file:
poison_element	mempool.c	/^static void poison_element(mempool_t *pool, void *element)$/;"	f	file:
poison_error	mempool.c	/^static void poison_error(mempool_t *pool, void *element, size_t size,$/;"	f	file:
poison_obj	slab.c	/^static void poison_obj(struct kmem_cache *cachep, void *addr, unsigned char val)$/;"	f	file:
poison_page	page_poison.c	/^static void poison_page(struct page *page)$/;"	f	file:
poison_pages	page_poison.c	/^static void poison_pages(struct page *page, int n)$/;"	f	file:
poison_show	slub.c	/^static ssize_t poison_show(struct kmem_cache *s, char *buf)$/;"	f	file:
poison_store	slub.c	/^static ssize_t poison_store(struct kmem_cache *s,$/;"	f	file:
policy_cache	mempolicy.c	/^static struct kmem_cache *policy_cache;$/;"	v	typeref:struct:kmem_cache	file:
policy_modes	mempolicy.c	/^static const char * const policy_modes[] =$/;"	v	file:
policy_node	mempolicy.c	/^static int policy_node(gfp_t gfp, struct mempolicy *policy,$/;"	f	file:
policy_nodemask	mempolicy.c	/^static nodemask_t *policy_nodemask(gfp_t gfp, struct mempolicy *policy)$/;"	f	file:
policy_zone	mempolicy.c	/^enum zone_type policy_zone = 0;$/;"	v	typeref:enum:zone_type
pool	z3fold.c	/^	struct z3fold_pool *pool;$/;"	m	struct:z3fold_header	typeref:struct:z3fold_header::z3fold_pool	file:
pool	z3fold.c	/^	unsigned long pool; \/* back link + flags *\/$/;"	m	struct:z3fold_buddy_slots	file:
pool	zpool.c	/^	void *pool;$/;"	m	struct:zpool	file:
pool	zswap.c	/^	struct zswap_pool *pool;$/;"	m	struct:zswap_entry	typeref:struct:zswap_entry::zswap_pool	file:
pool_alloc_page	dmapool.c	/^static struct dma_page *pool_alloc_page(struct dma_pool *pool, gfp_t mem_flags)$/;"	f	file:
pool_find_page	dmapool.c	/^static struct dma_page *pool_find_page(struct dma_pool *pool, dma_addr_t dma)$/;"	f	file:
pool_free_page	dmapool.c	/^static void pool_free_page(struct dma_pool *pool, struct dma_page *page)$/;"	f	file:
pool_initialise_page	dmapool.c	/^static void pool_initialise_page(struct dma_pool *pool, struct dma_page *page)$/;"	f	file:
pool_isolated_are_drained	zsmalloc.c	/^static bool pool_isolated_are_drained(struct zs_pool *pool)$/;"	f	file:
pools	dmapool.c	/^	struct list_head pools;$/;"	m	struct:dma_pool	typeref:struct:dma_pool::list_head	file:
populate_section_memmap	sparse.c	/^static struct page * __meminit populate_section_memmap(unsigned long pfn,$/;"	f	file:
populate_section_memmap	sparse.c	/^struct page * __meminit populate_section_memmap(unsigned long pfn,$/;"	f
populate_vma_page_range	gup.c	/^long populate_vma_page_range(struct vm_area_struct *vma,$/;"	f
populated	percpu-internal.h	/^	unsigned long		populated[];	\/* populated bitmap *\/$/;"	m	struct:pcpu_chunk
pos	slab.c	/^		unsigned int pos;$/;"	m	struct:freelist_init_state::__anon5	file:
pos_ratio	page-writeback.c	/^	unsigned long		pos_ratio;$/;"	m	struct:dirty_throttle_control	file:
pos_ratio_polynom	page-writeback.c	/^static long long pos_ratio_polynom(unsigned long setpoint,$/;"	f	file:
post_alloc_hook	page_alloc.c	/^inline void post_alloc_hook(struct page *page, unsigned int order,$/;"	f
pr_fmt	cma.c	15;"	d	file:
pr_fmt	huge_memory.c	6;"	d	file:
pr_fmt	kasan/generic.c	17;"	d	file:
pr_fmt	kasan/tags.c	14;"	d	file:
pr_fmt	khugepaged.c	2;"	d	file:
pr_fmt	kmemleak-test.c	9;"	d	file:
pr_fmt	kmemleak.c	58;"	d	file:
pr_fmt	mempolicy.c	68;"	d	file:
pr_fmt	mmap.c	10;"	d	file:
pr_fmt	nommu.c	17;"	d	file:
pr_fmt	percpu.c	64;"	d	file:
pr_fmt	rodata_test.c	8;"	d	file:
pr_fmt	usercopy.c	11;"	d	file:
pr_fmt	vmscan.c	15;"	d	file:
pr_fmt	z3fold.c	24;"	d	file:
pr_fmt	zbud.c	45;"	d	file:
pr_fmt	zpool.c	11;"	d	file:
pr_fmt	zsmalloc.c	31;"	d	file:
pr_fmt	zswap.c	14;"	d	file:
prealloc_memcg_shrinker	vmscan.c	/^static int prealloc_memcg_shrinker(struct shrinker *shrinker)$/;"	f	file:
prealloc_shrinker	vmscan.c	/^int prealloc_shrinker(struct shrinker *shrinker)$/;"	f
precharge	memcontrol.c	/^	unsigned long precharge;$/;"	m	struct:move_charge_struct	file:
precharge_walk_ops	memcontrol.c	/^static const struct mm_walk_ops precharge_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
preferred_node_policy	mempolicy.c	/^static struct mempolicy preferred_node_policy[MAX_NUMNODES];$/;"	v	typeref:struct:mempolicy	file:
preferred_zoneref	internal.h	/^	struct zoneref *preferred_zoneref;$/;"	m	struct:alloc_context	typeref:struct:alloc_context::zoneref
prefetch_buddy	page_alloc.c	/^static inline void prefetch_buddy(struct page *page)$/;"	f	file:
prefetch_freepointer	slub.c	/^static void prefetch_freepointer(const struct kmem_cache *s, void *object)$/;"	f	file:
prefetch_prev_lru_page	vmscan.c	137;"	d	file:
prefetch_prev_lru_page	vmscan.c	147;"	d	file:
prefetchw_prev_lru_page	vmscan.c	151;"	d	file:
prefetchw_prev_lru_page	vmscan.c	161;"	d	file:
prep_compound_gigantic_page	hugetlb.c	/^static void prep_compound_gigantic_page(struct page *page, unsigned int order)$/;"	f	file:
prep_compound_huge_page	hugetlb.c	/^static void __init prep_compound_huge_page(struct page *page,$/;"	f	file:
prep_compound_page	page_alloc.c	/^void prep_compound_page(struct page *page, unsigned int order)$/;"	f
prep_new_huge_page	hugetlb.c	/^static void prep_new_huge_page(struct hstate *h, struct page *page, int nid)$/;"	f	file:
prep_new_page	page_alloc.c	/^static void prep_new_page(struct page *page, unsigned int order, gfp_t gfp_flags,$/;"	f	file:
prep_transhuge_page	huge_memory.c	/^void prep_transhuge_page(struct page *page)$/;"	f
prepare_alloc_pages	page_alloc.c	/^static inline bool prepare_alloc_pages(gfp_t gfp_mask, unsigned int order,$/;"	f	file:
prepare_kswapd_sleep	vmscan.c	/^static bool prepare_kswapd_sleep(pg_data_t *pgdat, int order, int classzone_idx)$/;"	f	file:
prev	mempolicy.c	/^	struct vm_area_struct *prev;$/;"	m	struct:queue_pages	typeref:struct:queue_pages::vm_area_struct	file:
print_address_description	kasan/report.c	/^static void print_address_description(void *addr, u8 tag)$/;"	f	file:
print_address_stack_frame	kasan/report.c	/^static void print_address_stack_frame(const void *addr)$/;"	f	file:
print_bad_pte	memory.c	/^static void print_bad_pte(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
print_decoded_frame_descr	kasan/report.c	/^static void print_decoded_frame_descr(const char *frame_descr)$/;"	f	file:
print_error_description	kasan/report.c	/^static void print_error_description(struct kasan_access_info *info)$/;"	f	file:
print_objinfo	slab.c	/^static void print_objinfo(struct kmem_cache *cachep, void *objp, int lines)$/;"	f	file:
print_page_info	slub.c	/^static void print_page_info(struct page *page)$/;"	f	file:
print_page_owner	page_owner.c	/^print_page_owner(char __user *buf, size_t count, unsigned long pfn,$/;"	f	file:
print_section	slub.c	/^static void print_section(char *level, char *text, u8 *addr,$/;"	f	file:
print_shadow_for_address	kasan/report.c	/^static void print_shadow_for_address(const void *addr)$/;"	f	file:
print_slabinfo_header	slab_common.c	/^static void print_slabinfo_header(struct seq_file *m)$/;"	f	file:
print_tags	kasan/kasan.h	/^static inline void print_tags(u8 addr_tag, const void *addr) { }$/;"	f
print_tags	kasan/tags_report.c	/^void print_tags(u8 addr_tag, const void *addr)$/;"	f
print_track	kasan/report.c	/^static void print_track(struct kasan_track *track, const char *prefix)$/;"	f	file:
print_track	slub.c	/^static void print_track(const char *s, struct track *t, unsigned long pr_time)$/;"	f	file:
print_tracking	slub.c	/^static void print_tracking(struct kmem_cache *s, void *object)$/;"	f	file:
print_trailer	slub.c	/^static void print_trailer(struct kmem_cache *s, struct page *page, u8 *p)$/;"	f	file:
print_unreferenced	kmemleak.c	/^static void print_unreferenced(struct seq_file *seq,$/;"	f	file:
print_vma_addr	memory.c	/^void print_vma_addr(char *prefix, unsigned long ip)$/;"	f
priority	vmscan.c	/^	s8 priority;$/;"	m	struct:scan_control	file:
probe_kernel_read	maccess.c	/^EXPORT_SYMBOL_GPL(probe_kernel_read);$/;"	v
probe_kernel_write	maccess.c	/^EXPORT_SYMBOL_GPL(probe_kernel_write);$/;"	v
probe_read_common	maccess.c	/^probe_read_common(void *dst, const void __user *src, size_t size)$/;"	f	file:
probe_user_read	maccess.c	/^EXPORT_SYMBOL_GPL(probe_user_read);$/;"	v
probe_user_write	maccess.c	/^EXPORT_SYMBOL_GPL(probe_user_write);$/;"	v
probe_write_common	maccess.c	/^probe_write_common(void __user *dst, const void *src, size_t size)$/;"	f	file:
proc_page_owner_operations	page_owner.c	/^static const struct file_operations proc_page_owner_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_poll_event	swapfile.c	/^static atomic_t proc_poll_event = ATOMIC_INIT(0);$/;"	v	file:
proc_slabinfo_operations	slab_common.c	/^static const struct file_operations proc_slabinfo_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_swaps_operations	swapfile.c	/^static const struct file_operations proc_swaps_operations = {$/;"	v	typeref:struct:file_operations	file:
proc_vmalloc_init	vmalloc.c	/^module_init(proc_vmalloc_init);$/;"	v
proc_vmalloc_init	vmalloc.c	/^static int __init proc_vmalloc_init(void)$/;"	f	file:
process_huge_page	memory.c	/^static inline void process_huge_page($/;"	f	file:
process_shares_mm	oom_kill.c	/^bool process_shares_mm(struct task_struct *p, struct mm_struct *mm)$/;"	f
process_slab	slub.c	/^static void process_slab(struct loc_track *t, struct kmem_cache *s,$/;"	f	file:
process_vm_rw	process_vm_access.c	/^static ssize_t process_vm_rw(pid_t pid,$/;"	f	file:
process_vm_rw_core	process_vm_access.c	/^static ssize_t process_vm_rw_core(pid_t pid, struct iov_iter *iter,$/;"	f	file:
process_vm_rw_pages	process_vm_access.c	/^static int process_vm_rw_pages(struct page **pages,$/;"	f	file:
process_vm_rw_single_vec	process_vm_access.c	/^static int process_vm_rw_single_vec(unsigned long addr,$/;"	f	file:
procswaps_init	swapfile.c	/^__initcall(procswaps_init);$/;"	v
procswaps_init	swapfile.c	/^static int __init procswaps_init(void)$/;"	f	file:
propagate_protected_usage	page_counter.c	/^static void propagate_protected_usage(struct page_counter *c,$/;"	f	file:
prot	mmap.c	/^	unsigned long prot;$/;"	m	struct:mmap_arg_struct	file:
prot	nommu.c	/^	unsigned long prot;$/;"	m	struct:mmap_arg_struct	file:
prot_none_hugetlb_entry	mprotect.c	/^static int prot_none_hugetlb_entry(pte_t *pte, unsigned long hmask,$/;"	f	file:
prot_none_pte_entry	mprotect.c	/^static int prot_none_pte_entry(pte_t *pte, unsigned long addr,$/;"	f	file:
prot_none_test	mprotect.c	/^static int prot_none_test(unsigned long addr, unsigned long next,$/;"	f	file:
prot_none_walk_ops	mprotect.c	/^static const struct mm_walk_ops prot_none_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
pt	memcontrol.c	/^	poll_table pt;$/;"	m	struct:mem_cgroup_event	file:
pte_alloc_one_map	memory.c	/^static vm_fault_t pte_alloc_one_map(struct vm_fault *vmf)$/;"	f	file:
pte_mapped_thp	khugepaged.c	/^	unsigned long pte_mapped_thp[MAX_PTE_MAPPED_THP];$/;"	m	struct:mm_slot	file:
pte_same_as_swp	swapfile.c	/^static inline int pte_same_as_swp(pte_t pte, pte_t swp_pte)$/;"	f	file:
pte_to_hmm_pfn_flags	hmm.c	/^static inline uint64_t pte_to_hmm_pfn_flags(struct hmm_range *range, pte_t pte)$/;"	f	file:
pte_unmap_same	memory.c	/^static inline int pte_unmap_same(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
ptep_clear_flush	pgtable-generic.c	/^pte_t ptep_clear_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
ptep_clear_flush_young	pgtable-generic.c	/^int ptep_clear_flush_young(struct vm_area_struct *vma,$/;"	f
ptep_set_access_flags	pgtable-generic.c	/^int ptep_set_access_flags(struct vm_area_struct *vma,$/;"	f
ptlock_alloc	memory.c	/^bool ptlock_alloc(struct page *page)$/;"	f
ptlock_cache_init	memory.c	/^void __init ptlock_cache_init(void)$/;"	f
ptlock_free	memory.c	/^void ptlock_free(struct page *page)$/;"	f
pud_clear_bad	pgtable-generic.c	/^void pud_clear_bad(pud_t *pud)$/;"	f
pud_to_hmm_pfn_flags	hmm.c	/^static inline uint64_t pud_to_hmm_pfn_flags(struct hmm_range *range, pud_t pud)$/;"	f	file:
pudp_huge_clear_flush	pgtable-generic.c	/^pud_t pudp_huge_clear_flush(struct vm_area_struct *vma, unsigned long address,$/;"	f
purge	vmalloc.c	/^	struct list_head purge;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::list_head	file:
purge_fragmented_blocks	vmalloc.c	/^static void purge_fragmented_blocks(int cpu)$/;"	f	file:
purge_fragmented_blocks_allcpus	vmalloc.c	/^static void purge_fragmented_blocks_allcpus(void)$/;"	f	file:
purge_vmap_area_lazy	vmalloc.c	/^static void purge_vmap_area_lazy(void)$/;"	f	file:
put_and_wait_on_page_locked	filemap.c	/^void put_and_wait_on_page_locked(struct page *page)$/;"	f
put_cpu_partial	slub.c	/^static void put_cpu_partial(struct kmem_cache *s, struct page *page, int drain)$/;"	f	file:
put_delta_usec	gup_benchmark.c	/^	__u64 put_delta_usec;$/;"	m	struct:gup_benchmark	file:
put_huge_zero_page	huge_memory.c	/^static void put_huge_zero_page(void)$/;"	f	file:
put_nommu_region	nommu.c	/^static void put_nommu_region(struct vm_region *region)$/;"	f	file:
put_object	kmemleak.c	/^static void put_object(struct kmemleak_object *object)$/;"	f	file:
put_online_mems	memory_hotplug.c	/^void put_online_mems(void)$/;"	f
put_page_bootmem	memory_hotplug.c	/^void put_page_bootmem(struct page *page)$/;"	f
put_pages_list	swap.c	/^EXPORT_SYMBOL(put_pages_list);$/;"	v
put_pages_list	swap.c	/^void put_pages_list(struct list_head *pages)$/;"	f
put_swap_page	swapfile.c	/^void put_swap_page(struct page *page, swp_entry_t entry)$/;"	f
put_user_pages	gup.c	/^EXPORT_SYMBOL(put_user_pages);$/;"	v
put_user_pages	gup.c	/^void put_user_pages(struct page **pages, unsigned long npages)$/;"	f
put_user_pages_dirty_lock	gup.c	/^EXPORT_SYMBOL(put_user_pages_dirty_lock);$/;"	v
put_user_pages_dirty_lock	gup.c	/^void put_user_pages_dirty_lock(struct page **pages, unsigned long npages,$/;"	f
put_vaddr_frames	frame_vector.c	/^EXPORT_SYMBOL(put_vaddr_frames);$/;"	v
put_vaddr_frames	frame_vector.c	/^void put_vaddr_frames(struct frame_vector *vec)$/;"	f
putback_active_hugepage	hugetlb.c	/^void putback_active_hugepage(struct page *page)$/;"	f
putback_lru_page	vmscan.c	/^void putback_lru_page(struct page *page)$/;"	f
putback_movable_page	migrate.c	/^void putback_movable_page(struct page *page)$/;"	f
putback_movable_pages	migrate.c	/^void putback_movable_pages(struct list_head *l)$/;"	f
putback_zspage	zsmalloc.c	/^static enum fullness_group putback_zspage(struct size_class *class,$/;"	f	file:
putback_zspage_deferred	zsmalloc.c	/^static void putback_zspage_deferred(struct zs_pool *pool,$/;"	f	file:
pvm_determine_end_from_reverse	vmalloc.c	/^pvm_determine_end_from_reverse(struct vmap_area **va, unsigned long align)$/;"	f	file:
pvm_find_va_enclose_addr	vmalloc.c	/^pvm_find_va_enclose_addr(unsigned long addr)$/;"	f	file:
qlink_free	kasan/quarantine.c	/^static void qlink_free(struct qlist_node *qlink, struct kmem_cache *cache)$/;"	f	file:
qlink_to_cache	kasan/quarantine.c	/^static struct kmem_cache *qlink_to_cache(struct qlist_node *qlink)$/;"	f	file:
qlink_to_object	kasan/quarantine.c	/^static void *qlink_to_object(struct qlist_node *qlink, struct kmem_cache *cache)$/;"	f	file:
qlist_empty	kasan/quarantine.c	/^static bool qlist_empty(struct qlist_head *q)$/;"	f	file:
qlist_free_all	kasan/quarantine.c	/^static void qlist_free_all(struct qlist_head *q, struct kmem_cache *cache)$/;"	f	file:
qlist_head	kasan/quarantine.c	/^struct qlist_head {$/;"	s	file:
qlist_init	kasan/quarantine.c	/^static void qlist_init(struct qlist_head *q)$/;"	f	file:
qlist_move_all	kasan/quarantine.c	/^static void qlist_move_all(struct qlist_head *from, struct qlist_head *to)$/;"	f	file:
qlist_move_cache	kasan/quarantine.c	/^static void qlist_move_cache(struct qlist_head *from,$/;"	f	file:
qlist_node	kasan/kasan.h	/^struct qlist_node {$/;"	s
qlist_put	kasan/quarantine.c	/^static void qlist_put(struct qlist_head *q, struct qlist_node *qlink,$/;"	f	file:
quarantine_batch_size	kasan/quarantine.c	/^static unsigned long quarantine_batch_size;$/;"	v	file:
quarantine_head	kasan/quarantine.c	/^static int quarantine_head;$/;"	v	file:
quarantine_link	kasan/kasan.h	/^	struct qlist_node quarantine_link;$/;"	m	struct:kasan_free_meta	typeref:struct:kasan_free_meta::qlist_node
quarantine_max_size	kasan/quarantine.c	/^static unsigned long quarantine_max_size;$/;"	v	file:
quarantine_put	kasan/kasan.h	/^static inline void quarantine_put(struct kasan_free_meta *info,$/;"	f
quarantine_put	kasan/quarantine.c	/^void quarantine_put(struct kasan_free_meta *info, struct kmem_cache *cache)$/;"	f
quarantine_reduce	kasan/kasan.h	/^static inline void quarantine_reduce(void) { }$/;"	f
quarantine_reduce	kasan/quarantine.c	/^void quarantine_reduce(void)$/;"	f
quarantine_remove_cache	kasan/kasan.h	/^static inline void quarantine_remove_cache(struct kmem_cache *cache) { }$/;"	f
quarantine_remove_cache	kasan/quarantine.c	/^void quarantine_remove_cache(struct kmem_cache *cache)$/;"	f
quarantine_size	kasan/quarantine.c	/^static unsigned long quarantine_size;$/;"	v	file:
quarantine_tail	kasan/quarantine.c	/^static int quarantine_tail;$/;"	v	file:
queue_pages	mempolicy.c	/^struct queue_pages {$/;"	s	file:
queue_pages_hugetlb	mempolicy.c	/^static int queue_pages_hugetlb(pte_t *pte, unsigned long hmask,$/;"	f	file:
queue_pages_pmd	mempolicy.c	/^static int queue_pages_pmd(pmd_t *pmd, spinlock_t *ptl, unsigned long addr,$/;"	f	file:
queue_pages_pte_range	mempolicy.c	/^static int queue_pages_pte_range(pmd_t *pmd, unsigned long addr,$/;"	f	file:
queue_pages_range	mempolicy.c	/^queue_pages_range(struct mm_struct *mm, unsigned long start, unsigned long end,$/;"	f	file:
queue_pages_required	mempolicy.c	/^static inline bool queue_pages_required(struct page *page,$/;"	f	file:
queue_pages_test_walk	mempolicy.c	/^static int queue_pages_test_walk(unsigned long start, unsigned long end,$/;"	f	file:
queue_pages_walk_ops	mempolicy.c	/^static const struct mm_walk_ops queue_pages_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
quiet_vmstat	vmstat.c	/^void quiet_vmstat(void)$/;"	f
ra_submit	internal.h	/^static inline unsigned long ra_submit(struct file_ra_state *ra,$/;"	f
random_tag	kasan/kasan.h	/^static inline u8 random_tag(void)$/;"	f
random_tag	kasan/tags.c	/^u8 random_tag(void)$/;"	f
randomize_stack_top	util.c	/^unsigned long randomize_stack_top(unsigned long stack_top)$/;"	f
range	hmm.c	/^	struct hmm_range	*range;$/;"	m	struct:hmm_vma_walk	typeref:struct:hmm_vma_walk::hmm_range	file:
ratelimit_pages	page-writeback.c	/^static long ratelimit_pages = 32;$/;"	v	file:
rb_node	kmemleak.c	/^	struct rb_node rb_node;$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::rb_node	file:
rb_rightmost	memcontrol.c	/^	struct rb_node *rb_rightmost;$/;"	m	struct:mem_cgroup_tree_per_node	typeref:struct:mem_cgroup_tree_per_node::rb_node	file:
rb_root	memcontrol.c	/^	struct rb_root rb_root;$/;"	m	struct:mem_cgroup_tree_per_node	typeref:struct:mem_cgroup_tree_per_node::rb_root	file:
rb_tree_per_node	memcontrol.c	/^	struct mem_cgroup_tree_per_node *rb_tree_per_node[MAX_NUMNODES];$/;"	m	struct:mem_cgroup_tree	typeref:struct:mem_cgroup_tree::mem_cgroup_tree_per_node	file:
rbnode	zswap.c	/^	struct rb_node rbnode;$/;"	m	struct:zswap_entry	typeref:struct:zswap_entry::rb_node	file:
rbroot	zswap.c	/^	struct rb_root rbroot;$/;"	m	struct:zswap_tree	typeref:struct:zswap_tree::rb_root	file:
rcu	kmemleak.c	/^	struct rcu_head rcu;		\/* object_list lockless traversal *\/$/;"	m	struct:kmemleak_object	typeref:struct:kmemleak_object::rcu_head	file:
rcu	slab.h	/^	struct rcu_head rcu;$/;"	m	struct:memcg_cache_array	typeref:struct:memcg_cache_array::rcu_head
rcu_free_slab	slub.c	/^static void rcu_free_slab(struct rcu_head *h)$/;"	f	file:
rcu_head	slab.h	/^				struct rcu_head rcu_head;$/;"	m	union:memcg_cache_params::__anon8::__anon10::__anon11	typeref:struct:memcg_cache_params::__anon8::__anon10::__anon11::rcu_head
rcu_head	vmalloc.c	/^	struct rcu_head rcu_head;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::rcu_head	file:
reactivate_swap_slots_cache	swap_slots.c	/^static void reactivate_swap_slots_cache(void)$/;"	f	file:
read_ahead_kb_store	backing-dev.c	/^static ssize_t read_ahead_kb_store(struct device *dev,$/;"	f	file:
read_cache_page	filemap.c	/^EXPORT_SYMBOL(read_cache_page);$/;"	v
read_cache_page	filemap.c	/^struct page *read_cache_page(struct address_space *mapping,$/;"	f
read_cache_page_gfp	filemap.c	/^EXPORT_SYMBOL(read_cache_page_gfp);$/;"	v
read_cache_page_gfp	filemap.c	/^struct page *read_cache_page_gfp(struct address_space *mapping,$/;"	f
read_cache_pages	readahead.c	/^EXPORT_SYMBOL(read_cache_pages);$/;"	v
read_cache_pages	readahead.c	/^int read_cache_pages(struct address_space *mapping, struct list_head *pages,$/;"	f
read_cache_pages_invalidate_page	readahead.c	/^static void read_cache_pages_invalidate_page(struct address_space *mapping,$/;"	f	file:
read_cache_pages_invalidate_pages	readahead.c	/^static void read_cache_pages_invalidate_pages(struct address_space *mapping,$/;"	f	file:
read_page_owner	page_owner.c	/^read_page_owner(struct file *file, char __user *buf, size_t count, loff_t *ppos)$/;"	f	file:
read_pages	readahead.c	/^static int read_pages(struct address_space *mapping, struct file *filp,$/;"	f	file:
read_swap_cache_async	swap_state.c	/^struct page *read_swap_cache_async(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
read_swap_header	swapfile.c	/^static unsigned long read_swap_header(struct swap_info_struct *p,$/;"	f	file:
reap_alien	slab.c	/^static void reap_alien(struct kmem_cache *cachep, struct kmem_cache_node *n)$/;"	f	file:
reap_alien	slab.c	594;"	d	file:
rebind	mempolicy.c	/^	void (*rebind)(struct mempolicy *pol, const nodemask_t *nodes);$/;"	m	struct:mempolicy_operations	file:
reclaim_account	slub.c	/^SLAB_ATTR(reclaim_account);$/;"	v
reclaim_account_show	slub.c	/^static ssize_t reclaim_account_show(struct kmem_cache *s, char *buf)$/;"	f	file:
reclaim_account_store	slub.c	/^static ssize_t reclaim_account_store(struct kmem_cache *s,$/;"	f	file:
reclaim_clean_pages_from_list	vmscan.c	/^unsigned long reclaim_clean_pages_from_list(struct zone *zone,$/;"	f
reclaim_high	memcontrol.c	/^static void reclaim_high(struct mem_cgroup *memcg,$/;"	f	file:
reclaim_idx	vmscan.c	/^	s8 reclaim_idx;$/;"	m	struct:scan_control	file:
reclaim_pages	vmscan.c	/^unsigned long reclaim_pages(struct list_head *page_list)$/;"	f
reclaim_state	vmscan.c	/^	struct reclaim_state reclaim_state;$/;"	m	struct:scan_control	typeref:struct:scan_control::reclaim_state	file:
record_obj	zsmalloc.c	/^static void record_obj(unsigned long handle, unsigned long obj)$/;"	f	file:
red_zone	slub.c	/^SLAB_ATTR(red_zone);$/;"	v
red_zone_show	slub.c	/^static ssize_t red_zone_show(struct kmem_cache *s, char *buf)$/;"	f	file:
red_zone_store	slub.c	/^static ssize_t red_zone_store(struct kmem_cache *s,$/;"	f	file:
redirty_page_for_writepage	page-writeback.c	/^EXPORT_SYMBOL(redirty_page_for_writepage);$/;"	v
redirty_page_for_writepage	page-writeback.c	/^int redirty_page_for_writepage(struct writeback_control *wbc, struct page *page)$/;"	f
reenable_swap_slots_cache_unlock	swap_slots.c	/^void reenable_swap_slots_cache_unlock(void)$/;"	f
refcnt	slab.h	/^			struct percpu_ref refcnt;$/;"	m	struct:memcg_cache_params::__anon8::__anon10	typeref:struct:memcg_cache_params::__anon8::__anon10::percpu_ref
refcount	slab.h	/^	int refcount;		\/* Use counter *\/$/;"	m	struct:kmem_cache
refcount	z3fold.c	/^	struct kref refcount;$/;"	m	struct:z3fold_header	typeref:struct:z3fold_header::kref	file:
refcount	zswap.c	/^	int refcount;$/;"	m	struct:zswap_entry	file:
referenced	rmap.c	/^	int referenced;$/;"	m	struct:page_referenced_arg	file:
refill_stock	memcontrol.c	/^static void refill_stock(struct mem_cgroup *memcg, unsigned int nr_pages)$/;"	f	file:
refill_swap_slots_cache	swap_slots.c	/^static int refill_swap_slots_cache(struct swap_slots_cache *cache)$/;"	f	file:
refresh_cpu_vm_stats	vmstat.c	/^static int refresh_cpu_vm_stats(bool do_pagesets)$/;"	f	file:
refresh_vm_stats	vmstat.c	/^static void refresh_vm_stats(struct work_struct *work)$/;"	f	file:
refresh_zone_stat_thresholds	vmstat.c	/^void refresh_zone_stat_thresholds(void)$/;"	f
region_abort	hugetlb.c	/^static void region_abort(struct resv_map *resv, long f, long t)$/;"	f	file:
region_add	hugetlb.c	/^static long region_add(struct resv_map *resv, long f, long t)$/;"	f	file:
region_chg	hugetlb.c	/^static long region_chg(struct resv_map *resv, long f, long t)$/;"	f	file:
region_count	hugetlb.c	/^static long region_count(struct resv_map *resv, long f, long t)$/;"	f	file:
region_del	hugetlb.c	/^static long region_del(struct resv_map *resv, long f, long t)$/;"	f	file:
register_dummy_stack	page_owner.c	/^static noinline void register_dummy_stack(void)$/;"	f	file:
register_early_stack	page_owner.c	/^static noinline void register_early_stack(void)$/;"	f	file:
register_event	memcontrol.c	/^	int (*register_event)(struct mem_cgroup *memcg,$/;"	m	struct:mem_cgroup_event	file:
register_failure_stack	page_owner.c	/^static noinline void register_failure_stack(void)$/;"	f	file:
register_global	kasan/generic.c	/^static void register_global(struct kasan_global *global)$/;"	f	file:
register_memory_resource	memory_hotplug.c	/^static struct resource *register_memory_resource(u64 start, u64 size)$/;"	f	file:
register_oom_notifier	oom_kill.c	/^EXPORT_SYMBOL_GPL(register_oom_notifier);$/;"	v
register_oom_notifier	oom_kill.c	/^int register_oom_notifier(struct notifier_block *nb)$/;"	f
register_page_bootmem_info_node	memory_hotplug.c	/^void __init register_page_bootmem_info_node(struct pglist_data *pgdat)$/;"	f
register_page_bootmem_info_section	memory_hotplug.c	/^static void register_page_bootmem_info_section(unsigned long start_pfn)$/;"	f	file:
register_shrinker	vmscan.c	/^EXPORT_SYMBOL(register_shrinker);$/;"	v
register_shrinker	vmscan.c	/^int register_shrinker(struct shrinker *shrinker)$/;"	f
register_shrinker_prepared	vmscan.c	/^void register_shrinker_prepared(struct shrinker *shrinker)$/;"	f
register_vmap_purge_notifier	vmalloc.c	/^EXPORT_SYMBOL_GPL(register_vmap_purge_notifier);$/;"	v
register_vmap_purge_notifier	vmalloc.c	/^int register_vmap_purge_notifier(struct notifier_block *nb)$/;"	f
reinit_migrate_pfn	compaction.c	/^reinit_migrate_pfn(struct compact_control *cc)$/;"	f	file:
reinsert_swap_info	swapfile.c	/^static void reinsert_swap_info(struct swap_info_struct *p)$/;"	f	file:
release_bdi	backing-dev.c	/^static void release_bdi(struct kref *ref)$/;"	f	file:
release_freepages	compaction.c	/^static unsigned long release_freepages(struct list_head *freelist)$/;"	f	file:
release_memory_resource	memory_hotplug.c	/^static void release_memory_resource(struct resource *res)$/;"	f	file:
release_pages	swap.c	/^EXPORT_SYMBOL(release_pages);$/;"	v
release_pages	swap.c	/^void release_pages(struct page **pages, int nr)$/;"	f
release_pte_page	khugepaged.c	/^static void release_pte_page(struct page *page)$/;"	f	file:
release_pte_pages	khugepaged.c	/^static void release_pte_pages(pte_t *pte, pte_t *_pte)$/;"	f	file:
release_wq	z3fold.c	/^	struct workqueue_struct *release_wq;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::workqueue_struct	file:
release_z3fold_page	z3fold.c	/^			release_z3fold_page(struct kref *ref)$/;"	f	file:
release_z3fold_page_locked	z3fold.c	/^static void release_z3fold_page_locked(struct kref *ref)$/;"	f	file:
release_z3fold_page_locked_list	z3fold.c	/^static void release_z3fold_page_locked_list(struct kref *ref)$/;"	f	file:
remap_p4d_range	memory.c	/^static inline int remap_p4d_range(struct mm_struct *mm, pgd_t *pgd,$/;"	f	file:
remap_page	huge_memory.c	/^static void remap_page(struct page *page)$/;"	f	file:
remap_pfn_range	memory.c	/^EXPORT_SYMBOL(remap_pfn_range);$/;"	v
remap_pfn_range	memory.c	/^int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr,$/;"	f
remap_pfn_range	nommu.c	/^EXPORT_SYMBOL(remap_pfn_range);$/;"	v
remap_pfn_range	nommu.c	/^int remap_pfn_range(struct vm_area_struct *vma, unsigned long addr,$/;"	f
remap_pmd_range	memory.c	/^static inline int remap_pmd_range(struct mm_struct *mm, pud_t *pud,$/;"	f	file:
remap_pte_range	memory.c	/^static int remap_pte_range(struct mm_struct *mm, pmd_t *pmd,$/;"	f	file:
remap_pud_range	memory.c	/^static inline int remap_pud_range(struct mm_struct *mm, p4d_t *p4d,$/;"	f	file:
remap_vmalloc_range	nommu.c	/^EXPORT_SYMBOL(remap_vmalloc_range);$/;"	v
remap_vmalloc_range	nommu.c	/^int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,$/;"	f
remap_vmalloc_range	vmalloc.c	/^EXPORT_SYMBOL(remap_vmalloc_range);$/;"	v
remap_vmalloc_range	vmalloc.c	/^int remap_vmalloc_range(struct vm_area_struct *vma, void *addr,$/;"	f
remap_vmalloc_range_partial	vmalloc.c	/^EXPORT_SYMBOL(remap_vmalloc_range_partial);$/;"	v
remap_vmalloc_range_partial	vmalloc.c	/^int remap_vmalloc_range_partial(struct vm_area_struct *vma, unsigned long uaddr,$/;"	f
remote_node_defrag_ratio	slub.c	/^SLAB_ATTR(remote_node_defrag_ratio);$/;"	v
remote_node_defrag_ratio_show	slub.c	/^static ssize_t remote_node_defrag_ratio_show(struct kmem_cache *s, char *buf)$/;"	f	file:
remote_node_defrag_ratio_store	slub.c	/^static ssize_t remote_node_defrag_ratio_store(struct kmem_cache *s,$/;"	f	file:
remove	memcontrol.c	/^	struct work_struct remove;$/;"	m	struct:mem_cgroup_event	typeref:struct:mem_cgroup_event::work_struct	file:
remove_all_stable_nodes	ksm.c	/^static int remove_all_stable_nodes(void)$/;"	f	file:
remove_cache_srcu	kasan/quarantine.c	/^DEFINE_STATIC_SRCU(remove_cache_srcu);$/;"	v
remove_element	mempool.c	/^static void *remove_element(mempool_t *pool)$/;"	f	file:
remove_full	slub.c	/^static inline void remove_full(struct kmem_cache *s, struct kmem_cache_node *n,$/;"	f	file:
remove_full	slub.c	/^static void remove_full(struct kmem_cache *s, struct kmem_cache_node *n, struct page *page)$/;"	f	file:
remove_mapping	vmscan.c	/^int remove_mapping(struct address_space *mapping, struct page *page)$/;"	f
remove_memory	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(remove_memory);$/;"	v
remove_memory	memory_hotplug.c	/^int remove_memory(int nid, u64 start, u64 size)$/;"	f
remove_migration_pmd	huge_memory.c	/^void remove_migration_pmd(struct page_vma_mapped_walk *pvmw, struct page *new)$/;"	f
remove_migration_pte	migrate.c	/^static bool remove_migration_pte(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
remove_migration_ptes	migrate.c	/^void remove_migration_ptes(struct page *old, struct page *new, bool locked)$/;"	f
remove_node_from_stable_tree	ksm.c	/^static void remove_node_from_stable_tree(struct stable_node *stable_node)$/;"	f	file:
remove_partial	slub.c	/^static inline void remove_partial(struct kmem_cache_node *n,$/;"	f	file:
remove_pfn_range_from_zone	memory_hotplug.c	/^void __ref remove_pfn_range_from_zone(struct zone *zone,$/;"	f
remove_rmap_item_from_tree	ksm.c	/^static void remove_rmap_item_from_tree(struct rmap_item *rmap_item)$/;"	f	file:
remove_stable_node	ksm.c	/^static int remove_stable_node(struct stable_node *stable_node)$/;"	f	file:
remove_stable_node_chain	ksm.c	/^static int remove_stable_node_chain(struct stable_node *stable_node,$/;"	f	file:
remove_trailing_rmap_items	ksm.c	/^static void remove_trailing_rmap_items(struct mm_slot *mm_slot,$/;"	f	file:
remove_vm_area	vmalloc.c	/^struct vm_struct *remove_vm_area(const void *addr)$/;"	f
remove_vma	mmap.c	/^static struct vm_area_struct *remove_vma(struct vm_area_struct *vma)$/;"	f	file:
remove_vma_list	mmap.c	/^static void remove_vma_list(struct mm_struct *mm, struct vm_area_struct *vma)$/;"	f	file:
remove_zspage	zsmalloc.c	/^static void remove_zspage(struct size_class *class,$/;"	f	file:
replace_page	ksm.c	/^static int replace_page(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
replace_page_cache_page	filemap.c	/^EXPORT_SYMBOL_GPL(replace_page_cache_page);$/;"	v
replace_page_cache_page	filemap.c	/^int replace_page_cache_page(struct page *old, struct page *new, gfp_t gfp_mask)$/;"	f
replace_sub_page	zsmalloc.c	/^static void replace_sub_page(struct size_class *class, struct zspage *zspage,$/;"	f	file:
report_enabled	kasan/report.c	/^static bool report_enabled(void)$/;"	f	file:
report_hugepages	hugetlb.c	/^static void __init report_hugepages(void)$/;"	f	file:
res	memory-failure.c	/^	unsigned long res;$/;"	m	struct:page_state	file:
res_type	memcontrol.c	/^enum res_type {$/;"	g	file:
rescan	internal.h	/^	bool rescan;			\/* Rescanning the same pageblock *\/$/;"	m	struct:compact_control
reserve_bad_mem	memtest.c	/^static void __init reserve_bad_mem(u64 pattern, phys_addr_t start_bad, phys_addr_t end_bad)$/;"	f	file:
reserve_bootmem_region	page_alloc.c	/^void __meminit reserve_bootmem_region(phys_addr_t start, phys_addr_t end)$/;"	f
reserve_highatomic_pageblock	page_alloc.c	/^static void reserve_highatomic_pageblock(struct page *page, struct zone *zone,$/;"	f	file:
reserve_mem_nb	mmap.c	/^static struct notifier_block reserve_mem_nb = {$/;"	v	typeref:struct:notifier_block	file:
reserve_mem_notifier	mmap.c	/^static int reserve_mem_notifier(struct notifier_block *nb,$/;"	f	file:
reserved	memory-failure.c	833;"	d	file:
reserved	memory-failure.c	882;"	d	file:
reset_all_zones_managed_pages	memblock.c	/^void __init reset_all_zones_managed_pages(void)$/;"	f
reset_cached_positions	compaction.c	/^static void reset_cached_positions(struct zone *zone)$/;"	f	file:
reset_isolation_suitable	compaction.c	/^void reset_isolation_suitable(pg_data_t *pgdat)$/;"	f
reset_node_managed_pages	memblock.c	/^void reset_node_managed_pages(pg_data_t *pgdat)$/;"	f
reset_node_present_pages	memory_hotplug.c	/^static void reset_node_present_pages(pg_data_t *pgdat)$/;"	f	file:
reset_page	zsmalloc.c	/^static void reset_page(struct page *page)$/;"	f	file:
reset_tag	kasan/kasan.h	204;"	d
reset_vma_resv_huge_pages	hugetlb.c	/^void reset_vma_resv_huge_pages(struct vm_area_struct *vma)$/;"	f
resiliency_test	slub.c	/^static void __init resiliency_test(void)$/;"	f	file:
resiliency_test	slub.c	/^static void resiliency_test(void) {};$/;"	f	file:
resize_pgdat_range	memory_hotplug.c	/^static void __meminit resize_pgdat_range(struct pglist_data *pgdat, unsigned long start_pfn,$/;"	f	file:
resize_zone_range	memory_hotplug.c	/^static void __meminit resize_zone_range(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
restore_bytes	slub.c	/^static void restore_bytes(struct kmem_cache *s, char *message, u8 data,$/;"	f	file:
restore_online_page_callback	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(restore_online_page_callback);$/;"	v
restore_online_page_callback	memory_hotplug.c	/^int restore_online_page_callback(online_page_callback_t callback)$/;"	f
restore_red_left	slub.c	/^static inline void *restore_red_left(struct kmem_cache *s, void *p)$/;"	f	file:
restore_reserve_on_error	hugetlb.c	/^static void restore_reserve_on_error(struct hstate *h,$/;"	f	file:
resv_hugepages	hugetlb.c	/^HSTATE_ATTR_RO(resv_hugepages);$/;"	v
resv_hugepages_show	hugetlb.c	/^static ssize_t resv_hugepages_show(struct kobject *kobj,$/;"	f	file:
resv_map_alloc	hugetlb.c	/^struct resv_map *resv_map_alloc(void)$/;"	f
resv_map_release	hugetlb.c	/^void resv_map_release(struct kref *ref)$/;"	f
retract_page_tables	khugepaged.c	/^static void retract_page_tables(struct address_space *mapping, pgoff_t pgoff)$/;"	f	file:
return_unused_surplus_pages	hugetlb.c	/^static void return_unused_surplus_pages(struct hstate *h,$/;"	f	file:
reusable_anon_vma	mmap.c	/^static struct anon_vma *reusable_anon_vma(struct vm_area_struct *old, struct vm_area_struct *a, struct vm_area_struct *b)$/;"	f	file:
reuse_ksm_page	ksm.c	/^bool reuse_ksm_page(struct page *page,$/;"	f
reuse_swap_page	swapfile.c	/^bool reuse_swap_page(struct page *page, int *total_map_swapcount)$/;"	f
right_free	percpu-internal.h	/^	int                     right_free;     \/* size of free space along$/;"	m	struct:pcpu_block_md
rmap_hlist_len	ksm.c	/^	int rmap_hlist_len;$/;"	m	struct:stable_node	file:
rmap_item	ksm.c	/^struct rmap_item {$/;"	s	file:
rmap_item_cache	ksm.c	/^static struct kmem_cache *rmap_item_cache;$/;"	v	typeref:struct:kmem_cache	file:
rmap_list	ksm.c	/^	struct rmap_item **rmap_list;$/;"	m	struct:ksm_scan	typeref:struct:ksm_scan::rmap_item	file:
rmap_list	ksm.c	/^	struct rmap_item *rmap_list;$/;"	m	struct:mm_slot	typeref:struct:mm_slot::rmap_item	file:
rmap_list	ksm.c	/^	struct rmap_item *rmap_list;$/;"	m	struct:rmap_item	typeref:struct:rmap_item::rmap_item	file:
rmap_walk	rmap.c	/^void rmap_walk(struct page *page, struct rmap_walk_control *rwc)$/;"	f
rmap_walk_anon	rmap.c	/^static void rmap_walk_anon(struct page *page, struct rmap_walk_control *rwc,$/;"	f	file:
rmap_walk_anon_lock	rmap.c	/^static struct anon_vma *rmap_walk_anon_lock(struct page *page,$/;"	f	file:
rmap_walk_file	rmap.c	/^static void rmap_walk_file(struct page *page, struct rmap_walk_control *rwc,$/;"	f	file:
rmap_walk_ksm	ksm.c	/^void rmap_walk_ksm(struct page *page, struct rmap_walk_control *rwc)$/;"	f
rmap_walk_locked	rmap.c	/^void rmap_walk_locked(struct page *page, struct rmap_walk_control *rwc)$/;"	f
rmqueue	page_alloc.c	/^struct page *rmqueue(struct zone *preferred_zone,$/;"	f	file:
rmqueue_bulk	page_alloc.c	/^static int rmqueue_bulk(struct zone *zone, unsigned int order,$/;"	f	file:
rmqueue_pcplist	page_alloc.c	/^static struct page *rmqueue_pcplist(struct zone *preferred_zone,$/;"	f	file:
rnd_state	slab.c	/^	struct rnd_state rnd_state;$/;"	m	union:freelist_init_state	typeref:struct:freelist_init_state::rnd_state	file:
rodata_test	rodata_test.c	/^void rodata_test(void)$/;"	f
rodata_test_data	rodata_test.c	/^static const int rodata_test_data = 0xC3;$/;"	v	file:
rollback_node_hotadd	memory_hotplug.c	/^static void rollback_node_hotadd(int nid)$/;"	f	file:
root_cache	slab.h	/^	struct kmem_cache *root_cache;$/;"	m	struct:memcg_cache_params	typeref:struct:memcg_cache_params::kmem_cache
root_caches_node	slab.h	282;"	d
root_caches_node	slab.h	415;"	d
root_stable_tree	ksm.c	/^static struct rb_root *root_stable_tree = one_stable_tree;$/;"	v	typeref:struct:rb_root	file:
root_unstable_tree	ksm.c	/^static struct rb_root *root_unstable_tree = one_unstable_tree;$/;"	v	typeref:struct:rb_root	file:
rotate_reclaimable_page	swap.c	/^void rotate_reclaimable_page(struct page *page)$/;"	f
round_hint_to_min	mmap.c	/^static inline unsigned long round_hint_to_min(unsigned long hint)$/;"	f	file:
row_is_guilty	kasan/report.c	/^static bool row_is_guilty(const void *row, const void *guilty)$/;"	f	file:
run	ksm.c	/^KSM_ATTR(run);$/;"	v
run_show	ksm.c	/^static ssize_t run_show(struct kobject *kobj, struct kobj_attribute *attr,$/;"	f	file:
run_store	ksm.c	/^static ssize_t run_store(struct kobject *kobj, struct kobj_attribute *attr,$/;"	f	file:
s	slub.c	/^	struct kmem_cache *s;$/;"	m	struct:detached_freelist	typeref:struct:detached_freelist::kmem_cache	file:
s	slub.c	/^	struct kmem_cache *s;$/;"	m	struct:saved_alias	typeref:struct:saved_alias::kmem_cache	file:
s_next	vmalloc.c	/^static void *s_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f	file:
s_page	zsmalloc.c	/^	struct page *s_page;$/;"	m	struct:zs_compact_control	typeref:struct:zs_compact_control::page	file:
s_show	vmalloc.c	/^static int s_show(struct seq_file *m, void *p)$/;"	f	file:
sane_reclaim	vmscan.c	/^static bool sane_reclaim(struct scan_control *sc)$/;"	f	file:
sanity_checks	slub.c	/^SLAB_ATTR(sanity_checks);$/;"	v
sanity_checks_show	slub.c	/^static ssize_t sanity_checks_show(struct kmem_cache *s, char *buf)$/;"	f	file:
sanity_checks_store	slub.c	/^static ssize_t sanity_checks_store(struct kmem_cache *s,$/;"	f	file:
save_stack	kasan/common.c	/^static inline depot_stack_handle_t save_stack(gfp_t flags)$/;"	f	file:
save_stack	page_owner.c	/^static noinline depot_stack_handle_t save_stack(gfp_t flags)$/;"	f	file:
saved_alias	slub.c	/^struct saved_alias {$/;"	s	file:
saved_gfp_mask	page_alloc.c	/^static gfp_t saved_gfp_mask;$/;"	v	file:
sc	memory-failure.c	826;"	d	file:
sc	memory-failure.c	875;"	d	file:
scan_area_cache	kmemleak.c	/^static struct kmem_cache *scan_area_cache;$/;"	v	typeref:struct:kmem_cache	file:
scan_balance	vmscan.c	/^enum scan_balance {$/;"	g	file:
scan_block	kmemleak.c	/^static void scan_block(void *_start, void *_end,$/;"	f	file:
scan_control	vmscan.c	/^struct scan_control {$/;"	s	file:
scan_get_next_rmap_item	ksm.c	/^static struct rmap_item *scan_get_next_rmap_item(struct page **page)$/;"	f	file:
scan_gray_list	kmemleak.c	/^static void scan_gray_list(void)$/;"	f	file:
scan_hint	percpu-internal.h	/^	int			scan_hint;	\/* scan hint for block *\/$/;"	m	struct:pcpu_block_md
scan_hint_start	percpu-internal.h	/^	int			scan_hint_start; \/* block relative starting$/;"	m	struct:pcpu_block_md
scan_large_block	kmemleak.c	/^static void scan_large_block(void *start, void *end)$/;"	f	file:
scan_movable_pages	memory_hotplug.c	/^static unsigned long scan_movable_pages(unsigned long start, unsigned long end)$/;"	f	file:
scan_object	kmemleak.c	/^static void scan_object(struct kmemleak_object *object)$/;"	f	file:
scan_result	khugepaged.c	/^enum scan_result {$/;"	g	file:
scan_shadow_nodes	workingset.c	/^static unsigned long scan_shadow_nodes(struct shrinker *shrinker,$/;"	f	file:
scan_should_stop	kmemleak.c	/^static int scan_should_stop(void)$/;"	f	file:
scan_sleep_millisecs_attr	khugepaged.c	/^static struct kobj_attribute scan_sleep_millisecs_attr =$/;"	v	typeref:struct:kobj_attribute	file:
scan_sleep_millisecs_show	khugepaged.c	/^static ssize_t scan_sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
scan_sleep_millisecs_store	khugepaged.c	/^static ssize_t scan_sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
scan_swap_map	swapfile.c	/^static unsigned long scan_swap_map(struct swap_info_struct *si,$/;"	f	file:
scan_swap_map_slots	swapfile.c	/^static int scan_swap_map_slots(struct swap_info_struct *si,$/;"	f	file:
scan_swap_map_ssd_cluster_conflict	swapfile.c	/^scan_swap_map_ssd_cluster_conflict(struct swap_info_struct *si,$/;"	f	file:
scan_swap_map_try_ssd_cluster	swapfile.c	/^static bool scan_swap_map_try_ssd_cluster(struct swap_info_struct *si,$/;"	f	file:
scan_thread	kmemleak.c	/^static struct task_struct *scan_thread;$/;"	v	typeref:struct:task_struct	file:
search_order	internal.h	/^	short search_order;		\/* order to start a fast search at *\/$/;"	m	struct:compact_control
section_activate	sparse.c	/^static struct page * __meminit section_activate(int nid, unsigned long pfn,$/;"	f	file:
section_deactivate	sparse.c	/^static void section_deactivate(unsigned long pfn, unsigned long nr_pages,$/;"	f	file:
section_map_size	sparse.c	/^static unsigned long __init section_map_size(void)$/;"	f	file:
section_mark_present	sparse.c	/^static void section_mark_present(struct mem_section *ms)$/;"	f	file:
seen	shmem.c	/^	int seen;$/;"	m	struct:shmem_options	file:
select_bad_process	oom_kill.c	/^static void select_bad_process(struct oom_control *oc)$/;"	f	file:
seq_puts_memcg_tunable	memcontrol.c	/^static int seq_puts_memcg_tunable(struct seq_file *m, unsigned long value)$/;"	f	file:
seqnr	ksm.c	/^	unsigned long seqnr;$/;"	m	struct:ksm_scan	file:
set_area_direct_map	vmalloc.c	/^static inline void set_area_direct_map(const struct vm_struct *area,$/;"	f	file:
set_cpu_partial	slub.c	/^static void set_cpu_partial(struct kmem_cache *s)$/;"	f	file:
set_dma_reserve	page_alloc.c	/^void __init set_dma_reserve(unsigned long new_dma_reserve)$/;"	f
set_first_obj_offset	zsmalloc.c	/^static inline void set_first_obj_offset(struct page *page, int offset)$/;"	f	file:
set_free_obj	slab.c	/^static inline void set_free_obj(struct page *page,$/;"	f	file:
set_freeobj	zsmalloc.c	/^static inline void set_freeobj(struct zspage *zspage, unsigned int obj)$/;"	f	file:
set_freepointer	slub.c	/^static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)$/;"	f	file:
set_hardened_usercopy	usercopy.c	/^late_initcall(set_hardened_usercopy);$/;"	v
set_hardened_usercopy	usercopy.c	/^static int __init set_hardened_usercopy(void)$/;"	f	file:
set_hashdist	page_alloc.c	/^static int __init set_hashdist(char *str)$/;"	f	file:
set_huge_ptep_writable	hugetlb.c	/^static void set_huge_ptep_writable(struct vm_area_struct *vma,$/;"	f	file:
set_huge_zero_page	huge_memory.c	/^static bool set_huge_zero_page(pgtable_t pgtable, struct mm_struct *mm,$/;"	f	file:
set_hwpoison_free_buddy_page	page_alloc.c	/^bool set_hwpoison_free_buddy_page(struct page *page)$/;"	f
set_iounmap_nonlazy	vmalloc.c	/^void set_iounmap_nonlazy(void)$/;"	f
set_max_huge_pages	hugetlb.c	/^static int set_max_huge_pages(struct hstate *h, unsigned long count, int nid,$/;"	f	file:
set_memcg_congestion	vmscan.c	/^static inline void set_memcg_congestion(struct pglist_data *pgdat,$/;"	f	file:
set_memcg_congestion	vmscan.c	/^static void set_memcg_congestion(pg_data_t *pgdat,$/;"	f	file:
set_migratetype_isolate	page_isolation.c	/^static int set_migratetype_isolate(struct page *page, int migratetype, int isol_flags)$/;"	f	file:
set_min_partial	slub.c	/^static void set_min_partial(struct kmem_cache *s, unsigned long min)$/;"	f	file:
set_mminit_loglevel	mm_init.c	/^static __init int set_mminit_loglevel(char *str)$/;"	f	file:
set_objfreelist_slab_cache	slab.c	/^static bool set_objfreelist_slab_cache(struct kmem_cache *cachep,$/;"	f	file:
set_off_slab_cache	slab.c	/^static bool set_off_slab_cache(struct kmem_cache *cachep,$/;"	f	file:
set_on_slab_cache	slab.c	/^static bool set_on_slab_cache(struct kmem_cache *cachep,$/;"	f	file:
set_online_page_callback	memory_hotplug.c	/^EXPORT_SYMBOL_GPL(set_online_page_callback);$/;"	v
set_online_page_callback	memory_hotplug.c	/^int set_online_page_callback(online_page_callback_t callback)$/;"	f
set_page_address	highmem.c	/^void set_page_address(struct page *page, void *virtual)$/;"	f
set_page_dirty	page-writeback.c	/^EXPORT_SYMBOL(set_page_dirty);$/;"	v
set_page_dirty	page-writeback.c	/^int set_page_dirty(struct page *page)$/;"	f
set_page_dirty_lock	page-writeback.c	/^EXPORT_SYMBOL(set_page_dirty_lock);$/;"	v
set_page_dirty_lock	page-writeback.c	/^int set_page_dirty_lock(struct page *page)$/;"	f
set_page_guard	page_alloc.c	/^static inline bool set_page_guard(struct zone *zone, struct page *page,$/;"	f	file:
set_page_huge_active	hugetlb.c	/^static void set_page_huge_active(struct page *page)$/;"	f	file:
set_page_order	page_alloc.c	/^static inline void set_page_order(struct page *page, unsigned int order)$/;"	f	file:
set_page_refcounted	internal.h	/^static inline void set_page_refcounted(struct page *page)$/;"	f
set_page_stable_node	ksm.c	/^static inline void set_page_stable_node(struct page *page,$/;"	f	file:
set_pageblock_migratetype	page_alloc.c	/^void set_pageblock_migratetype(struct page *page, int migratetype)$/;"	f
set_pageblock_order	page_alloc.c	/^void __init set_pageblock_order(void)$/;"	f
set_pcppage_migratetype	page_alloc.c	/^static inline void set_pcppage_migratetype(struct page *page, int migratetype)$/;"	f	file:
set_pfnblock_flags_mask	page_alloc.c	/^void set_pfnblock_flags_mask(struct page *page, unsigned long flags,$/;"	f
set_pgdat_percpu_threshold	vmstat.c	/^void set_pgdat_percpu_threshold(pg_data_t *pgdat,$/;"	f
set_pmd_migration_entry	huge_memory.c	/^void set_pmd_migration_entry(struct page_vma_mapped_walk *pvmw,$/;"	f
set_recommended_min_free_kbytes	khugepaged.c	/^static void set_recommended_min_free_kbytes(void)$/;"	f	file:
set_section_nid	sparse.c	/^static inline void set_section_nid(unsigned long section_nr, int nid)$/;"	f	file:
set_section_nid	sparse.c	/^static void set_section_nid(unsigned long section_nr, int nid)$/;"	f	file:
set_slob	slob.c	/^static void set_slob(slob_t *s, slobidx_t size, slob_t *next)$/;"	f	file:
set_slob_page_free	slob.c	/^static void set_slob_page_free(struct page *sp, struct list_head *list)$/;"	f	file:
set_tag	kasan/kasan.h	203;"	d
set_task_reclaim_state	vmscan.c	/^static void set_task_reclaim_state(struct task_struct *task,$/;"	f	file:
set_tlb_ubc_flush_pending	rmap.c	/^static void set_tlb_ubc_flush_pending(struct mm_struct *mm, bool writable)$/;"	f	file:
set_track	kasan/common.c	/^static inline void set_track(struct kasan_track *track, gfp_t flags)$/;"	f	file:
set_track	slub.c	/^static void set_track(struct kmem_cache *s, void *object,$/;"	f	file:
set_up_node	slab.c	/^static void __init set_up_node(struct kmem_cache *cachep, int index)$/;"	f	file:
set_vma_private_data	hugetlb.c	/^static void set_vma_private_data(struct vm_area_struct *vma,$/;"	f	file:
set_vma_resv_flags	hugetlb.c	/^static void set_vma_resv_flags(struct vm_area_struct *vma, unsigned long flags)$/;"	f	file:
set_vma_resv_map	hugetlb.c	/^static void set_vma_resv_map(struct vm_area_struct *vma, struct resv_map *map)$/;"	f	file:
set_wb_congested	backing-dev.c	/^EXPORT_SYMBOL(set_wb_congested);$/;"	v
set_wb_congested	backing-dev.c	/^void set_wb_congested(struct bdi_writeback_congested *congested, int sync)$/;"	f
set_zone_contiguous	page_alloc.c	/^void set_zone_contiguous(struct zone *zone)$/;"	f
set_zspage_mapping	zsmalloc.c	/^static void set_zspage_mapping(struct zspage *zspage,$/;"	f	file:
setup_cpu_cache	slab.c	/^static int __ref setup_cpu_cache(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
setup_fail_page_alloc	page_alloc.c	/^static int __init setup_fail_page_alloc(char *str)$/;"	f	file:
setup_failslab	failslab.c	/^static int __init setup_failslab(char *str)$/;"	f	file:
setup_kmalloc_cache_index_table	slab_common.c	/^void __init setup_kmalloc_cache_index_table(void)$/;"	f
setup_kmem_cache_node	slab.c	/^static int setup_kmem_cache_node(struct kmem_cache *cachep,$/;"	f	file:
setup_kmem_cache_nodes	slab.c	/^static int setup_kmem_cache_nodes(struct kmem_cache *cachep, gfp_t gfp)$/;"	f	file:
setup_memhp_default_state	memory_hotplug.c	/^static int __init setup_memhp_default_state(char *str)$/;"	f	file:
setup_min_slab_ratio	page_alloc.c	/^static void setup_min_slab_ratio(void)$/;"	f	file:
setup_min_unmapped_ratio	page_alloc.c	/^static void setup_min_unmapped_ratio(void)$/;"	f	file:
setup_nr_node_ids	page_alloc.c	/^void __init setup_nr_node_ids(void)$/;"	f
setup_numa_zonelist_order	page_alloc.c	/^static __init int setup_numa_zonelist_order(char *s)$/;"	f	file:
setup_numabalancing	mempolicy.c	/^static int __init setup_numabalancing(char *str)$/;"	f	file:
setup_object	slub.c	/^static void *setup_object(struct kmem_cache *s, struct page *page,$/;"	f	file:
setup_object_debug	slub.c	/^static inline void setup_object_debug(struct kmem_cache *s,$/;"	f	file:
setup_object_debug	slub.c	/^static void setup_object_debug(struct kmem_cache *s, struct page *page,$/;"	f	file:
setup_page_debug	slub.c	/^void setup_page_debug(struct kmem_cache *s, struct page *page, void *addr) {}$/;"	f	file:
setup_page_debug	slub.c	/^void setup_page_debug(struct kmem_cache *s, struct page *page, void *addr)$/;"	f	file:
setup_pageset	page_alloc.c	/^static void setup_pageset(struct per_cpu_pageset *p, unsigned long batch)$/;"	f	file:
setup_per_cpu_areas	percpu.c	/^void __init setup_per_cpu_areas(void)$/;"	f
setup_per_cpu_pageset	page_alloc.c	/^void __init setup_per_cpu_pageset(void)$/;"	f
setup_per_zone_lowmem_reserve	page_alloc.c	/^static void setup_per_zone_lowmem_reserve(void)$/;"	f	file:
setup_per_zone_wmarks	page_alloc.c	/^void setup_per_zone_wmarks(void)$/;"	f
setup_slab_nomerge	slab_common.c	/^static int __init setup_slab_nomerge(char *str)$/;"	f	file:
setup_slub_debug	slub.c	/^static int __init setup_slub_debug(char *str)$/;"	f	file:
setup_slub_max_order	slub.c	/^static int __init setup_slub_max_order(char *str)$/;"	f	file:
setup_slub_memcg_sysfs	slub.c	/^static int __init setup_slub_memcg_sysfs(char *str)$/;"	f	file:
setup_slub_min_objects	slub.c	/^static int __init setup_slub_min_objects(char *str)$/;"	f	file:
setup_slub_min_order	slub.c	/^static int __init setup_slub_min_order(char *str)$/;"	f	file:
setup_swap_extents	swapfile.c	/^static int setup_swap_extents(struct swap_info_struct *sis, sector_t *span)$/;"	f	file:
setup_swap_info	swapfile.c	/^static void setup_swap_info(struct swap_info_struct *p, int prio,$/;"	f	file:
setup_swap_map_and_extents	swapfile.c	/^static int setup_swap_map_and_extents(struct swap_info_struct *p,$/;"	f	file:
setup_transparent_hugepage	huge_memory.c	/^static int __init setup_transparent_hugepage(char *str)$/;"	f	file:
setup_usemap	page_alloc.c	/^static inline void setup_usemap(struct pglist_data *pgdat, struct zone *zone,$/;"	f	file:
setup_usemap	page_alloc.c	/^static void __ref setup_usemap(struct pglist_data *pgdat,$/;"	f	file:
setup_vm_debug	debug.c	/^static int __init setup_vm_debug(char *str)$/;"	f	file:
setup_vmalloc_vm	vmalloc.c	/^static void setup_vmalloc_vm(struct vm_struct *vm, struct vmap_area *va,$/;"	f	file:
setup_zone_pageset	page_alloc.c	/^void __meminit setup_zone_pageset(struct zone *zone)$/;"	f
shadow_invalid	kasan/common.c	/^static inline bool shadow_invalid(u8 tag, s8 shadow_byte)$/;"	f	file:
shadow_mapped	kasan/common.c	/^static bool shadow_mapped(unsigned long addr)$/;"	f	file:
shadow_nodes	workingset.c	/^static struct list_lru shadow_nodes;$/;"	v	typeref:struct:list_lru	file:
shadow_nodes_key	workingset.c	/^static struct lock_class_key shadow_nodes_key;$/;"	v	typeref:struct:lock_class_key	file:
shadow_pointer_offset	kasan/report.c	/^static int shadow_pointer_offset(const void *row, const void *shadow)$/;"	f	file:
shake_page	memory-failure.c	/^EXPORT_SYMBOL_GPL(shake_page);$/;"	v
shake_page	memory-failure.c	/^void shake_page(struct page *p, int access)$/;"	f
shared	slab.h	/^	struct array_cache *shared;	\/* shared per node *\/$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::array_cache
shared	slab.h	/^	unsigned int shared;$/;"	m	struct:slabinfo
shared_avail	slab.h	/^	unsigned long shared_avail;$/;"	m	struct:slabinfo
shared_policy_replace	mempolicy.c	/^static int shared_policy_replace(struct shared_policy *sp, unsigned long start,$/;"	f	file:
shm_mnt	shmem.c	/^static struct vfsmount *shm_mnt;$/;"	v	typeref:struct:vfsmount	file:
shmem_acct_block	shmem.c	/^static inline int shmem_acct_block(unsigned long flags, long pages)$/;"	f	file:
shmem_acct_size	shmem.c	/^static inline int shmem_acct_size(unsigned long flags, loff_t size)$/;"	f	file:
shmem_acct_size	shmem.c	4088;"	d	file:
shmem_add_to_page_cache	shmem.c	/^static int shmem_add_to_page_cache(struct page *page,$/;"	f	file:
shmem_alloc_and_acct_page	shmem.c	/^static struct page *shmem_alloc_and_acct_page(gfp_t gfp,$/;"	f	file:
shmem_alloc_hugepage	shmem.c	/^static struct page *shmem_alloc_hugepage(gfp_t gfp,$/;"	f	file:
shmem_alloc_inode	shmem.c	/^static struct inode *shmem_alloc_inode(struct super_block *sb)$/;"	f	file:
shmem_alloc_page	shmem.c	/^static struct page *shmem_alloc_page(gfp_t gfp,$/;"	f	file:
shmem_aops	shmem.c	/^static const struct address_space_operations shmem_aops = {$/;"	v	typeref:struct:address_space_operations	file:
shmem_aops	shmem.c	/^static const struct address_space_operations shmem_aops;$/;"	v	typeref:struct:address_space_operations	file:
shmem_charge	shmem.c	/^bool shmem_charge(struct inode *inode, long pages)$/;"	f
shmem_confirm_swap	shmem.c	/^static bool shmem_confirm_swap(struct address_space *mapping,$/;"	f	file:
shmem_create	shmem.c	/^static int shmem_create(struct inode *dir, struct dentry *dentry, umode_t mode,$/;"	f	file:
shmem_default_max_blocks	shmem.c	/^static unsigned long shmem_default_max_blocks(void)$/;"	f	file:
shmem_default_max_inodes	shmem.c	/^static unsigned long shmem_default_max_inodes(void)$/;"	f	file:
shmem_delete_from_page_cache	shmem.c	/^static void shmem_delete_from_page_cache(struct page *page, void *radswap)$/;"	f	file:
shmem_destroy_inode	shmem.c	/^static void shmem_destroy_inode(struct inode *inode)$/;"	f	file:
shmem_destroy_inodecache	shmem.c	/^static void shmem_destroy_inodecache(void)$/;"	f	file:
shmem_dir_inode_operations	shmem.c	/^static const struct inode_operations shmem_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_dir_inode_operations	shmem.c	/^static const struct inode_operations shmem_dir_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_enabled_attr	shmem.c	/^struct kobj_attribute shmem_enabled_attr =$/;"	v	typeref:struct:kobj_attribute
shmem_enabled_show	shmem.c	/^static ssize_t shmem_enabled_show(struct kobject *kobj,$/;"	f	file:
shmem_enabled_store	shmem.c	/^static ssize_t shmem_enabled_store(struct kobject *kobj,$/;"	f	file:
shmem_encode_fh	shmem.c	/^static int shmem_encode_fh(struct inode *inode, __u32 *fh, int *len,$/;"	f	file:
shmem_evict_inode	shmem.c	/^static void shmem_evict_inode(struct inode *inode)$/;"	f	file:
shmem_exchange	shmem.c	/^static int shmem_exchange(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry)$/;"	f	file:
shmem_export_ops	shmem.c	/^static const struct export_operations shmem_export_ops = {$/;"	v	typeref:struct:export_operations	file:
shmem_falloc	shmem.c	/^struct shmem_falloc {$/;"	s	file:
shmem_fallocate	shmem.c	/^static long shmem_fallocate(struct file *file, int mode, loff_t offset,$/;"	f	file:
shmem_fault	shmem.c	/^static vm_fault_t shmem_fault(struct vm_fault *vmf)$/;"	f	file:
shmem_fh_to_dentry	shmem.c	/^static struct dentry *shmem_fh_to_dentry(struct super_block *sb,$/;"	f	file:
shmem_file_llseek	shmem.c	/^static loff_t shmem_file_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
shmem_file_operations	shmem.c	/^static const struct file_operations shmem_file_operations = {$/;"	v	typeref:struct:file_operations	file:
shmem_file_operations	shmem.c	/^static const struct file_operations shmem_file_operations;$/;"	v	typeref:struct:file_operations	file:
shmem_file_operations	shmem.c	4086;"	d	file:
shmem_file_read_iter	shmem.c	/^static ssize_t shmem_file_read_iter(struct kiocb *iocb, struct iov_iter *to)$/;"	f	file:
shmem_file_setup	shmem.c	/^EXPORT_SYMBOL_GPL(shmem_file_setup);$/;"	v
shmem_file_setup	shmem.c	/^struct file *shmem_file_setup(const char *name, loff_t size, unsigned long flags)$/;"	f
shmem_file_setup_with_mnt	shmem.c	/^EXPORT_SYMBOL_GPL(shmem_file_setup_with_mnt);$/;"	v
shmem_file_setup_with_mnt	shmem.c	/^struct file *shmem_file_setup_with_mnt(struct vfsmount *mnt, const char *name,$/;"	f
shmem_fill_super	shmem.c	/^static int shmem_fill_super(struct super_block *sb, struct fs_context *fc)$/;"	f	file:
shmem_find_alias	shmem.c	/^static struct dentry *shmem_find_alias(struct inode *inode)$/;"	f	file:
shmem_find_swap_entries	shmem.c	/^static int shmem_find_swap_entries(struct address_space *mapping,$/;"	f	file:
shmem_format_huge	shmem.c	/^static const char *shmem_format_huge(int huge)$/;"	f	file:
shmem_free_fc	shmem.c	/^static void shmem_free_fc(struct fs_context *fc)$/;"	f	file:
shmem_free_in_core_inode	shmem.c	/^static void shmem_free_in_core_inode(struct inode *inode)$/;"	f	file:
shmem_free_inode	shmem.c	/^static void shmem_free_inode(struct super_block *sb)$/;"	f	file:
shmem_free_swap	shmem.c	/^static int shmem_free_swap(struct address_space *mapping,$/;"	f	file:
shmem_fs_context_ops	shmem.c	/^static const struct fs_context_operations shmem_fs_context_ops = {$/;"	v	typeref:struct:fs_context_operations	file:
shmem_fs_parameters	shmem.c	/^const struct fs_parameter_description shmem_fs_parameters = {$/;"	v	typeref:struct:fs_parameter_description
shmem_fs_type	shmem.c	/^static struct file_system_type shmem_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
shmem_fs_type	shmem.c	/^static struct file_system_type shmem_fs_type;$/;"	v	typeref:struct:file_system_type	file:
shmem_get_inode	shmem.c	/^static struct inode *shmem_get_inode(struct super_block *sb, const struct inode *dir,$/;"	f	file:
shmem_get_inode	shmem.c	4087;"	d	file:
shmem_get_link	shmem.c	/^static const char *shmem_get_link(struct dentry *dentry,$/;"	f	file:
shmem_get_parent	shmem.c	/^static struct dentry *shmem_get_parent(struct dentry *child)$/;"	f	file:
shmem_get_policy	shmem.c	/^static struct mempolicy *shmem_get_policy(struct vm_area_struct *vma,$/;"	f	file:
shmem_get_sbmpol	shmem.c	/^static inline struct mempolicy *shmem_get_sbmpol(struct shmem_sb_info *sbinfo)$/;"	f	file:
shmem_get_sbmpol	shmem.c	/^static struct mempolicy *shmem_get_sbmpol(struct shmem_sb_info *sbinfo)$/;"	f	file:
shmem_get_tree	shmem.c	/^static int shmem_get_tree(struct fs_context *fc)$/;"	f	file:
shmem_get_unmapped_area	shmem.c	/^unsigned long shmem_get_unmapped_area(struct file *file,$/;"	f
shmem_getattr	shmem.c	/^static int shmem_getattr(const struct path *path, struct kstat *stat,$/;"	f	file:
shmem_getpage	shmem.c	/^int shmem_getpage(struct inode *inode, pgoff_t index,$/;"	f
shmem_getpage_gfp	shmem.c	/^static int shmem_getpage_gfp(struct inode *inode, pgoff_t index,$/;"	f	file:
shmem_huge	shmem.c	585;"	d	file:
shmem_huge_enabled	shmem.c	/^bool shmem_huge_enabled(struct vm_area_struct *vma)$/;"	f
shmem_init	shmem.c	/^int __init shmem_init(void)$/;"	f
shmem_init_fs_context	shmem.c	/^int shmem_init_fs_context(struct fs_context *fc)$/;"	f
shmem_init_inode	shmem.c	/^static void shmem_init_inode(void *foo)$/;"	f	file:
shmem_init_inodecache	shmem.c	/^static void shmem_init_inodecache(void)$/;"	f	file:
shmem_initxattrs	shmem.c	/^static int shmem_initxattrs(struct inode *inode,$/;"	f	file:
shmem_initxattrs	shmem.c	2469;"	d	file:
shmem_inode_acct_block	shmem.c	/^static inline bool shmem_inode_acct_block(struct inode *inode, long pages)$/;"	f	file:
shmem_inode_cachep	shmem.c	/^static struct kmem_cache *shmem_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
shmem_inode_operations	shmem.c	/^static const struct inode_operations shmem_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_inode_operations	shmem.c	/^static const struct inode_operations shmem_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_inode_unacct_blocks	shmem.c	/^static inline void shmem_inode_unacct_blocks(struct inode *inode, long pages)$/;"	f	file:
shmem_kernel_file_setup	shmem.c	/^struct file *shmem_kernel_file_setup(const char *name, loff_t size, unsigned long flags)$/;"	f
shmem_link	shmem.c	/^static int shmem_link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_listxattr	shmem.c	/^static ssize_t shmem_listxattr(struct dentry *dentry, char *buffer, size_t size)$/;"	f	file:
shmem_lock	shmem.c	/^int shmem_lock(struct file *file, int lock, struct user_struct *user)$/;"	f
shmem_mapping	shmem.c	/^bool shmem_mapping(struct address_space *mapping)$/;"	f
shmem_match	shmem.c	/^static int shmem_match(struct inode *ino, void *vfh)$/;"	f	file:
shmem_mcopy_atomic_pte	shmem.c	/^int shmem_mcopy_atomic_pte(struct mm_struct *dst_mm,$/;"	f
shmem_mfill_atomic_pte	shmem.c	/^static int shmem_mfill_atomic_pte(struct mm_struct *dst_mm,$/;"	f	file:
shmem_mfill_zeropage_pte	shmem.c	/^int shmem_mfill_zeropage_pte(struct mm_struct *dst_mm,$/;"	f
shmem_mkdir	shmem.c	/^static int shmem_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
shmem_mknod	shmem.c	/^shmem_mknod(struct inode *dir, struct dentry *dentry, umode_t mode, dev_t dev)$/;"	f	file:
shmem_mmap	shmem.c	/^static int shmem_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
shmem_ops	shmem.c	/^static const struct super_operations shmem_ops = {$/;"	v	typeref:struct:super_operations	file:
shmem_ops	shmem.c	/^static const struct super_operations shmem_ops;$/;"	v	typeref:struct:super_operations	file:
shmem_options	shmem.c	/^struct shmem_options {$/;"	s	file:
shmem_param	shmem.c	/^enum shmem_param {$/;"	g	file:
shmem_param_enums	shmem.c	/^static const struct fs_parameter_enum shmem_param_enums[] = {$/;"	v	typeref:struct:fs_parameter_enum	file:
shmem_param_specs	shmem.c	/^static const struct fs_parameter_spec shmem_param_specs[] = {$/;"	v	typeref:struct:fs_parameter_spec	file:
shmem_parse_huge	shmem.c	/^static int shmem_parse_huge(const char *str)$/;"	f	file:
shmem_parse_one	shmem.c	/^static int shmem_parse_one(struct fs_context *fc, struct fs_parameter *param)$/;"	f	file:
shmem_parse_options	shmem.c	/^static int shmem_parse_options(struct fs_context *fc, void *data)$/;"	f	file:
shmem_partial_swap_usage	shmem.c	/^unsigned long shmem_partial_swap_usage(struct address_space *mapping,$/;"	f
shmem_pseudo_vma_destroy	shmem.c	/^static void shmem_pseudo_vma_destroy(struct vm_area_struct *vma)$/;"	f	file:
shmem_pseudo_vma_init	shmem.c	/^static void shmem_pseudo_vma_init(struct vm_area_struct *vma,$/;"	f	file:
shmem_put_link	shmem.c	/^static void shmem_put_link(void *arg)$/;"	f	file:
shmem_put_super	shmem.c	/^static void shmem_put_super(struct super_block *sb)$/;"	f	file:
shmem_reacct_size	shmem.c	/^static inline int shmem_reacct_size(unsigned long flags,$/;"	f	file:
shmem_read_mapping_page_gfp	shmem.c	/^EXPORT_SYMBOL_GPL(shmem_read_mapping_page_gfp);$/;"	v
shmem_read_mapping_page_gfp	shmem.c	/^struct page *shmem_read_mapping_page_gfp(struct address_space *mapping,$/;"	f
shmem_recalc_inode	shmem.c	/^static void shmem_recalc_inode(struct inode *inode)$/;"	f	file:
shmem_reconfigure	shmem.c	/^static int shmem_reconfigure(struct fs_context *fc)$/;"	f	file:
shmem_rename2	shmem.c	/^static int shmem_rename2(struct inode *old_dir, struct dentry *old_dentry, struct inode *new_dir, struct dentry *new_dentry, unsigned int flags)$/;"	f	file:
shmem_replace_entry	shmem.c	/^static int shmem_replace_entry(struct address_space *mapping,$/;"	f	file:
shmem_replace_page	shmem.c	/^static int shmem_replace_page(struct page **pagep, gfp_t gfp,$/;"	f	file:
shmem_reserve_inode	shmem.c	/^static int shmem_reserve_inode(struct super_block *sb)$/;"	f	file:
shmem_rmdir	shmem.c	/^static int shmem_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_security_xattr_handler	shmem.c	/^static const struct xattr_handler shmem_security_xattr_handler = {$/;"	v	typeref:struct:xattr_handler	file:
shmem_seek_hole_data	shmem.c	/^static pgoff_t shmem_seek_hole_data(struct address_space *mapping,$/;"	f	file:
shmem_set_policy	shmem.c	/^static int shmem_set_policy(struct vm_area_struct *vma, struct mempolicy *mpol)$/;"	f	file:
shmem_setattr	shmem.c	/^static int shmem_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f	file:
shmem_short_symlink_operations	shmem.c	/^static const struct inode_operations shmem_short_symlink_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_short_symlink_operations	shmem.c	/^static const struct inode_operations shmem_short_symlink_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_should_replace_page	shmem.c	/^static bool shmem_should_replace_page(struct page *page, gfp_t gfp)$/;"	f	file:
shmem_show_mpol	shmem.c	/^static inline void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)$/;"	f	file:
shmem_show_mpol	shmem.c	/^static void shmem_show_mpol(struct seq_file *seq, struct mempolicy *mpol)$/;"	f	file:
shmem_show_options	shmem.c	/^static int shmem_show_options(struct seq_file *seq, struct dentry *root)$/;"	f	file:
shmem_special_inode_operations	shmem.c	/^static const struct inode_operations shmem_special_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_special_inode_operations	shmem.c	/^static const struct inode_operations shmem_special_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_statfs	shmem.c	/^static int shmem_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
shmem_swap_usage	shmem.c	/^unsigned long shmem_swap_usage(struct vm_area_struct *vma)$/;"	f
shmem_swapin	shmem.c	/^static struct page *shmem_swapin(swp_entry_t swap, gfp_t gfp,$/;"	f	file:
shmem_swapin_page	shmem.c	/^static int shmem_swapin_page(struct inode *inode, pgoff_t index,$/;"	f	file:
shmem_symlink	shmem.c	/^static int shmem_symlink(struct inode *dir, struct dentry *dentry, const char *symname)$/;"	f	file:
shmem_symlink_inode_operations	shmem.c	/^static const struct inode_operations shmem_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations	file:
shmem_symlink_inode_operations	shmem.c	/^static const struct inode_operations shmem_symlink_inode_operations;$/;"	v	typeref:struct:inode_operations	file:
shmem_tmpfile	shmem.c	/^shmem_tmpfile(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
shmem_truncate_range	shmem.c	/^EXPORT_SYMBOL_GPL(shmem_truncate_range);$/;"	v
shmem_truncate_range	shmem.c	/^void shmem_truncate_range(struct inode *inode, loff_t lstart, loff_t lend)$/;"	f
shmem_trusted_xattr_handler	shmem.c	/^static const struct xattr_handler shmem_trusted_xattr_handler = {$/;"	v	typeref:struct:xattr_handler	file:
shmem_unacct_blocks	shmem.c	/^static inline void shmem_unacct_blocks(unsigned long flags, long pages)$/;"	f	file:
shmem_unacct_size	shmem.c	/^static inline void shmem_unacct_size(unsigned long flags, loff_t size)$/;"	f	file:
shmem_unacct_size	shmem.c	4089;"	d	file:
shmem_uncharge	shmem.c	/^void shmem_uncharge(struct inode *inode, long pages)$/;"	f
shmem_undo_range	shmem.c	/^static void shmem_undo_range(struct inode *inode, loff_t lstart, loff_t lend,$/;"	f	file:
shmem_unlink	shmem.c	/^static int shmem_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
shmem_unlock_mapping	shmem.c	/^void shmem_unlock_mapping(struct address_space *mapping)$/;"	f
shmem_unuse	shmem.c	/^int shmem_unuse(unsigned int type, bool frontswap,$/;"	f
shmem_unuse_inode	shmem.c	/^static int shmem_unuse_inode(struct inode *inode, unsigned int type,$/;"	f	file:
shmem_unuse_swap_entries	shmem.c	/^static int shmem_unuse_swap_entries(struct inode *inode, struct pagevec pvec,$/;"	f	file:
shmem_unused_huge_count	shmem.c	/^static long shmem_unused_huge_count(struct super_block *sb,$/;"	f	file:
shmem_unused_huge_scan	shmem.c	/^static long shmem_unused_huge_scan(struct super_block *sb,$/;"	f	file:
shmem_unused_huge_shrink	shmem.c	/^static unsigned long shmem_unused_huge_shrink(struct shmem_sb_info *sbinfo,$/;"	f	file:
shmem_vm_ops	shmem.c	/^static const struct vm_operations_struct shmem_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
shmem_vm_ops	shmem.c	/^static const struct vm_operations_struct shmem_vm_ops;$/;"	v	typeref:struct:vm_operations_struct	file:
shmem_vm_ops	shmem.c	4085;"	d	file:
shmem_whiteout	shmem.c	/^static int shmem_whiteout(struct inode *old_dir, struct dentry *old_dentry)$/;"	f	file:
shmem_write_begin	shmem.c	/^shmem_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
shmem_write_end	shmem.c	/^shmem_write_end(struct file *file, struct address_space *mapping,$/;"	f	file:
shmem_writepage	shmem.c	/^static int shmem_writepage(struct page *page, struct writeback_control *wbc)$/;"	f	file:
shmem_xattr_handler_get	shmem.c	/^static int shmem_xattr_handler_get(const struct xattr_handler *handler,$/;"	f	file:
shmem_xattr_handler_set	shmem.c	/^static int shmem_xattr_handler_set(const struct xattr_handler *handler,$/;"	f	file:
shmem_xattr_handlers	shmem.c	/^static const struct xattr_handler *shmem_xattr_handlers[] = {$/;"	v	typeref:struct:xattr_handler	file:
shmem_zero_setup	shmem.c	/^int shmem_zero_setup(struct vm_area_struct *vma)$/;"	f
should_compact_retry	page_alloc.c	/^should_compact_retry(struct alloc_context *ac, int order, int alloc_flags,$/;"	f	file:
should_compact_retry	page_alloc.c	/^should_compact_retry(struct alloc_context *ac, unsigned int order, int alloc_flags,$/;"	f	file:
should_continue_reclaim	vmscan.c	/^static inline bool should_continue_reclaim(struct pglist_data *pgdat,$/;"	f	file:
should_defer_flush	rmap.c	/^static bool should_defer_flush(struct mm_struct *mm, enum ttu_flags flags)$/;"	f	file:
should_fail_alloc_page	page_alloc.c	/^static noinline bool should_fail_alloc_page(gfp_t gfp_mask, unsigned int order)$/;"	f	file:
should_failslab	slab_common.c	/^int should_failslab(struct kmem_cache *s, gfp_t gfpflags)$/;"	f
should_force_charge	memcontrol.c	/^static inline bool should_force_charge(void)$/;"	f	file:
should_force_cow_break	gup.c	/^static inline bool should_force_cow_break(struct vm_area_struct *vma, unsigned int flags)$/;"	f	file:
should_reclaim_retry	page_alloc.c	/^should_reclaim_retry(gfp_t gfp_mask, unsigned order,$/;"	f	file:
should_skip_region	memblock.c	/^static bool should_skip_region(struct memblock_region *m, int nid, int flags)$/;"	f	file:
show	slub.c	/^	ssize_t (*show)(struct kmem_cache *s, char *buf);$/;"	m	struct:slab_attribute	file:
show_free_areas	page_alloc.c	/^void show_free_areas(unsigned int filter, nodemask_t *nodemask)$/;"	f
show_mem_node_skip	page_alloc.c	/^static bool show_mem_node_skip(unsigned int flags, int nid, nodemask_t *nodemask)$/;"	f	file:
show_migration_types	page_alloc.c	/^static void show_migration_types(unsigned char type)$/;"	f	file:
show_node	page_alloc.c	/^static inline void show_node(struct zone *zone)$/;"	f	file:
show_numa_info	vmalloc.c	/^static void show_numa_info(struct seq_file *m, struct vm_struct *v)$/;"	f	file:
show_pools	dmapool.c	/^show_pools(struct device *dev, struct device_attribute *attr, char *buf)$/;"	f	file:
show_purge_info	vmalloc.c	/^static void show_purge_info(struct seq_file *m)$/;"	f	file:
show_slab_objects	slub.c	/^static ssize_t show_slab_objects(struct kmem_cache *s,$/;"	f	file:
show_stat	slub.c	/^static int show_stat(struct kmem_cache *s, char *buf, enum stat_item si)$/;"	f	file:
show_swap_cache_info	swap_state.c	/^void show_swap_cache_info(void)$/;"	f
shrink	slub.c	/^SLAB_ATTR(shrink);$/;"	v
shrink_active_list	vmscan.c	/^static void shrink_active_list(unsigned long nr_to_scan,$/;"	f	file:
shrink_all_memory	vmscan.c	/^unsigned long shrink_all_memory(unsigned long nr_to_reclaim)$/;"	f
shrink_huge_zero_page_count	huge_memory.c	/^static unsigned long shrink_huge_zero_page_count(struct shrinker *shrink,$/;"	f	file:
shrink_huge_zero_page_scan	huge_memory.c	/^static unsigned long shrink_huge_zero_page_scan(struct shrinker *shrink,$/;"	f	file:
shrink_inactive_list	vmscan.c	/^shrink_inactive_list(unsigned long nr_to_scan, struct lruvec *lruvec,$/;"	f	file:
shrink_list	vmscan.c	/^static unsigned long shrink_list(enum lru_list lru, unsigned long nr_to_scan,$/;"	f	file:
shrink_node	vmscan.c	/^static bool shrink_node(pg_data_t *pgdat, struct scan_control *sc)$/;"	f	file:
shrink_node_memcg	vmscan.c	/^static void shrink_node_memcg(struct pglist_data *pgdat, struct mem_cgroup *memcg,$/;"	f	file:
shrink_page_list	vmscan.c	/^static unsigned long shrink_page_list(struct list_head *page_list,$/;"	f	file:
shrink_readahead_size_eio	filemap.c	/^static void shrink_readahead_size_eio(struct file *filp,$/;"	f	file:
shrink_show	slub.c	/^static ssize_t shrink_show(struct kmem_cache *s, char *buf)$/;"	f	file:
shrink_slab	vmscan.c	/^static unsigned long shrink_slab(gfp_t gfp_mask, int nid,$/;"	f	file:
shrink_slab_memcg	vmscan.c	/^static unsigned long shrink_slab_memcg(gfp_t gfp_mask, int nid,$/;"	f	file:
shrink_store	slub.c	/^static ssize_t shrink_store(struct kmem_cache *s,$/;"	f	file:
shrink_vma	nommu.c	/^static int shrink_vma(struct mm_struct *mm,$/;"	f	file:
shrink_zone_span	memory_hotplug.c	/^static void shrink_zone_span(struct zone *zone, unsigned long start_pfn,$/;"	f	file:
shrink_zones	vmscan.c	/^static void shrink_zones(struct zonelist *zonelist, struct scan_control *sc)$/;"	f	file:
shrinker	zsmalloc.c	/^	struct shrinker shrinker;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::shrinker	file:
shrinker_nr_max	vmscan.c	/^static int shrinker_nr_max;$/;"	v	file:
shuffle_free_memory	shuffle.h	/^static inline void shuffle_free_memory(pg_data_t *pgdat)$/;"	f
shuffle_freelist	slab.c	/^static bool shuffle_freelist(struct kmem_cache *cachep, struct page *page)$/;"	f	file:
shuffle_freelist	slab.c	/^static inline bool shuffle_freelist(struct kmem_cache *cachep,$/;"	f	file:
shuffle_freelist	slub.c	/^static bool shuffle_freelist(struct kmem_cache *s, struct page *page)$/;"	f	file:
shuffle_freelist	slub.c	/^static inline bool shuffle_freelist(struct kmem_cache *s, struct page *page)$/;"	f	file:
shuffle_param	shuffle.c	/^static bool shuffle_param;$/;"	v	file:
shuffle_show	shuffle.c	/^static int shuffle_show(char *buffer, const struct kernel_param *kp)$/;"	f	file:
shuffle_store	shuffle.c	/^static __meminit int shuffle_store(const char *val,$/;"	f	file:
shuffle_valid_page	shuffle.c	/^static struct page * __meminit shuffle_valid_page(unsigned long pfn, int order)$/;"	f	file:
shuffle_zone	shuffle.h	/^static inline void shuffle_zone(struct zone *z)$/;"	f
shutdown_cache	slab_common.c	/^static int shutdown_cache(struct kmem_cache *s)$/;"	f	file:
shutdown_memcg_caches	slab_common.c	/^static inline int shutdown_memcg_caches(struct kmem_cache *s)$/;"	f	file:
shutdown_memcg_caches	slab_common.c	/^static int shutdown_memcg_caches(struct kmem_cache *s)$/;"	f	file:
si_mem_available	page_alloc.c	/^EXPORT_SYMBOL_GPL(si_mem_available);$/;"	v
si_mem_available	page_alloc.c	/^long si_mem_available(void)$/;"	f
si_meminfo	page_alloc.c	/^EXPORT_SYMBOL(si_meminfo);$/;"	v
si_meminfo	page_alloc.c	/^void si_meminfo(struct sysinfo *val)$/;"	f
si_meminfo_node	page_alloc.c	/^void si_meminfo_node(struct sysinfo *val, int nid)$/;"	f
si_swapinfo	swapfile.c	/^void si_swapinfo(struct sysinfo *val)$/;"	f
single_bit_flip	page_poison.c	/^static bool single_bit_flip(unsigned char a, unsigned char b)$/;"	f	file:
single_hugepage_flag_show	huge_memory.c	/^ssize_t single_hugepage_flag_show(struct kobject *kobj,$/;"	f
single_hugepage_flag_store	huge_memory.c	/^ssize_t single_hugepage_flag_store(struct kobject *kobj,$/;"	f
size	dmapool.c	/^	size_t size;$/;"	m	struct:dma_pool	file:
size	gup_benchmark.c	/^	__u64 size;$/;"	m	struct:gup_benchmark	file:
size	kasan/kasan.h	/^	size_t size;			\/* Size of the global variable. *\/$/;"	m	struct:kasan_global
size	kmemleak.c	/^	size_t size;$/;"	m	struct:kmemleak_object	file:
size	kmemleak.c	/^	size_t size;$/;"	m	struct:kmemleak_scan_area	file:
size	slab.h	/^	unsigned int size;	\/* The aligned\/padded\/added on size  *\/$/;"	m	struct:kmem_cache
size	slab.h	/^	unsigned int size;$/;"	m	struct:kmalloc_info_struct
size	slob.c	/^	int size;$/;"	m	struct:slob_rcu	file:
size	zsmalloc.c	/^	int size;$/;"	m	struct:size_class	file:
size_class	zsmalloc.c	/^	struct size_class *size_class[ZS_SIZE_CLASSES];$/;"	m	struct:zs_pool	typeref:struct:zs_pool::size_class	file:
size_class	zsmalloc.c	/^struct size_class {$/;"	s	file:
size_from_object	slub.c	/^static inline unsigned int size_from_object(struct kmem_cache *s)$/;"	f	file:
size_index_elem	slab_common.c	/^static inline unsigned int size_index_elem(unsigned int bytes)$/;"	f	file:
size_shift	memory-failure.c	/^	short size_shift;$/;"	m	struct:to_kill	file:
size_to_chunks	z3fold.c	/^static int size_to_chunks(size_t size)$/;"	f	file:
size_to_chunks	zbud.c	/^static int size_to_chunks(size_t size)$/;"	f	file:
size_to_hstate	hugetlb.c	/^struct hstate *size_to_hstate(unsigned long size)$/;"	f
size_with_redzone	kasan/kasan.h	/^	size_t size_with_redzone;	\/* Size of the variable + size of the red zone. 32 bytes aligned *\/$/;"	m	struct:kasan_global
slab	memory-failure.c	832;"	d	file:
slab	memory-failure.c	881;"	d	file:
slab_alloc	slab.c	/^slab_alloc(struct kmem_cache *cachep, gfp_t flags, unsigned long caller)$/;"	f	file:
slab_alloc	slub.c	/^static __always_inline void *slab_alloc(struct kmem_cache *s,$/;"	f	file:
slab_alloc_node	slab.c	/^slab_alloc_node(struct kmem_cache *cachep, gfp_t flags, int nodeid,$/;"	f	file:
slab_alloc_node	slub.c	/^static __always_inline void *slab_alloc_node(struct kmem_cache *s,$/;"	f	file:
slab_attr_group	slub.c	/^static const struct attribute_group slab_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
slab_attr_show	slub.c	/^static ssize_t slab_attr_show(struct kobject *kobj,$/;"	f	file:
slab_attr_store	slub.c	/^static ssize_t slab_attr_store(struct kobject *kobj,$/;"	f	file:
slab_attribute	slub.c	/^struct slab_attribute {$/;"	s	file:
slab_attrs	slub.c	/^static struct attribute *slab_attrs[] = {$/;"	v	typeref:struct:attribute	file:
slab_bug	slub.c	/^static void slab_bug(struct kmem_cache *s, char *fmt, ...)$/;"	f	file:
slab_caches	slab_common.c	/^LIST_HEAD(slab_caches);$/;"	v
slab_caches_to_rcu_destroy_workfn	slab_common.c	/^static void slab_caches_to_rcu_destroy_workfn(struct work_struct *work)$/;"	f	file:
slab_dead_cpu	slab.c	/^int slab_dead_cpu(unsigned int cpu)$/;"	f
slab_destroy	slab.c	/^static void slab_destroy(struct kmem_cache *cachep, struct page *page)$/;"	f	file:
slab_destroy_debugcheck	slab.c	/^static void slab_destroy_debugcheck(struct kmem_cache *cachep,$/;"	f	file:
slab_early_init	slab.c	/^static int slab_early_init = 1;$/;"	v	file:
slab_equal_or_root	slab.h	/^static inline bool slab_equal_or_root(struct kmem_cache *s,$/;"	f
slab_err	slub.c	/^static __printf(3, 4) void slab_err(struct kmem_cache *s, struct page *page,$/;"	f
slab_error	slab.c	436;"	d	file:
slab_fix	slub.c	/^static void slab_fix(struct kmem_cache *s, char *fmt, ...)$/;"	f	file:
slab_free	slub.c	/^static __always_inline void slab_free(struct kmem_cache *s, struct page *page,$/;"	f	file:
slab_free_freelist_hook	slub.c	/^static inline bool slab_free_freelist_hook(struct kmem_cache *s,$/;"	f	file:
slab_free_hook	slub.c	/^static __always_inline bool slab_free_hook(struct kmem_cache *s, void *x)$/;"	f	file:
slab_get_obj	slab.c	/^static void *slab_get_obj(struct kmem_cache *cachep, struct page *page)$/;"	f	file:
slab_index	slub.c	/^static inline unsigned int slab_index(void *p, struct kmem_cache *s, void *addr)$/;"	f	file:
slab_init_memcg_params	slab.h	/^static inline void slab_init_memcg_params(struct kmem_cache *s)$/;"	f
slab_init_memcg_params	slab_common.c	/^void slab_init_memcg_params(struct kmem_cache *s)$/;"	f
slab_is_available	slab_common.c	/^bool slab_is_available(void)$/;"	f
slab_kernel_map	slab.c	/^static inline void slab_kernel_map(struct kmem_cache *cachep, void *objp,$/;"	f	file:
slab_kernel_map	slab.c	/^static void slab_kernel_map(struct kmem_cache *cachep, void *objp, int map)$/;"	f	file:
slab_kmem_cache_release	slab_common.c	/^void slab_kmem_cache_release(struct kmem_cache *s)$/;"	f
slab_kset	slub.c	/^static struct kset *slab_kset;$/;"	v	typeref:struct:kset	file:
slab_ksize	slab.h	/^static inline size_t slab_ksize(const struct kmem_cache *s)$/;"	f
slab_ktype	slub.c	/^static struct kobj_type slab_ktype = {$/;"	v	typeref:struct:kobj_type	file:
slab_lock	slub.c	/^static __always_inline void slab_lock(struct page *page)$/;"	f	file:
slab_map_pages	slab.c	/^static void slab_map_pages(struct kmem_cache *cache, struct page *page,$/;"	f	file:
slab_max_order	slab.c	/^static int slab_max_order = SLAB_MAX_ORDER_LO;$/;"	v	file:
slab_max_order_setup	slab.c	/^static int __init slab_max_order_setup(char *str)$/;"	f	file:
slab_mem_going_offline_callback	slub.c	/^static int slab_mem_going_offline_callback(void *arg)$/;"	f	file:
slab_mem_going_online_callback	slub.c	/^static int slab_mem_going_online_callback(void *arg)$/;"	f	file:
slab_mem_offline_callback	slub.c	/^static void slab_mem_offline_callback(void *arg)$/;"	f	file:
slab_memory_callback	slab.c	/^static int __meminit slab_memory_callback(struct notifier_block *self,$/;"	f	file:
slab_memory_callback	slub.c	/^static int slab_memory_callback(struct notifier_block *self,$/;"	f	file:
slab_memory_callback_nb	slub.c	/^static struct notifier_block slab_memory_callback_nb = {$/;"	v	typeref:struct:notifier_block	file:
slab_mutex	slab_common.c	/^DEFINE_MUTEX(slab_mutex);$/;"	v
slab_next	slab_common.c	/^void *slab_next(struct seq_file *m, void *p, loff_t *pos)$/;"	f
slab_nomerge	slab_common.c	/^static bool slab_nomerge = !IS_ENABLED(CONFIG_SLAB_MERGE_DEFAULT);$/;"	v	file:
slab_offline_cpu	slab.c	/^static int slab_offline_cpu(unsigned int cpu)$/;"	f	file:
slab_online_cpu	slab.c	/^static int slab_online_cpu(unsigned int cpu)$/;"	f	file:
slab_order	slub.c	/^static inline unsigned int slab_order(unsigned int size,$/;"	f	file:
slab_out_of_memory	slab.c	/^slab_out_of_memory(struct kmem_cache *cachep, gfp_t gfpflags, int nodeid)$/;"	f	file:
slab_out_of_memory	slub.c	/^slab_out_of_memory(struct kmem_cache *s, gfp_t gfpflags, int nid)$/;"	f	file:
slab_pad_check	slub.c	/^static inline int slab_pad_check(struct kmem_cache *s, struct page *page)$/;"	f	file:
slab_pad_check	slub.c	/^static int slab_pad_check(struct kmem_cache *s, struct page *page)$/;"	f	file:
slab_post_alloc_hook	slab.h	/^static inline void slab_post_alloc_hook(struct kmem_cache *s, gfp_t flags,$/;"	f
slab_pre_alloc_hook	slab.h	/^static inline struct kmem_cache *slab_pre_alloc_hook(struct kmem_cache *s,$/;"	f
slab_prepare_cpu	slab.c	/^int slab_prepare_cpu(unsigned int cpu)$/;"	f
slab_proc_init	slab_common.c	/^module_init(slab_proc_init);$/;"	v
slab_proc_init	slab_common.c	/^static int __init slab_proc_init(void)$/;"	f	file:
slab_put_obj	slab.c	/^static void slab_put_obj(struct kmem_cache *cachep,$/;"	f	file:
slab_root_caches	slab.h	414;"	d
slab_root_caches	slab_common.c	/^LIST_HEAD(slab_root_caches);$/;"	v
slab_show	slab_common.c	/^static int slab_show(struct seq_file *m, void *p)$/;"	f	file:
slab_size	slub.c	/^SLAB_ATTR_RO(slab_size);$/;"	v
slab_size_show	slub.c	/^static ssize_t slab_size_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slab_start	slab_common.c	/^void *slab_start(struct seq_file *m, loff_t *pos)$/;"	f
slab_stat_type	slub.c	/^enum slab_stat_type {$/;"	g	file:
slab_state	slab.h	/^enum slab_state {$/;"	g
slab_state	slab_common.c	/^enum slab_state slab_state;$/;"	v	typeref:enum:slab_state
slab_stop	slab_common.c	/^void slab_stop(struct seq_file *m, void *p)$/;"	f
slab_sysfs_init	slub.c	/^__initcall(slab_sysfs_init);$/;"	v
slab_sysfs_init	slub.c	/^static int __init slab_sysfs_init(void)$/;"	f	file:
slab_sysfs_ops	slub.c	/^static const struct sysfs_ops slab_sysfs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
slab_uevent_ops	slub.c	/^static const struct kset_uevent_ops slab_uevent_ops = {$/;"	v	typeref:struct:kset_uevent_ops	file:
slab_unlock	slub.c	/^static __always_inline void slab_unlock(struct page *page)$/;"	f	file:
slab_unmergeable	slab_common.c	/^int slab_unmergeable(struct kmem_cache *s)$/;"	f
slab_want_init_on_alloc	slab.h	/^static inline bool slab_want_init_on_alloc(gfp_t flags, struct kmem_cache *c)$/;"	f
slab_want_init_on_free	slab.h	/^static inline bool slab_want_init_on_free(struct kmem_cache *c)$/;"	f
slabinfo	slab.h	/^struct slabinfo {$/;"	s
slabinfo_op	slab_common.c	/^static const struct seq_operations slabinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
slabinfo_open	slab_common.c	/^static int slabinfo_open(struct inode *inode, struct file *file)$/;"	f	file:
slabinfo_show_stats	slab.c	/^void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *cachep)$/;"	f
slabinfo_show_stats	slub.c	/^void slabinfo_show_stats(struct seq_file *m, struct kmem_cache *s)$/;"	f
slabinfo_write	slab.c	/^ssize_t slabinfo_write(struct file *file, const char __user *buffer,$/;"	f
slabinfo_write	slub.c	/^ssize_t slabinfo_write(struct file *file, const char __user *buffer,$/;"	f
slabs	slub.c	/^SLAB_ATTR_RO(slabs);$/;"	v
slabs_cpu_partial	slub.c	/^SLAB_ATTR_RO(slabs_cpu_partial);$/;"	v
slabs_cpu_partial_show	slub.c	/^static ssize_t slabs_cpu_partial_show(struct kmem_cache *s, char *buf)$/;"	f	file:
slabs_destroy	slab.c	/^static void slabs_destroy(struct kmem_cache *cachep, struct list_head *list)$/;"	f	file:
slabs_free	slab.h	/^	struct list_head slabs_free;$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::list_head
slabs_full	slab.h	/^	struct list_head slabs_full;$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::list_head
slabs_node	slub.c	/^static inline unsigned long slabs_node(struct kmem_cache *s, int node)$/;"	f	file:
slabs_partial	slab.h	/^	struct list_head slabs_partial;	\/* partial list first, better asm code *\/$/;"	m	struct:kmem_cache_node	typeref:struct:kmem_cache_node::list_head
slabs_show	slub.c	/^static ssize_t slabs_show(struct kmem_cache *s, char *buf)$/;"	f	file:
sleep_millisecs	ksm.c	/^KSM_ATTR(sleep_millisecs);$/;"	v
sleep_millisecs_show	ksm.c	/^static ssize_t sleep_millisecs_show(struct kobject *kobj,$/;"	f	file:
sleep_millisecs_store	ksm.c	/^static ssize_t sleep_millisecs_store(struct kobject *kobj,$/;"	f	file:
slob_alloc	slob.c	/^static void *slob_alloc(size_t size, gfp_t gfp, int align, int node,$/;"	f	file:
slob_alloc_node	slob.c	/^static void *slob_alloc_node(struct kmem_cache *c, gfp_t flags, int node)$/;"	f	file:
slob_block	slob.c	/^struct slob_block {$/;"	s	file:
slob_free	slob.c	/^static void slob_free(void *block, int size)$/;"	f	file:
slob_free_pages	slob.c	/^static void slob_free_pages(void *b, int order)$/;"	f	file:
slob_last	slob.c	/^static int slob_last(slob_t *s)$/;"	f	file:
slob_new_pages	slob.c	/^static void *slob_new_pages(gfp_t gfp, int order, int node)$/;"	f	file:
slob_next	slob.c	/^static slob_t *slob_next(slob_t *s)$/;"	f	file:
slob_page_alloc	slob.c	/^static void *slob_page_alloc(struct page *sp, size_t size, int align,$/;"	f	file:
slob_page_free	slob.c	/^static inline int slob_page_free(struct page *sp)$/;"	f	file:
slob_rcu	slob.c	/^struct slob_rcu {$/;"	s	file:
slob_t	slob.c	/^typedef struct slob_block slob_t;$/;"	t	typeref:struct:slob_block	file:
slob_units	slob.c	/^static slobidx_t slob_units(slob_t *s)$/;"	f	file:
slobidx_t	slob.c	/^typedef s16 slobidx_t;$/;"	t	file:
slobidx_t	slob.c	/^typedef s32 slobidx_t;$/;"	t	file:
slot	z3fold.c	/^	unsigned long slot[BUDDY_MASK + 1];$/;"	m	struct:z3fold_buddy_slots	file:
slots	z3fold.c	/^	struct z3fold_buddy_slots *slots;$/;"	m	struct:z3fold_header	typeref:struct:z3fold_header::z3fold_buddy_slots	file:
slots_to_pool	z3fold.c	/^static inline struct z3fold_pool *slots_to_pool(struct z3fold_buddy_slots *s)$/;"	f	file:
slub_cpu_dead	slub.c	/^static int slub_cpu_dead(unsigned int cpu)$/;"	f	file:
slub_debug	slub.c	/^static slab_flags_t slub_debug = DEBUG_DEFAULT_FLAGS;$/;"	v	file:
slub_debug	slub.c	/^static slab_flags_t slub_debug;$/;"	v	file:
slub_debug	slub.c	1383;"	d	file:
slub_debug_slabs	slub.c	/^static char *slub_debug_slabs;$/;"	v	file:
slub_max_order	slub.c	/^static unsigned int slub_max_order = PAGE_ALLOC_COSTLY_ORDER;$/;"	v	file:
slub_min_objects	slub.c	/^static unsigned int slub_min_objects;$/;"	v	file:
slub_min_order	slub.c	/^static unsigned int slub_min_order;$/;"	v	file:
sn_cache	mempolicy.c	/^static struct kmem_cache *sn_cache;$/;"	v	typeref:struct:kmem_cache	file:
snapshot_refaults	vmscan.c	/^static void snapshot_refaults(struct mem_cgroup *root_memcg, pg_data_t *pgdat)$/;"	f	file:
soft_limit_excess	memcontrol.c	/^static unsigned long soft_limit_excess(struct mem_cgroup *memcg)$/;"	f	file:
soft_limit_tree_from_page	memcontrol.c	/^soft_limit_tree_from_page(struct page *page)$/;"	f	file:
soft_limit_tree_node	memcontrol.c	/^soft_limit_tree_node(int nid)$/;"	f	file:
soft_offline_free_page	memory-failure.c	/^static int soft_offline_free_page(struct page *page)$/;"	f	file:
soft_offline_huge_page	memory-failure.c	/^static int soft_offline_huge_page(struct page *page, int flags)$/;"	f	file:
soft_offline_in_use_page	memory-failure.c	/^static int soft_offline_in_use_page(struct page *page, int flags)$/;"	f	file:
soft_offline_page	memory-failure.c	/^int soft_offline_page(struct page *page, int flags)$/;"	f
sp_alloc	mempolicy.c	/^static struct sp_node *sp_alloc(unsigned long start, unsigned long end,$/;"	f	file:
sp_delete	mempolicy.c	/^static void sp_delete(struct shared_policy *sp, struct sp_node *n)$/;"	f	file:
sp_free	mempolicy.c	/^static void sp_free(struct sp_node *n)$/;"	f	file:
sp_insert	mempolicy.c	/^static void sp_insert(struct shared_policy *sp, struct sp_node *new)$/;"	f	file:
sp_lookup	mempolicy.c	/^sp_lookup(struct shared_policy *sp, unsigned long start, unsigned long end)$/;"	f	file:
sp_node_init	mempolicy.c	/^static void sp_node_init(struct sp_node *node, unsigned long start,$/;"	f	file:
sparse_add_section	sparse.c	/^int __meminit sparse_add_section(int nid, unsigned long start_pfn,$/;"	f
sparse_buffer_alloc	sparse.c	/^void * __meminit sparse_buffer_alloc(unsigned long size)$/;"	f
sparse_buffer_fini	sparse.c	/^static void __init sparse_buffer_fini(void)$/;"	f	file:
sparse_buffer_free	sparse.c	/^static inline void __meminit sparse_buffer_free(unsigned long size)$/;"	f	file:
sparse_buffer_init	sparse.c	/^static void __init sparse_buffer_init(unsigned long size, int nid)$/;"	f	file:
sparse_decode_mem_map	sparse.c	/^struct page *sparse_decode_mem_map(unsigned long coded_mem_map, unsigned long pnum)$/;"	f
sparse_early_nid	sparse.c	/^static inline int sparse_early_nid(struct mem_section *section)$/;"	f	file:
sparse_early_usemaps_alloc_pgdat_section	sparse.c	/^sparse_early_usemaps_alloc_pgdat_section(struct pglist_data *pgdat,$/;"	f	file:
sparse_encode_early_nid	sparse.c	/^static inline unsigned long sparse_encode_early_nid(int nid)$/;"	f	file:
sparse_encode_mem_map	sparse.c	/^static unsigned long sparse_encode_mem_map(struct page *mem_map, unsigned long pnum)$/;"	f	file:
sparse_index_alloc	sparse.c	/^static noinline struct mem_section __ref *sparse_index_alloc(int nid)$/;"	f	file:
sparse_index_init	sparse.c	/^static inline int sparse_index_init(unsigned long section_nr, int nid)$/;"	f	file:
sparse_index_init	sparse.c	/^static int __meminit sparse_index_init(unsigned long section_nr, int nid)$/;"	f	file:
sparse_init	sparse.c	/^void __init sparse_init(void)$/;"	f
sparse_init_nid	sparse.c	/^static void __init sparse_init_nid(int nid, unsigned long pnum_begin,$/;"	f	file:
sparse_init_one_section	sparse.c	/^static void __meminit sparse_init_one_section(struct mem_section *ms,$/;"	f	file:
sparse_memory_present_with_active_regions	page_alloc.c	/^void __init sparse_memory_present_with_active_regions(int nid)$/;"	f
sparse_remove_section	sparse.c	/^void sparse_remove_section(struct mem_section *ms, unsigned long pfn,$/;"	f
special_mapping_close	mmap.c	/^static void special_mapping_close(struct vm_area_struct *vma)$/;"	f	file:
special_mapping_fault	mmap.c	/^static vm_fault_t special_mapping_fault(struct vm_fault *vmf)$/;"	f	file:
special_mapping_mremap	mmap.c	/^static int special_mapping_mremap(struct vm_area_struct *new_vma)$/;"	f	file:
special_mapping_name	mmap.c	/^static const char *special_mapping_name(struct vm_area_struct *vma)$/;"	f	file:
special_mapping_vmops	mmap.c	/^static const struct vm_operations_struct special_mapping_vmops = {$/;"	v	typeref:struct:vm_operations_struct	file:
split_huge_page_to_list	huge_memory.c	/^int split_huge_page_to_list(struct page *page, struct list_head *list)$/;"	f
split_huge_pages_debugfs	huge_memory.c	/^late_initcall(split_huge_pages_debugfs);$/;"	v
split_huge_pages_debugfs	huge_memory.c	/^static int __init split_huge_pages_debugfs(void)$/;"	f	file:
split_huge_pages_set	huge_memory.c	/^static int split_huge_pages_set(void *data, u64 val)$/;"	f	file:
split_huge_pmd_address	huge_memory.c	/^void split_huge_pmd_address(struct vm_area_struct *vma, unsigned long address,$/;"	f
split_map_pages	compaction.c	/^static void split_map_pages(struct list_head *list)$/;"	f	file:
split_page	page_alloc.c	/^EXPORT_SYMBOL_GPL(split_page);$/;"	v
split_page	page_alloc.c	/^void split_page(struct page *page, unsigned int order)$/;"	f
split_swap_cluster	swapfile.c	/^int split_swap_cluster(swp_entry_t entry)$/;"	f
split_vma	mmap.c	/^int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
split_vma	nommu.c	/^int split_vma(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f
spread_dirty_pages	internal.h	/^	bool spread_dirty_pages;$/;"	m	struct:alloc_context
src	memory.c	/^	struct page *src;$/;"	m	struct:copy_subpage_arg	typeref:struct:copy_subpage_arg::page	file:
srcu	mmu_notifier.c	/^DEFINE_STATIC_SRCU(srcu);$/;"	v
stable_node	ksm.c	/^struct stable_node {$/;"	s	file:
stable_node_cache	ksm.c	/^static struct kmem_cache *stable_node_cache;$/;"	v	typeref:struct:kmem_cache	file:
stable_node_chain_add_dup	ksm.c	/^static inline void stable_node_chain_add_dup(struct stable_node *dup,$/;"	f	file:
stable_node_chain_remove_range	ksm.c	/^static bool stable_node_chain_remove_range(struct stable_node *stable_node,$/;"	f	file:
stable_node_chains	ksm.c	/^KSM_ATTR_RO(stable_node_chains);$/;"	v
stable_node_chains_prune_millisecs	ksm.c	/^KSM_ATTR(stable_node_chains_prune_millisecs);$/;"	v
stable_node_chains_prune_millisecs_show	ksm.c	/^stable_node_chains_prune_millisecs_show(struct kobject *kobj,$/;"	f	file:
stable_node_chains_prune_millisecs_store	ksm.c	/^stable_node_chains_prune_millisecs_store(struct kobject *kobj,$/;"	f	file:
stable_node_chains_show	ksm.c	/^static ssize_t stable_node_chains_show(struct kobject *kobj,$/;"	f	file:
stable_node_dup	ksm.c	/^static struct page *stable_node_dup(struct stable_node **_stable_node_dup,$/;"	f	file:
stable_node_dup_any	ksm.c	/^static struct stable_node *stable_node_dup_any(struct stable_node *stable_node,$/;"	f	file:
stable_node_dup_del	ksm.c	/^static inline void stable_node_dup_del(struct stable_node *dup)$/;"	f	file:
stable_node_dup_remove_range	ksm.c	/^static bool stable_node_dup_remove_range(struct stable_node *stable_node,$/;"	f	file:
stable_node_dups	ksm.c	/^KSM_ATTR_RO(stable_node_dups);$/;"	v
stable_node_dups_show	ksm.c	/^static ssize_t stable_node_dups_show(struct kobject *kobj,$/;"	f	file:
stable_pages_required_show	backing-dev.c	/^static ssize_t stable_pages_required_show(struct device *dev,$/;"	f	file:
stable_tree_append	ksm.c	/^static void stable_tree_append(struct rmap_item *rmap_item,$/;"	f	file:
stable_tree_insert	ksm.c	/^static struct stable_node *stable_tree_insert(struct page *kpage)$/;"	f	file:
stable_tree_search	ksm.c	/^static struct page *stable_tree_search(struct page *page)$/;"	f	file:
stack	kasan/kasan.h	/^	depot_stack_handle_t stack;$/;"	m	struct:kasan_track
stack_guard_gap	mmap.c	/^unsigned long stack_guard_gap = 256UL<<PAGE_SHIFT;$/;"	v
stale	z3fold.c	/^	struct list_head stale;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::list_head	file:
stale_lock	z3fold.c	/^	spinlock_t stale_lock;$/;"	m	struct:z3fold_pool	file:
start	kmemleak.c	/^	unsigned long start;$/;"	m	struct:kmemleak_scan_area	file:
start	shmem.c	/^	pgoff_t start;		\/* start of range currently being fallocated *\/$/;"	m	struct:shmem_falloc	file:
start_cpu_timer	slab.c	/^static void start_cpu_timer(int cpu)$/;"	f	file:
start_isolate_page_range	page_isolation.c	/^int start_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
start_middle	z3fold.c	/^	unsigned short start_middle;$/;"	m	struct:z3fold_header	file:
start_offset	percpu-internal.h	/^	int			start_offset;	\/* the overlap with the previous$/;"	m	struct:pcpu_chunk
start_report	kasan/report.c	/^static void start_report(unsigned long *flags)$/;"	f	file:
start_scan_thread	kmemleak.c	/^static void start_scan_thread(void)$/;"	f	file:
start_shepherd_timer	vmstat.c	/^static void __init start_shepherd_timer(void)$/;"	f	file:
start_stop_khugepaged	khugepaged.c	/^int start_stop_khugepaged(void)$/;"	f
stat	slub.c	/^static inline void stat(const struct kmem_cache *s, enum stat_item si)$/;"	f	file:
stat_dentry	zsmalloc.c	/^	struct dentry *stat_dentry;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::dentry	file:
stats	zsmalloc.c	/^	struct zs_pool_stats stats;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::zs_pool_stats	file:
stats	zsmalloc.c	/^	struct zs_size_stat stats;$/;"	m	struct:size_class	typeref:struct:size_class::zs_size_stat	file:
steal_suitable_fallback	page_alloc.c	/^static void steal_suitable_fallback(struct zone *zone, struct page *page,$/;"	f	file:
stop_scan_thread	kmemleak.c	/^static void stop_scan_thread(void)$/;"	f	file:
store	slub.c	/^	ssize_t (*store)(struct kmem_cache *s, const char *x, size_t count);$/;"	m	struct:slab_attribute	file:
store_status	migrate.c	/^static int store_status(int __user *status, int start, int value, int nr)$/;"	f	file:
store_user	slub.c	/^SLAB_ATTR(store_user);$/;"	v
store_user_show	slub.c	/^static ssize_t store_user_show(struct kmem_cache *s, char *buf)$/;"	f	file:
store_user_store	slub.c	/^static ssize_t store_user_store(struct kmem_cache *s,$/;"	f	file:
strncpy_from_unsafe	maccess.c	/^long strncpy_from_unsafe(char *dst, const void *unsafe_addr, long count)$/;"	f
strncpy_from_unsafe_user	maccess.c	/^long strncpy_from_unsafe_user(char *dst, const void __user *unsafe_addr,$/;"	f
strndup_user	util.c	/^EXPORT_SYMBOL(strndup_user);$/;"	v
strndup_user	util.c	/^char *strndup_user(const char __user *s, long n)$/;"	f
strnlen_unsafe_user	maccess.c	/^long strnlen_unsafe_user(const void __user *unsafe_addr, long count)$/;"	f
subpool_inode	hugetlb.c	/^static inline struct hugepage_subpool *subpool_inode(struct inode *inode)$/;"	f	file:
subpool_vma	hugetlb.c	/^static inline struct hugepage_subpool *subpool_vma(struct vm_area_struct *vma)$/;"	f	file:
subsection_map_init	sparse.c	/^void __init subsection_map_init(unsigned long pfn, unsigned long nr_pages)$/;"	f
subsection_mask_set	sparse.c	/^static void subsection_mask_set(unsigned long *map, unsigned long pfn,$/;"	f	file:
suitable_migration_source	compaction.c	/^static bool suitable_migration_source(struct compact_control *cc,$/;"	f	file:
suitable_migration_target	compaction.c	/^static bool suitable_migration_target(struct compact_control *cc,$/;"	f	file:
sum_time	slub.c	/^	long long sum_time;$/;"	m	struct:location	file:
sum_vm_events	vmstat.c	/^static void sum_vm_events(unsigned long *ret)$/;"	f	file:
sum_zone_node_page_state	vmstat.c	/^unsigned long sum_zone_node_page_state(int node,$/;"	f
sum_zone_numa_state	vmstat.c	/^unsigned long sum_zone_numa_state(int node,$/;"	f
surplus_hugepages	hugetlb.c	/^HSTATE_ATTR_RO(surplus_hugepages);$/;"	v
surplus_hugepages_show	hugetlb.c	/^static ssize_t surplus_hugepages_show(struct kobject *kobj,$/;"	f	file:
swap_active_head	swapfile.c	/^PLIST_HEAD(swap_active_head);$/;"	v
swap_alloc_cluster	swapfile.c	/^static int swap_alloc_cluster(struct swap_info_struct *si, swp_entry_t *slot)$/;"	f	file:
swap_aops	swap_state.c	/^static const struct address_space_operations swap_aops = {$/;"	v	typeref:struct:address_space_operations	file:
swap_attr_group	swap_state.c	/^static struct attribute_group swap_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
swap_attrs	swap_state.c	/^static struct attribute *swap_attrs[] = {$/;"	v	typeref:struct:attribute	file:
swap_avail_heads	swapfile.c	/^static struct plist_head *swap_avail_heads;$/;"	v	typeref:struct:plist_head	file:
swap_cache_info	swap_state.c	/^} swap_cache_info;$/;"	v	typeref:struct:__anon23	file:
swap_cgroup	swap_cgroup.c	/^struct swap_cgroup {$/;"	s	file:
swap_cgroup_cmpxchg	swap_cgroup.c	/^unsigned short swap_cgroup_cmpxchg(swp_entry_t ent,$/;"	f
swap_cgroup_ctrl	swap_cgroup.c	/^static struct swap_cgroup_ctrl swap_cgroup_ctrl[MAX_SWAPFILES];$/;"	v	typeref:struct:swap_cgroup_ctrl	file:
swap_cgroup_ctrl	swap_cgroup.c	/^struct swap_cgroup_ctrl {$/;"	s	file:
swap_cgroup_prepare	swap_cgroup.c	/^static int swap_cgroup_prepare(int type)$/;"	f	file:
swap_cgroup_record	swap_cgroup.c	/^unsigned short swap_cgroup_record(swp_entry_t ent, unsigned short id,$/;"	f
swap_cgroup_swapoff	swap_cgroup.c	/^void swap_cgroup_swapoff(int type)$/;"	f
swap_cgroup_swapon	swap_cgroup.c	/^int swap_cgroup_swapon(int type, unsigned long max_pages)$/;"	f
swap_cluster_readahead	swap_state.c	/^struct page *swap_cluster_readahead(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
swap_cluster_schedule_discard	swapfile.c	/^static void swap_cluster_schedule_discard(struct swap_info_struct *si,$/;"	f	file:
swap_count	swapfile.c	/^static inline unsigned char swap_count(unsigned char ent)$/;"	f	file:
swap_count_continued	swapfile.c	/^static bool swap_count_continued(struct swap_info_struct *si,$/;"	f	file:
swap_current_read	memcontrol.c	/^static u64 swap_current_read(struct cgroup_subsys_state *css,$/;"	f	file:
swap_discard_work	swapfile.c	/^static void swap_discard_work(struct work_struct *work)$/;"	f	file:
swap_discardable	swapfile.c	/^static bool swap_discardable(struct swap_info_struct *si)$/;"	f	file:
swap_do_scheduled_discard	swapfile.c	/^static void swap_do_scheduled_discard(struct swap_info_struct *si)$/;"	f	file:
swap_duplicate	swapfile.c	/^int swap_duplicate(swp_entry_t entry)$/;"	f
swap_entry_free	swapfile.c	/^static void swap_entry_free(struct swap_info_struct *p, swp_entry_t entry)$/;"	f	file:
swap_entry_size	swapfile.c	256;"	d	file:
swap_entry_size	swapfile.c	264;"	d	file:
swap_events_show	memcontrol.c	/^static int swap_events_show(struct seq_file *m, void *v)$/;"	f	file:
swap_files	memcontrol.c	/^static struct cftype swap_files[] = {$/;"	v	typeref:struct:cftype	file:
swap_free	swapfile.c	/^void swap_free(swp_entry_t entry)$/;"	f
swap_free_cluster	swapfile.c	/^static void swap_free_cluster(struct swap_info_struct *si, unsigned long idx)$/;"	f	file:
swap_free_obj	slab.c	/^static void swap_free_obj(struct page *page, unsigned int a, unsigned int b)$/;"	f	file:
swap_info	swapfile.c	/^struct swap_info_struct *swap_info[MAX_SWAPFILES];$/;"	v	typeref:struct:swap_info_struct
swap_info_get	swapfile.c	/^static struct swap_info_struct *swap_info_get(swp_entry_t entry)$/;"	f	file:
swap_info_get_cont	swapfile.c	/^static struct swap_info_struct *swap_info_get_cont(swp_entry_t entry,$/;"	f	file:
swap_init_sysfs	swap_state.c	/^static int __init swap_init_sysfs(void)$/;"	f	file:
swap_init_sysfs	swap_state.c	/^subsys_initcall(swap_init_sysfs);$/;"	v
swap_lock	swapfile.c	/^DEFINE_SPINLOCK(swap_lock);$/;"	v
swap_max_show	memcontrol.c	/^static int swap_max_show(struct seq_file *m, void *v)$/;"	f	file:
swap_max_write	memcontrol.c	/^static ssize_t swap_max_write(struct kernfs_open_file *of,$/;"	f	file:
swap_next	swapfile.c	/^static void *swap_next(struct seq_file *swap, void *v, loff_t *pos)$/;"	f	file:
swap_node	swapfile.c	/^static int swap_node(struct swap_info_struct *p)$/;"	f	file:
swap_page_sector	page_io.c	/^static sector_t swap_page_sector(struct page *page)$/;"	f	file:
swap_page_trans_huge_swapped	swapfile.c	/^static bool swap_page_trans_huge_swapped(struct swap_info_struct *si,$/;"	f	file:
swap_ra_clamp_pfn	swap_state.c	/^static inline void swap_ra_clamp_pfn(struct vm_area_struct *vma,$/;"	f	file:
swap_ra_info	swap_state.c	/^static void swap_ra_info(struct vm_fault *vmf,$/;"	f	file:
swap_range_alloc	swapfile.c	/^static void swap_range_alloc(struct swap_info_struct *si, unsigned long offset,$/;"	f	file:
swap_range_free	swapfile.c	/^static void swap_range_free(struct swap_info_struct *si, unsigned long offset,$/;"	f	file:
swap_readpage	page_io.c	/^int swap_readpage(struct page *page, bool synchronous)$/;"	f
swap_set_page_dirty	page_io.c	/^int swap_set_page_dirty(struct page *page)$/;"	f
swap_setup	swap.c	/^void __init swap_setup(void)$/;"	f
swap_shmem_alloc	swapfile.c	/^void swap_shmem_alloc(swp_entry_t entry)$/;"	f
swap_show	swapfile.c	/^static int swap_show(struct seq_file *swap, void *v)$/;"	f	file:
swap_slot_cache_active	swap_slots.c	/^static bool	swap_slot_cache_active;$/;"	v	file:
swap_slot_cache_enabled	swap_slots.c	/^bool	swap_slot_cache_enabled;$/;"	v
swap_slot_cache_initialized	swap_slots.c	/^static bool	swap_slot_cache_initialized;$/;"	v	file:
swap_slot_free_notify	page_io.c	/^static void swap_slot_free_notify(struct page *page)$/;"	f	file:
swap_start	swapfile.c	/^static void *swap_start(struct seq_file *swap, loff_t *pos)$/;"	f	file:
swap_stop	swapfile.c	/^static void swap_stop(struct seq_file *swap, void *v)$/;"	f	file:
swap_swapcount	swapfile.c	/^static int swap_swapcount(struct swap_info_struct *si, swp_entry_t entry)$/;"	f	file:
swap_type_of	swapfile.c	/^int swap_type_of(dev_t device, sector_t offset, struct block_device **bdev_p)$/;"	f
swap_type_to_swap_info	swapfile.c	/^static struct swap_info_struct *swap_type_to_swap_info(int type)$/;"	f	file:
swap_use_vma_readahead	swap_state.c	/^static inline bool swap_use_vma_readahead(void)$/;"	f	file:
swap_vma_readahead	swap_state.c	/^static struct page *swap_vma_readahead(swp_entry_t fentry, gfp_t gfp_mask,$/;"	f	file:
swap_writepage	page_io.c	/^int swap_writepage(struct page *page, struct writeback_control *wbc)$/;"	f
swapcache_free_entries	swapfile.c	/^void swapcache_free_entries(swp_entry_t *entries, int n)$/;"	f
swapcache_prepare	swapfile.c	/^int swapcache_prepare(swp_entry_t entry)$/;"	f
swapdev_block	swapfile.c	/^sector_t swapdev_block(int type, pgoff_t offset)$/;"	f
swapfile_init	swapfile.c	/^static int __init swapfile_init(void)$/;"	f	file:
swapfile_init	swapfile.c	/^subsys_initcall(swapfile_init);$/;"	v
swapin_nr_pages	swap_state.c	/^static unsigned long swapin_nr_pages(unsigned long offset)$/;"	f	file:
swapin_readahead	swap_state.c	/^struct page *swapin_readahead(swp_entry_t entry, gfp_t gfp_mask,$/;"	f
swapin_readahead_hits	swap_state.c	/^static atomic_t swapin_readahead_hits = ATOMIC_INIT(4);$/;"	v	file:
swapin_walk_ops	madvise.c	/^static const struct mm_walk_ops swapin_walk_ops = {$/;"	v	typeref:struct:mm_walk_ops	file:
swapin_walk_pmd_entry	madvise.c	/^static int swapin_walk_pmd_entry(pmd_t *pmd, unsigned long start,$/;"	f	file:
swaps_op	swapfile.c	/^static const struct seq_operations swaps_op = {$/;"	v	typeref:struct:seq_operations	file:
swaps_open	swapfile.c	/^static int swaps_open(struct inode *inode, struct file *file)$/;"	f	file:
swaps_poll	swapfile.c	/^static __poll_t swaps_poll(struct file *file, poll_table *wait)$/;"	f	file:
swp_entry_cmp	swapfile.c	/^static int swp_entry_cmp(const void *ent1, const void *ent2)$/;"	f	file:
swp_swap_info	swapfile.c	/^struct swap_info_struct *swp_swap_info(swp_entry_t entry)$/;"	f
swp_swapcount	swapfile.c	/^int swp_swapcount(swp_entry_t entry)$/;"	f
swpentry	zswap.c	/^	swp_entry_t swpentry;$/;"	m	struct:zswap_header	file:
sync_mm_rss	memory.c	/^void sync_mm_rss(struct mm_struct *mm)$/;"	f
synchronous_wake_function	shmem.c	/^static int synchronous_wake_function(wait_queue_entry_t *wait, unsigned mode, int sync, void *key)$/;"	f	file:
sysctl_compact_memory	compaction.c	/^int sysctl_compact_memory;$/;"	v
sysctl_compaction_handler	compaction.c	/^int sysctl_compaction_handler(struct ctl_table *table, int write,$/;"	f
sysctl_extfrag_threshold	compaction.c	/^int sysctl_extfrag_threshold = 500;$/;"	v
sysctl_lowmem_reserve_ratio	page_alloc.c	/^int sysctl_lowmem_reserve_ratio[MAX_NR_ZONES] = {$/;"	v
sysctl_min_slab_ratio	vmscan.c	/^int sysctl_min_slab_ratio = 5;$/;"	v
sysctl_min_slab_ratio_sysctl_handler	page_alloc.c	/^int sysctl_min_slab_ratio_sysctl_handler(struct ctl_table *table, int write,$/;"	f
sysctl_min_unmapped_ratio	vmscan.c	/^int sysctl_min_unmapped_ratio = 1;$/;"	v
sysctl_min_unmapped_ratio_sysctl_handler	page_alloc.c	/^int sysctl_min_unmapped_ratio_sysctl_handler(struct ctl_table *table, int write,$/;"	f
sysctl_nr_trim_pages	nommu.c	/^int sysctl_nr_trim_pages = CONFIG_NOMMU_INITIAL_TRIM_EXCESS;$/;"	v
sysctl_oom_dump_tasks	oom_kill.c	/^int sysctl_oom_dump_tasks = 1;$/;"	v
sysctl_oom_kill_allocating_task	oom_kill.c	/^int sysctl_oom_kill_allocating_task;$/;"	v
sysctl_panic_on_oom	oom_kill.c	/^int sysctl_panic_on_oom;$/;"	v
sysctl_vm_numa_stat	vmstat.c	/^int sysctl_vm_numa_stat = ENABLE_NUMA_STAT;$/;"	v
sysctl_vm_numa_stat_handler	vmstat.c	/^int sysctl_vm_numa_stat_handler(struct ctl_table *table, int write,$/;"	f
sysfs_compact_node	compaction.c	/^static ssize_t sysfs_compact_node(struct device *dev,$/;"	f	file:
sysfs_slab_add	slub.c	/^static inline int sysfs_slab_add(struct kmem_cache *s) { return 0; }$/;"	f	file:
sysfs_slab_add	slub.c	/^static int sysfs_slab_add(struct kmem_cache *s)$/;"	f	file:
sysfs_slab_alias	slub.c	/^static inline int sysfs_slab_alias(struct kmem_cache *s, const char *p)$/;"	f	file:
sysfs_slab_alias	slub.c	/^static int sysfs_slab_alias(struct kmem_cache *s, const char *name)$/;"	f	file:
sysfs_slab_release	slub.c	/^void sysfs_slab_release(struct kmem_cache *s)$/;"	f
sysfs_slab_remove	slub.c	/^static inline void sysfs_slab_remove(struct kmem_cache *s) { }$/;"	f	file:
sysfs_slab_remove	slub.c	/^static void sysfs_slab_remove(struct kmem_cache *s)$/;"	f	file:
sysfs_slab_remove_workfn	slub.c	/^static void sysfs_slab_remove_workfn(struct work_struct *work)$/;"	f	file:
sysfs_slab_unlink	slub.c	/^void sysfs_slab_unlink(struct kmem_cache *s)$/;"	f
tag_pages_for_writeback	page-writeback.c	/^EXPORT_SYMBOL(tag_pages_for_writeback);$/;"	v
tag_pages_for_writeback	page-writeback.c	/^void tag_pages_for_writeback(struct address_space *mapping,$/;"	f
tail	kasan/quarantine.c	/^	struct qlist_node *tail;$/;"	m	struct:qlist_head	typeref:struct:qlist_head::qlist_node	file:
tail	slub.c	/^	void *tail;$/;"	m	struct:detached_freelist	file:
take_rmap_locks	mremap.c	/^static void take_rmap_locks(struct vm_area_struct *vma)$/;"	f	file:
taken	vmscan.c	/^		unsigned int taken;$/;"	m	struct:scan_control::__anon2	file:
target_mem_cgroup	vmscan.c	/^	struct mem_cgroup *target_mem_cgroup;$/;"	m	struct:scan_control	typeref:struct:scan_control::mem_cgroup	file:
task_capc	page_alloc.c	/^static inline struct capture_control *task_capc(struct zone *zone)$/;"	f	file:
task_early_kill	memory-failure.c	/^static struct task_struct *task_early_kill(struct task_struct *tsk,$/;"	f	file:
task_will_free_mem	oom_kill.c	/^static bool task_will_free_mem(struct task_struct *task)$/;"	f	file:
test_and_set_skip	compaction.c	/^static bool test_and_set_skip(struct compact_control *cc, struct page *page,$/;"	f	file:
test_clear_page_writeback	page-writeback.c	/^int test_clear_page_writeback(struct page *page)$/;"	f
test_mem_cgroup_node_reclaimable	memcontrol.c	/^static bool test_mem_cgroup_node_reclaimable(struct mem_cgroup *memcg,$/;"	f	file:
test_node	kmemleak-test.c	/^struct test_node {$/;"	s	file:
test_pages_in_a_zone	memory_hotplug.c	/^int test_pages_in_a_zone(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
test_pages_isolated	page_isolation.c	/^int test_pages_isolated(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
testpin_tag	zsmalloc.c	/^static inline int testpin_tag(unsigned long handle)$/;"	f	file:
tfm	zswap.c	/^	struct crypto_comp * __percpu *tfm;$/;"	m	struct:zswap_pool	typeref:struct:zswap_pool::__percpu	file:
tfm_name	zswap.c	/^	char tfm_name[CRYPTO_MAX_ALG_NAME];$/;"	m	struct:zswap_pool	file:
thp_get_unmapped_area	huge_memory.c	/^EXPORT_SYMBOL_GPL(thp_get_unmapped_area);$/;"	v
thp_get_unmapped_area	huge_memory.c	/^unsigned long thp_get_unmapped_area(struct file *filp, unsigned long addr,$/;"	f
thresh	page-writeback.c	/^	unsigned long		thresh;		\/* dirty threshold *\/$/;"	m	struct:dirty_throttle_control	file:
throttle_direct_reclaim	vmscan.c	/^static bool throttle_direct_reclaim(gfp_t gfp_mask, struct zonelist *zonelist,$/;"	f	file:
tid_to_cpu	slub.c	/^static inline unsigned int tid_to_cpu(unsigned long tid)$/;"	f	file:
tid_to_event	slub.c	/^static inline unsigned long tid_to_event(unsigned long tid)$/;"	f	file:
tlb	madvise.c	/^	struct mmu_gather *tlb;$/;"	m	struct:madvise_walk_private	typeref:struct:madvise_walk_private::mmu_gather	file:
tlb_batch_list_free	mmu_gather.c	/^static void tlb_batch_list_free(struct mmu_gather *tlb)$/;"	f	file:
tlb_batch_pages_flush	mmu_gather.c	/^static void tlb_batch_pages_flush(struct mmu_gather *tlb)$/;"	f	file:
tlb_finish_mmu	mmu_gather.c	/^void tlb_finish_mmu(struct mmu_gather *tlb,$/;"	f
tlb_flush_mmu	mmu_gather.c	/^void tlb_flush_mmu(struct mmu_gather *tlb)$/;"	f
tlb_flush_mmu_free	mmu_gather.c	/^static void tlb_flush_mmu_free(struct mmu_gather *tlb)$/;"	f	file:
tlb_gather_mmu	mmu_gather.c	/^void tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,$/;"	f
tlb_next_batch	mmu_gather.c	/^static bool tlb_next_batch(struct mmu_gather *tlb)$/;"	f	file:
tlb_remove_table	mmu_gather.c	/^void tlb_remove_table(struct mmu_gather *tlb, void *table)$/;"	f
tlb_remove_table_one	mmu_gather.c	/^static void tlb_remove_table_one(void *table)$/;"	f	file:
tlb_remove_table_rcu	mmu_gather.c	/^static void tlb_remove_table_rcu(struct rcu_head *head)$/;"	f	file:
tlb_remove_table_smp_sync	mmu_gather.c	/^static void tlb_remove_table_smp_sync(void *arg)$/;"	f	file:
tlb_table_flush	mmu_gather.c	/^static void tlb_table_flush(struct mmu_gather *tlb)$/;"	f	file:
tlb_table_invalidate	mmu_gather.c	/^static inline void tlb_table_invalidate(struct mmu_gather *tlb)$/;"	f	file:
to	hugetlb.c	/^	long to;$/;"	m	struct:file_region	file:
to	memcontrol.c	/^	struct mem_cgroup *to;$/;"	m	struct:move_charge_struct	typeref:struct:move_charge_struct::mem_cgroup	file:
to_kill	memory-failure.c	/^struct to_kill {$/;"	s	file:
to_slab	slub.c	4954;"	d	file:
to_slab_attr	slub.c	4953;"	d	file:
tokenize_frame_descr	kasan/report.c	/^static bool __must_check tokenize_frame_descr(const char **frame_descr,$/;"	f	file:
too_many_isolated	compaction.c	/^static bool too_many_isolated(pg_data_t *pgdat)$/;"	f	file:
too_many_isolated	vmscan.c	/^static int too_many_isolated(struct pglist_data *pgdat, int file,$/;"	f	file:
total_free_scanned	internal.h	/^	unsigned long total_free_scanned;$/;"	m	struct:compact_control
total_mapcount	huge_memory.c	/^int total_mapcount(struct page *page)$/;"	f
total_migrate_scanned	internal.h	/^	unsigned long total_migrate_scanned;$/;"	m	struct:compact_control
total_objects	slab.h	/^	atomic_long_t total_objects;$/;"	m	struct:kmem_cache_node
total_objects	slub.c	/^SLAB_ATTR_RO(total_objects);$/;"	v
total_objects_show	slub.c	/^static ssize_t total_objects_show(struct kmem_cache *s, char *buf)$/;"	f	file:
total_slabs	slab.h	/^	unsigned long total_slabs;	\/* length of all slab lists *\/$/;"	m	struct:kmem_cache_node
total_swap_pages	swapfile.c	/^long total_swap_pages;$/;"	v
total_swapcache_pages	swap_state.c	/^unsigned long total_swapcache_pages(void)$/;"	f
total_usage	page_ext.c	/^static unsigned long total_usage;$/;"	v	file:
touch_pmd	huge_memory.c	/^static void touch_pmd(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
touch_pud	huge_memory.c	/^static void touch_pud(struct vm_area_struct *vma, unsigned long addr,$/;"	f	file:
touched	slab.c	/^	unsigned int touched;$/;"	m	struct:array_cache	file:
trace	kmemleak.c	/^	unsigned long trace[MAX_TRACE];$/;"	m	struct:kmemleak_object	file:
trace	slub.c	/^SLAB_ATTR(trace);$/;"	v
trace	slub.c	/^static void trace(struct kmem_cache *s, struct page *page, void *object,$/;"	f	file:
trace_len	kmemleak.c	/^	unsigned int trace_len;$/;"	m	struct:kmemleak_object	file:
trace_show	slub.c	/^static ssize_t trace_show(struct kmem_cache *s, char *buf)$/;"	f	file:
trace_store	slub.c	/^static ssize_t trace_store(struct kmem_cache *s, const char *buf,$/;"	f	file:
track	slub.c	/^struct track {$/;"	s	file:
track_item	slub.c	/^enum track_item { TRACK_ALLOC, TRACK_FREE };$/;"	g	file:
transfer_objects	slab.c	/^static int transfer_objects(struct array_cache *to,$/;"	f	file:
transparent_hugepage_enabled	huge_memory.c	/^bool transparent_hugepage_enabled(struct vm_area_struct *vma)$/;"	f
truncate_cleanup_page	truncate.c	/^truncate_cleanup_page(struct address_space *mapping, struct page *page)$/;"	f	file:
truncate_error_page	memory-failure.c	/^static int truncate_error_page(struct page *p, unsigned long pfn,$/;"	f	file:
truncate_exceptional_pvec_entries	truncate.c	/^static void truncate_exceptional_pvec_entries(struct address_space *mapping,$/;"	f	file:
truncate_inode_page	truncate.c	/^int truncate_inode_page(struct address_space *mapping, struct page *page)$/;"	f
truncate_inode_pages	truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages);$/;"	v
truncate_inode_pages	truncate.c	/^void truncate_inode_pages(struct address_space *mapping, loff_t lstart)$/;"	f
truncate_inode_pages_final	truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages_final);$/;"	v
truncate_inode_pages_final	truncate.c	/^void truncate_inode_pages_final(struct address_space *mapping)$/;"	f
truncate_inode_pages_range	truncate.c	/^EXPORT_SYMBOL(truncate_inode_pages_range);$/;"	v
truncate_inode_pages_range	truncate.c	/^void truncate_inode_pages_range(struct address_space *mapping,$/;"	f
truncate_pagecache	truncate.c	/^EXPORT_SYMBOL(truncate_pagecache);$/;"	v
truncate_pagecache	truncate.c	/^void truncate_pagecache(struct inode *inode, loff_t newsize)$/;"	f
truncate_pagecache_range	truncate.c	/^EXPORT_SYMBOL(truncate_pagecache_range);$/;"	v
truncate_pagecache_range	truncate.c	/^void truncate_pagecache_range(struct inode *inode, loff_t lstart, loff_t lend)$/;"	f
truncate_setsize	truncate.c	/^EXPORT_SYMBOL(truncate_setsize);$/;"	v
truncate_setsize	truncate.c	/^void truncate_setsize(struct inode *inode, loff_t newsize)$/;"	f
try_charge	memcontrol.c	/^static int try_charge(struct mem_cgroup *memcg, gfp_t gfp_mask,$/;"	f	file:
try_context_readahead	readahead.c	/^static int try_context_readahead(struct address_space *mapping,$/;"	f	file:
try_get_compound_head	gup.c	/^static inline struct page *try_get_compound_head(struct page *page, int refs)$/;"	f	file:
try_offline_node	memory_hotplug.c	/^EXPORT_SYMBOL(try_offline_node);$/;"	v
try_offline_node	memory_hotplug.c	/^void try_offline_node(int nid)$/;"	f
try_online_node	memory_hotplug.c	/^int try_online_node(int nid)$/;"	f
try_purge_vmap_area_lazy	vmalloc.c	/^static void try_purge_vmap_area_lazy(void)$/;"	f	file:
try_remove_memory	memory_hotplug.c	/^static int __ref try_remove_memory(int nid, u64 start, u64 size)$/;"	f	file:
try_to_compact_pages	compaction.c	/^enum compact_result try_to_compact_pages(gfp_t gfp_mask, unsigned int order,$/;"	f
try_to_free_low	hugetlb.c	/^static inline void try_to_free_low(struct hstate *h, unsigned long count,$/;"	f	file:
try_to_free_low	hugetlb.c	/^static void try_to_free_low(struct hstate *h, unsigned long count,$/;"	f	file:
try_to_free_mem_cgroup_pages	vmscan.c	/^unsigned long try_to_free_mem_cgroup_pages(struct mem_cgroup *memcg,$/;"	f
try_to_free_pages	vmscan.c	/^unsigned long try_to_free_pages(struct zonelist *zonelist, int order,$/;"	f
try_to_free_swap	swapfile.c	/^int try_to_free_swap(struct page *page)$/;"	f
try_to_merge_one_page	ksm.c	/^static int try_to_merge_one_page(struct vm_area_struct *vma,$/;"	f	file:
try_to_merge_two_pages	ksm.c	/^static struct page *try_to_merge_two_pages(struct rmap_item *rmap_item,$/;"	f	file:
try_to_merge_with_ksm_page	ksm.c	/^static int try_to_merge_with_ksm_page(struct rmap_item *rmap_item,$/;"	f	file:
try_to_munlock	rmap.c	/^void try_to_munlock(struct page *page)$/;"	f
try_to_release_page	filemap.c	/^EXPORT_SYMBOL(try_to_release_page);$/;"	v
try_to_release_page	filemap.c	/^int try_to_release_page(struct page *page, gfp_t gfp_mask)$/;"	f
try_to_unmap	rmap.c	/^bool try_to_unmap(struct page *page, enum ttu_flags flags)$/;"	f
try_to_unmap_flush	internal.h	/^static inline void try_to_unmap_flush(void)$/;"	f
try_to_unmap_flush	rmap.c	/^void try_to_unmap_flush(void)$/;"	f
try_to_unmap_flush_dirty	internal.h	/^static inline void try_to_unmap_flush_dirty(void)$/;"	f
try_to_unmap_flush_dirty	rmap.c	/^void try_to_unmap_flush_dirty(void)$/;"	f
try_to_unmap_one	rmap.c	/^static bool try_to_unmap_one(struct page *page, struct vm_area_struct *vma,$/;"	f	file:
try_to_unuse	swapfile.c	/^int try_to_unuse(unsigned int type, bool frontswap,$/;"	f
trylock_zspage	zsmalloc.c	/^static int trylock_zspage(struct zspage *zspage)$/;"	f	file:
trypin_tag	zsmalloc.c	/^static inline int trypin_tag(unsigned long handle)$/;"	f	file:
tsk	memory-failure.c	/^	struct task_struct *tsk;$/;"	m	struct:to_kill	typeref:struct:to_kill::task_struct	file:
type	memory-failure.c	/^	enum mf_action_page_type type;$/;"	m	struct:page_state	typeref:enum:page_state::mf_action_page_type	file:
uevent_filter	slub.c	/^static int uevent_filter(struct kset *kset, struct kobject *kobj)$/;"	f	file:
uid	shmem.c	/^	kuid_t uid;$/;"	m	struct:shmem_options	file:
unaccount_page_cache_page	filemap.c	/^static void unaccount_page_cache_page(struct address_space *mapping,$/;"	f	file:
unbuddied	z3fold.c	/^	struct list_head *unbuddied;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::list_head	file:
unbuddied	zbud.c	/^	struct list_head unbuddied[NCHUNKS];$/;"	m	struct:zbud_pool	typeref:struct:zbud_pool::list_head	file:
uncharge_batch	memcontrol.c	/^static void uncharge_batch(const struct uncharge_gather *ug)$/;"	f	file:
uncharge_gather	memcontrol.c	/^struct uncharge_gather {$/;"	s	file:
uncharge_gather_clear	memcontrol.c	/^static inline void uncharge_gather_clear(struct uncharge_gather *ug)$/;"	f	file:
uncharge_list	memcontrol.c	/^static void uncharge_list(struct list_head *page_list)$/;"	f	file:
uncharge_page	memcontrol.c	/^static void uncharge_page(struct page *page, struct uncharge_gather *ug)$/;"	f	file:
uncharge_slab_page	slab.h	/^static __always_inline void uncharge_slab_page(struct page *page, int order,$/;"	f
under_reclaim	zbud.c	/^	bool under_reclaim;$/;"	m	struct:zbud_header	file:
undo_dev_pagemap	gup.c	/^static void __maybe_unused undo_dev_pagemap(int *nr, int nr_start,$/;"	f	file:
undo_isolate_page_range	page_isolation.c	/^void undo_isolate_page_range(unsigned long start_pfn, unsigned long end_pfn,$/;"	f
unevict	memory-failure.c	827;"	d	file:
unevict	memory-failure.c	876;"	d	file:
unfreeze_partials	slub.c	/^static void unfreeze_partials(struct kmem_cache *s,$/;"	f	file:
units	slob.c	/^	slobidx_t units;$/;"	m	struct:slob_block	file:
unlink_anon_vmas	rmap.c	/^void unlink_anon_vmas(struct vm_area_struct *vma)$/;"	f
unlink_file_vma	mmap.c	/^void unlink_file_vma(struct vm_area_struct *vma)$/;"	f
unlink_va	vmalloc.c	/^unlink_va(struct vmap_area *va, struct rb_root *root)$/;"	f	file:
unlock_anon_vma_root	rmap.c	/^static inline void unlock_anon_vma_root(struct anon_vma *root)$/;"	f	file:
unlock_cluster	swapfile.c	/^static inline void unlock_cluster(struct swap_cluster_info *ci)$/;"	f	file:
unlock_cluster_or_swap_info	swapfile.c	/^static inline void unlock_cluster_or_swap_info(struct swap_info_struct *si,$/;"	f	file:
unlock_kmap	highmem.c	138;"	d	file:
unlock_kmap	highmem.c	143;"	d	file:
unlock_kmap_any	highmem.c	140;"	d	file:
unlock_kmap_any	highmem.c	146;"	d	file:
unlock_or_release_subpool	hugetlb.c	/^static inline void unlock_or_release_subpool(struct hugepage_subpool *spool)$/;"	f	file:
unlock_page	filemap.c	/^EXPORT_SYMBOL(unlock_page);$/;"	v
unlock_page	filemap.c	/^void unlock_page(struct page *page)$/;"	f
unlock_page_lru	memcontrol.c	/^static void unlock_page_lru(struct page *page, int isolated)$/;"	f	file:
unlock_page_memcg	memcontrol.c	/^EXPORT_SYMBOL(unlock_page_memcg);$/;"	v
unlock_page_memcg	memcontrol.c	/^void unlock_page_memcg(struct page *page)$/;"	f
unmap_and_move	migrate.c	/^static ICE_noinline int unmap_and_move(new_page_t get_new_page,$/;"	f	file:
unmap_and_move_huge_page	migrate.c	/^static int unmap_and_move_huge_page(new_page_t get_new_page,$/;"	f	file:
unmap_hugepage_range	hugetlb.c	/^void unmap_hugepage_range(struct vm_area_struct *vma, unsigned long start,$/;"	f
unmap_kernel_range	vmalloc.c	/^EXPORT_SYMBOL_GPL(unmap_kernel_range);$/;"	v
unmap_kernel_range	vmalloc.c	/^void unmap_kernel_range(unsigned long addr, unsigned long size)$/;"	f
unmap_kernel_range_noflush	vmalloc.c	/^EXPORT_SYMBOL_GPL(unmap_kernel_range_noflush);$/;"	v
unmap_kernel_range_noflush	vmalloc.c	/^void unmap_kernel_range_noflush(unsigned long addr, unsigned long size)$/;"	f
unmap_mapping_pages	memory.c	/^void unmap_mapping_pages(struct address_space *mapping, pgoff_t start,$/;"	f
unmap_mapping_range	memory.c	/^EXPORT_SYMBOL(unmap_mapping_range);$/;"	v
unmap_mapping_range	memory.c	/^void unmap_mapping_range(struct address_space *mapping,$/;"	f
unmap_mapping_range_tree	memory.c	/^static inline void unmap_mapping_range_tree(struct rb_root_cached *root,$/;"	f	file:
unmap_mapping_range_vma	memory.c	/^static void unmap_mapping_range_vma(struct vm_area_struct *vma,$/;"	f	file:
unmap_page	huge_memory.c	/^static void unmap_page(struct page *page)$/;"	f	file:
unmap_page_range	memory.c	/^void unmap_page_range(struct mmu_gather *tlb,$/;"	f
unmap_ref_private	hugetlb.c	/^static void unmap_ref_private(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
unmap_region	mmap.c	/^static void unmap_region(struct mm_struct *mm,$/;"	f	file:
unmap_single_vma	memory.c	/^static void unmap_single_vma(struct mmu_gather *tlb,$/;"	f	file:
unmap_vmap_area	vmalloc.c	/^static void unmap_vmap_area(struct vmap_area *va)$/;"	f	file:
unmap_vmas	memory.c	/^void unmap_vmas(struct mmu_gather *tlb,$/;"	f
unmapped_area	mmap.c	/^unsigned long unmapped_area(struct vm_unmapped_area_info *info)$/;"	f
unmapped_area_topdown	mmap.c	/^unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info)$/;"	f
unmerge_and_remove_all_rmap_items	ksm.c	/^static int unmerge_and_remove_all_rmap_items(void)$/;"	f	file:
unmerge_ksm_pages	ksm.c	/^static int unmerge_ksm_pages(struct vm_area_struct *vma,$/;"	f	file:
unpack_shadow	workingset.c	/^static void unpack_shadow(void *shadow, int *memcgidp, pg_data_t **pgdat,$/;"	f	file:
unpin_tag	zsmalloc.c	/^static void unpin_tag(unsigned long handle)$/;"	f	file:
unpoison_memory	memory-failure.c	/^EXPORT_SYMBOL(unpoison_memory);$/;"	v
unpoison_memory	memory-failure.c	/^int unpoison_memory(unsigned long pfn)$/;"	f
unpoison_page	page_poison.c	/^static void unpoison_page(struct page *page)$/;"	f	file:
unpoison_pages	page_poison.c	/^static void unpoison_pages(struct page *page, int n)$/;"	f	file:
unpoison_pr_info	memory-failure.c	1515;"	d	file:
unqueued_dirty	vmscan.c	/^		unsigned int unqueued_dirty;$/;"	m	struct:scan_control::__anon2	file:
unreferenced_object	kmemleak.c	/^static bool unreferenced_object(struct kmemleak_object *object)$/;"	f	file:
unregister_event	memcontrol.c	/^	void (*unregister_event)(struct mem_cgroup *memcg,$/;"	m	struct:mem_cgroup_event	file:
unregister_memcg_shrinker	vmscan.c	/^static void unregister_memcg_shrinker(struct shrinker *shrinker)$/;"	f	file:
unregister_oom_notifier	oom_kill.c	/^EXPORT_SYMBOL_GPL(unregister_oom_notifier);$/;"	v
unregister_oom_notifier	oom_kill.c	/^int unregister_oom_notifier(struct notifier_block *nb)$/;"	f
unregister_shrinker	vmscan.c	/^EXPORT_SYMBOL(unregister_shrinker);$/;"	v
unregister_shrinker	vmscan.c	/^void unregister_shrinker(struct shrinker *shrinker)$/;"	f
unregister_vmap_purge_notifier	vmalloc.c	/^EXPORT_SYMBOL_GPL(unregister_vmap_purge_notifier);$/;"	v
unregister_vmap_purge_notifier	vmalloc.c	/^int unregister_vmap_purge_notifier(struct notifier_block *nb)$/;"	f
unreserve_highatomic_pageblock	page_alloc.c	/^static bool unreserve_highatomic_pageblock(const struct alloc_context *ac,$/;"	f	file:
unset_migratetype_isolate	page_isolation.c	/^static void unset_migratetype_isolate(struct page *page, unsigned migratetype)$/;"	f	file:
unstable_tree_search_insert	ksm.c	/^struct rmap_item *unstable_tree_search_insert(struct rmap_item *rmap_item,$/;"	f	file:
unusable_file_ops	vmstat.c	/^static const struct file_operations unusable_file_ops = {$/;"	v	typeref:struct:file_operations	file:
unusable_free_index	vmstat.c	/^static int unusable_free_index(unsigned int order,$/;"	f	file:
unusable_op	vmstat.c	/^static const struct seq_operations unusable_op = {$/;"	v	typeref:struct:seq_operations	file:
unusable_open	vmstat.c	/^static int unusable_open(struct inode *inode, struct file *file)$/;"	f	file:
unusable_show	vmstat.c	/^static int unusable_show(struct seq_file *m, void *arg)$/;"	f	file:
unusable_show_print	vmstat.c	/^static void unusable_show_print(struct seq_file *m,$/;"	f	file:
unuse_mm	mmu_context.c	/^EXPORT_SYMBOL_GPL(unuse_mm);$/;"	v
unuse_mm	mmu_context.c	/^void unuse_mm(struct mm_struct *mm)$/;"	f
unuse_mm	swapfile.c	/^static int unuse_mm(struct mm_struct *mm, unsigned int type,$/;"	f	file:
unuse_p4d_range	swapfile.c	/^static inline int unuse_p4d_range(struct vm_area_struct *vma, pgd_t *pgd,$/;"	f	file:
unuse_pmd_range	swapfile.c	/^static inline int unuse_pmd_range(struct vm_area_struct *vma, pud_t *pud,$/;"	f	file:
unuse_pte	swapfile.c	/^static int unuse_pte(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
unuse_pte_range	swapfile.c	/^static int unuse_pte_range(struct vm_area_struct *vma, pmd_t *pmd,$/;"	f	file:
unuse_pud_range	swapfile.c	/^static inline int unuse_pud_range(struct vm_area_struct *vma, p4d_t *p4d,$/;"	f	file:
unuse_vma	swapfile.c	/^static int unuse_vma(struct vm_area_struct *vma, unsigned int type,$/;"	f	file:
update_and_free_page	hugetlb.c	/^static void update_and_free_page(struct hstate *h, struct page *page)$/;"	f	file:
update_cached_migrate	compaction.c	/^static void update_cached_migrate(struct compact_control *cc, unsigned long pfn)$/;"	f	file:
update_checksum	kmemleak.c	/^static bool update_checksum(struct kmemleak_object *object)$/;"	f	file:
update_dirty_limit	page-writeback.c	/^static void update_dirty_limit(struct dirty_throttle_control *dtc)$/;"	f	file:
update_fast_start_pfn	compaction.c	/^update_fast_start_pfn(struct compact_control *cc, unsigned long pfn)$/;"	f	file:
update_lru_sizes	vmscan.c	/^static __always_inline void update_lru_sizes(struct lruvec *lruvec,$/;"	f	file:
update_memcg_params	slab_common.c	/^static int update_memcg_params(struct kmem_cache *s, int new_array_size)$/;"	f	file:
update_page_reclaim_stat	swap.c	/^static void update_page_reclaim_stat(struct lruvec *lruvec,$/;"	f	file:
update_pageblock_skip	compaction.c	/^static inline void update_pageblock_skip(struct compact_control *cc,$/;"	f	file:
update_pageblock_skip	compaction.c	/^static void update_pageblock_skip(struct compact_control *cc,$/;"	f	file:
update_pgdat_span	memory_hotplug.c	/^static void update_pgdat_span(struct pglist_data *pgdat)$/;"	f	file:
update_refs	kmemleak.c	/^static void update_refs(struct kmemleak_object *object)$/;"	f	file:
use_count	kmemleak.c	/^	atomic_t use_count;$/;"	m	struct:kmemleak_object	file:
use_mm	mmu_context.c	/^EXPORT_SYMBOL_GPL(use_mm);$/;"	v
use_mm	mmu_context.c	/^void use_mm(struct mm_struct *mm)$/;"	f
use_swap_slot_cache	swap_slots.c	49;"	d	file:
use_zero_page_attr	huge_memory.c	/^static struct kobj_attribute use_zero_page_attr =$/;"	v	typeref:struct:kobj_attribute	file:
use_zero_page_show	huge_memory.c	/^static ssize_t use_zero_page_show(struct kobject *kobj,$/;"	f	file:
use_zero_page_store	huge_memory.c	/^static ssize_t use_zero_page_store(struct kobject *kobj,$/;"	f	file:
use_zero_pages	ksm.c	/^KSM_ATTR(use_zero_pages);$/;"	v
use_zero_pages_show	ksm.c	/^static ssize_t use_zero_pages_show(struct kobject *kobj,$/;"	f	file:
use_zero_pages_store	ksm.c	/^static ssize_t use_zero_pages_store(struct kobject *kobj,$/;"	f	file:
usemap_size	page_alloc.c	/^static unsigned long __init usemap_size(unsigned long zone_start_pfn, unsigned long zonesize)$/;"	f	file:
usemap_size	sparse.c	/^static unsigned long usemap_size(void)$/;"	f	file:
user_min_free_kbytes	page_alloc.c	/^int user_min_free_kbytes = -1;$/;"	v
user_shm_lock	mlock.c	/^int user_shm_lock(size_t size, struct user_struct *user)$/;"	f
user_shm_unlock	mlock.c	/^void user_shm_unlock(size_t size, struct user_struct *user)$/;"	f
usercopy_abort	usercopy.c	/^void __noreturn usercopy_abort(const char *name, const char *detail,$/;"	f
usercopy_warn	usercopy.c	/^void usercopy_warn(const char *name, const char *detail, bool to_user,$/;"	f
useroffset	slab.h	/^	unsigned int useroffset;\/* Usercopy region offset *\/$/;"	m	struct:kmem_cache
usersize	slab.h	/^	unsigned int usersize;	\/* Usercopy region size *\/$/;"	m	struct:kmem_cache
usersize	slub.c	/^SLAB_ATTR_RO(usersize);$/;"	v
usersize_show	slub.c	/^static ssize_t usersize_show(struct kmem_cache *s, char *buf)$/;"	f	file:
va	vmalloc.c	/^	struct vmap_area *va;$/;"	m	struct:vmap_block	typeref:struct:vmap_block::vmap_area	file:
va_size	vmalloc.c	/^va_size(struct vmap_area *va)$/;"	f	file:
vaddr	dmapool.c	/^	void *vaddr;$/;"	m	struct:dma_page	file:
validate	slub.c	/^SLAB_ATTR(validate);$/;"	v
validate_mm	mmap.c	/^static void validate_mm(struct mm_struct *mm)$/;"	f	file:
validate_mm	mmap.c	428;"	d	file:
validate_mm_rb	mmap.c	/^static void validate_mm_rb(struct rb_root *root, struct vm_area_struct *ignore)$/;"	f	file:
validate_mm_rb	mmap.c	427;"	d	file:
validate_mmap_request	nommu.c	/^static int validate_mmap_request(struct file *file,$/;"	f	file:
validate_nommu_regions	nommu.c	/^static noinline void validate_nommu_regions(void)$/;"	f	file:
validate_nommu_regions	nommu.c	/^static void validate_nommu_regions(void)$/;"	f	file:
validate_show	slub.c	/^static ssize_t validate_show(struct kmem_cache *s, char *buf)$/;"	f	file:
validate_slab	slub.c	/^static int validate_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
validate_slab_cache	slub.c	/^static long validate_slab_cache(struct kmem_cache *s)$/;"	f	file:
validate_slab_node	slub.c	/^static int validate_slab_node(struct kmem_cache *s,$/;"	f	file:
validate_slab_slab	slub.c	/^static void validate_slab_slab(struct kmem_cache *s, struct page *page,$/;"	f	file:
validate_store	slub.c	/^static ssize_t validate_store(struct kmem_cache *s,$/;"	f	file:
value	zswap.c	/^		unsigned long value;$/;"	m	union:zswap_entry::__anon12	file:
vb_alloc	vmalloc.c	/^static void *vb_alloc(unsigned long size, gfp_t gfp_mask)$/;"	f	file:
vb_free	vmalloc.c	/^static void vb_free(const void *addr, unsigned long size)$/;"	f	file:
verify_redzone_free	slab.c	/^static inline void verify_redzone_free(struct kmem_cache *cache, void *obj)$/;"	f	file:
vfree	nommu.c	/^EXPORT_SYMBOL(vfree);$/;"	v
vfree	nommu.c	/^void vfree(const void *addr)$/;"	f
vfree	vmalloc.c	/^EXPORT_SYMBOL(vfree);$/;"	v
vfree	vmalloc.c	/^void vfree(const void *addr)$/;"	f
vfree_atomic	vmalloc.c	/^void vfree_atomic(const void *addr)$/;"	f
vfree_deferred	vmalloc.c	/^struct vfree_deferred {$/;"	s	file:
vfs_fadvise	fadvise.c	/^EXPORT_SYMBOL(vfs_fadvise);$/;"	v
vfs_fadvise	fadvise.c	/^int vfs_fadvise(struct file *file, loff_t offset, loff_t len, int advice)$/;"	f
virt_to_cache	slab.h	/^static inline struct kmem_cache *virt_to_cache(const void *obj)$/;"	f
virtual	highmem.c	/^	void *virtual;$/;"	m	struct:page_address_map	file:
vm	zsmalloc.c	/^	struct vm_struct *vm; \/* vm area for mapping object that span pages *\/$/;"	m	struct:mapping_area	typeref:struct:mapping_area::vm_struct	file:
vm_addr	zsmalloc.c	/^	char *vm_addr; \/* address of kmap_atomic()'ed pages *\/$/;"	m	struct:mapping_area	file:
vm_area_add_early	vmalloc.c	/^void __init vm_area_add_early(struct vm_struct *vm)$/;"	f
vm_area_register_early	vmalloc.c	/^void __init vm_area_register_early(struct vm_struct *vm, size_t align)$/;"	f
vm_brk	mmap.c	/^EXPORT_SYMBOL(vm_brk);$/;"	v
vm_brk	mmap.c	/^int vm_brk(unsigned long addr, unsigned long len)$/;"	f
vm_brk	nommu.c	/^int vm_brk(unsigned long addr, unsigned long len)$/;"	f
vm_brk_flags	mmap.c	/^EXPORT_SYMBOL(vm_brk_flags);$/;"	v
vm_brk_flags	mmap.c	/^int vm_brk_flags(unsigned long addr, unsigned long request, unsigned long flags)$/;"	f
vm_commit_limit	util.c	/^unsigned long vm_commit_limit(void)$/;"	f
vm_committed_as_batch	mm_init.c	/^s32 vm_committed_as_batch = 32;$/;"	v
vm_dirty_bytes	page-writeback.c	/^unsigned long vm_dirty_bytes;$/;"	v
vm_dirty_ratio	page-writeback.c	/^int vm_dirty_ratio = 20;$/;"	v
vm_event_states	vmstat.c	/^EXPORT_PER_CPU_SYMBOL(vm_event_states);$/;"	v
vm_events_fold_cpu	vmstat.c	/^void vm_events_fold_cpu(int cpu)$/;"	f
vm_flags	rmap.c	/^	unsigned long vm_flags;$/;"	m	struct:page_referenced_arg	file:
vm_get_page_prot	mmap.c	/^EXPORT_SYMBOL(vm_get_page_prot);$/;"	v
vm_get_page_prot	mmap.c	/^pgprot_t vm_get_page_prot(unsigned long vm_flags)$/;"	f
vm_highmem_is_dirtyable	page-writeback.c	/^int vm_highmem_is_dirtyable;$/;"	v
vm_insert_page	memory.c	/^EXPORT_SYMBOL(vm_insert_page);$/;"	v
vm_insert_page	memory.c	/^int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_insert_page	nommu.c	/^EXPORT_SYMBOL(vm_insert_page);$/;"	v
vm_insert_page	nommu.c	/^int vm_insert_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_iomap_memory	memory.c	/^EXPORT_SYMBOL(vm_iomap_memory);$/;"	v
vm_iomap_memory	memory.c	/^int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)$/;"	f
vm_iomap_memory	nommu.c	/^EXPORT_SYMBOL(vm_iomap_memory);$/;"	v
vm_iomap_memory	nommu.c	/^int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len)$/;"	f
vm_lock_anon_vma	mmap.c	/^static void vm_lock_anon_vma(struct mm_struct *mm, struct anon_vma *anon_vma)$/;"	f	file:
vm_lock_mapping	mmap.c	/^static void vm_lock_mapping(struct mm_struct *mm, struct address_space *mapping)$/;"	f	file:
vm_map_pages	memory.c	/^EXPORT_SYMBOL(vm_map_pages);$/;"	v
vm_map_pages	memory.c	/^int vm_map_pages(struct vm_area_struct *vma, struct page **pages,$/;"	f
vm_map_pages	nommu.c	/^EXPORT_SYMBOL(vm_map_pages);$/;"	v
vm_map_pages	nommu.c	/^int vm_map_pages(struct vm_area_struct *vma, struct page **pages,$/;"	f
vm_map_pages_zero	memory.c	/^EXPORT_SYMBOL(vm_map_pages_zero);$/;"	v
vm_map_pages_zero	memory.c	/^int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,$/;"	f
vm_map_pages_zero	nommu.c	/^EXPORT_SYMBOL(vm_map_pages_zero);$/;"	v
vm_map_pages_zero	nommu.c	/^int vm_map_pages_zero(struct vm_area_struct *vma, struct page **pages,$/;"	f
vm_map_ram	nommu.c	/^EXPORT_SYMBOL(vm_map_ram);$/;"	v
vm_map_ram	nommu.c	/^void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)$/;"	f
vm_map_ram	vmalloc.c	/^EXPORT_SYMBOL(vm_map_ram);$/;"	v
vm_map_ram	vmalloc.c	/^void *vm_map_ram(struct page **pages, unsigned int count, int node, pgprot_t prot)$/;"	f
vm_memory_committed	util.c	/^EXPORT_SYMBOL_GPL(vm_memory_committed);$/;"	v
vm_memory_committed	util.c	/^unsigned long vm_memory_committed(void)$/;"	f
vm_mixed_ok	memory.c	/^static bool vm_mixed_ok(struct vm_area_struct *vma, pfn_t pfn)$/;"	f	file:
vm_mm	zsmalloc.c	/^	enum zs_mapmode vm_mm; \/* mapping mode *\/$/;"	m	struct:mapping_area	typeref:enum:mapping_area::zs_mapmode	file:
vm_mmap	util.c	/^EXPORT_SYMBOL(vm_mmap);$/;"	v
vm_mmap	util.c	/^unsigned long vm_mmap(struct file *file, unsigned long addr,$/;"	f
vm_mmap_pgoff	util.c	/^unsigned long vm_mmap_pgoff(struct file *file, unsigned long addr,$/;"	f
vm_munmap	mmap.c	/^EXPORT_SYMBOL(vm_munmap);$/;"	v
vm_munmap	mmap.c	/^int vm_munmap(unsigned long start, size_t len)$/;"	f
vm_munmap	nommu.c	/^EXPORT_SYMBOL(vm_munmap);$/;"	v
vm_munmap	nommu.c	/^int vm_munmap(unsigned long addr, size_t len)$/;"	f
vm_node_stat	vmstat.c	/^EXPORT_SYMBOL(vm_node_stat);$/;"	v
vm_normal_page	memory.c	/^struct page *vm_normal_page(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_normal_page_pmd	memory.c	/^struct page *vm_normal_page_pmd(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vm_numa_stat	vmstat.c	/^EXPORT_SYMBOL(vm_numa_stat);$/;"	v
vm_numa_stat_key	page_alloc.c	/^DEFINE_STATIC_KEY_TRUE(vm_numa_stat_key);$/;"	v
vm_pgprot_modify	mmap.c	/^static pgprot_t vm_pgprot_modify(pgprot_t oldprot, unsigned long vm_flags)$/;"	f	file:
vm_policy	shmem.c	1431;"	d	file:
vm_region_jar	nommu.c	/^static struct kmem_cache *vm_region_jar;$/;"	v	typeref:struct:kmem_cache	file:
vm_remove_mappings	vmalloc.c	/^static void vm_remove_mappings(struct vm_struct *area, int deallocate_pages)$/;"	f	file:
vm_stat_account	mmap.c	/^void vm_stat_account(struct mm_struct *mm, vm_flags_t flags, long npages)$/;"	f
vm_swappiness	vmscan.c	/^int vm_swappiness = 60;$/;"	v
vm_total_pages	vmscan.c	/^unsigned long vm_total_pages;$/;"	v
vm_unlock_anon_vma	mmap.c	/^static void vm_unlock_anon_vma(struct anon_vma *anon_vma)$/;"	f	file:
vm_unlock_mapping	mmap.c	/^static void vm_unlock_mapping(struct address_space *mapping)$/;"	f	file:
vm_unmap_aliases	nommu.c	/^EXPORT_SYMBOL_GPL(vm_unmap_aliases);$/;"	v
vm_unmap_aliases	nommu.c	/^void vm_unmap_aliases(void)$/;"	f
vm_unmap_aliases	vmalloc.c	/^EXPORT_SYMBOL_GPL(vm_unmap_aliases);$/;"	v
vm_unmap_aliases	vmalloc.c	/^void vm_unmap_aliases(void)$/;"	f
vm_unmap_ram	nommu.c	/^EXPORT_SYMBOL(vm_unmap_ram);$/;"	v
vm_unmap_ram	nommu.c	/^void vm_unmap_ram(const void *mem, unsigned int count)$/;"	f
vm_unmap_ram	vmalloc.c	/^EXPORT_SYMBOL(vm_unmap_ram);$/;"	v
vm_unmap_ram	vmalloc.c	/^void vm_unmap_ram(const void *mem, unsigned int count)$/;"	f
vm_zone_stat	vmstat.c	/^EXPORT_SYMBOL(vm_zone_stat);$/;"	v
vma	memory.c	/^	struct vm_area_struct *vma;$/;"	m	struct:copy_subpage_arg	typeref:struct:copy_subpage_arg::vm_area_struct	file:
vma_add_reservation	hugetlb.c	/^static long vma_add_reservation(struct hstate *h,$/;"	f	file:
vma_address	internal.h	/^vma_address(struct page *page, struct vm_area_struct *vma)$/;"	f
vma_adjust_trans_huge	huge_memory.c	/^void vma_adjust_trans_huge(struct vm_area_struct *vma,$/;"	f
vma_commit_reservation	hugetlb.c	/^static long vma_commit_reservation(struct hstate *h,$/;"	f	file:
vma_compute_gap	mmap.c	/^static inline unsigned long vma_compute_gap(struct vm_area_struct *vma)$/;"	f	file:
vma_compute_subtree_gap	mmap.c	/^static unsigned long vma_compute_subtree_gap(struct vm_area_struct *vma)$/;"	f	file:
vma_dup_policy	mempolicy.c	/^int vma_dup_policy(struct vm_area_struct *src, struct vm_area_struct *dst)$/;"	f
vma_end_reservation	hugetlb.c	/^static void vma_end_reservation(struct hstate *h,$/;"	f	file:
vma_expandable	mremap.c	/^static int vma_expandable(struct vm_area_struct *vma, unsigned long delta)$/;"	f	file:
vma_gap_update	mmap.c	/^static void vma_gap_update(struct vm_area_struct *vma)$/;"	f	file:
vma_has_reserves	hugetlb.c	/^static bool vma_has_reserves(struct vm_area_struct *vma, long chg)$/;"	f	file:
vma_hugecache_offset	hugetlb.c	/^static pgoff_t vma_hugecache_offset(struct hstate *h,$/;"	f	file:
vma_interval_tree_insert_after	interval_tree.c	/^void vma_interval_tree_insert_after(struct vm_area_struct *node,$/;"	f
vma_is_accessible	memory.c	/^static inline bool vma_is_accessible(struct vm_area_struct *vma)$/;"	f	file:
vma_is_shmem	shmem.c	/^bool vma_is_shmem(struct vm_area_struct *vma)$/;"	f
vma_is_special_mapping	mmap.c	/^bool vma_is_special_mapping(const struct vm_area_struct *vma,$/;"	f
vma_is_stack_for_current	util.c	/^int vma_is_stack_for_current(struct vm_area_struct *vma)$/;"	f
vma_kernel_pagesize	hugetlb.c	/^EXPORT_SYMBOL_GPL(vma_kernel_pagesize);$/;"	v
vma_kernel_pagesize	hugetlb.c	/^unsigned long vma_kernel_pagesize(struct vm_area_struct *vma)$/;"	f
vma_last_pgoff	interval_tree.c	/^static inline unsigned long vma_last_pgoff(struct vm_area_struct *v)$/;"	f	file:
vma_link	mmap.c	/^static void vma_link(struct mm_struct *mm, struct vm_area_struct *vma,$/;"	f	file:
vma_merge	mmap.c	/^struct vm_area_struct *vma_merge(struct mm_struct *mm,$/;"	f
vma_mmu_pagesize	hugetlb.c	/^__weak unsigned long vma_mmu_pagesize(struct vm_area_struct *vma)$/;"	f
vma_needs_reservation	hugetlb.c	/^static long vma_needs_reservation(struct hstate *h,$/;"	f	file:
vma_permits_fault	gup.c	/^static bool vma_permits_fault(struct vm_area_struct *vma,$/;"	f	file:
vma_policy_mof	mempolicy.c	/^bool vma_policy_mof(struct vm_area_struct *vma)$/;"	f
vma_ra_enabled_attr	swap_state.c	/^static struct kobj_attribute vma_ra_enabled_attr =$/;"	v	typeref:struct:kobj_attribute	file:
vma_ra_enabled_show	swap_state.c	/^static ssize_t vma_ra_enabled_show(struct kobject *kobj,$/;"	f	file:
vma_ra_enabled_store	swap_state.c	/^static ssize_t vma_ra_enabled_store(struct kobject *kobj,$/;"	f	file:
vma_rb_erase	mmap.c	/^static __always_inline void vma_rb_erase(struct vm_area_struct *vma,$/;"	f	file:
vma_rb_erase_ignore	mmap.c	/^static __always_inline void vma_rb_erase_ignore(struct vm_area_struct *vma,$/;"	f	file:
vma_rb_insert	mmap.c	/^static inline void vma_rb_insert(struct vm_area_struct *vma,$/;"	f	file:
vma_replace_policy	mempolicy.c	/^static int vma_replace_policy(struct vm_area_struct *vma,$/;"	f	file:
vma_resv_map	hugetlb.c	/^static struct resv_map *vma_resv_map(struct vm_area_struct *vma)$/;"	f	file:
vma_resv_mode	hugetlb.c	/^enum vma_resv_mode {$/;"	g	file:
vma_set_page_prot	mmap.c	/^void vma_set_page_prot(struct vm_area_struct *vma)$/;"	f
vma_shareable	hugetlb.c	/^static bool vma_shareable(struct vm_area_struct *vma, unsigned long addr)$/;"	f	file:
vma_start_pgoff	interval_tree.c	/^static inline unsigned long vma_start_pgoff(struct vm_area_struct *v)$/;"	f	file:
vma_to_resize	mremap.c	/^static struct vm_area_struct *vma_to_resize(unsigned long addr,$/;"	f	file:
vma_wants_writenotify	mmap.c	/^int vma_wants_writenotify(struct vm_area_struct *vma, pgprot_t vm_page_prot)$/;"	f
vmacache_find	vmacache.c	/^struct vm_area_struct *vmacache_find(struct mm_struct *mm, unsigned long addr)$/;"	f
vmacache_find_exact	vmacache.c	/^struct vm_area_struct *vmacache_find_exact(struct mm_struct *mm,$/;"	f
vmacache_update	vmacache.c	/^void vmacache_update(unsigned long addr, struct vm_area_struct *newvma)$/;"	f
vmacache_valid	vmacache.c	/^static bool vmacache_valid(struct mm_struct *mm)$/;"	f	file:
vmacache_valid_mm	vmacache.c	/^static inline bool vmacache_valid_mm(struct mm_struct *mm)$/;"	f	file:
vmaflag_names	debug.c	/^const struct trace_print_flags vmaflag_names[] = {$/;"	v	typeref:struct:trace_print_flags
vmalloc	nommu.c	/^EXPORT_SYMBOL(vmalloc);$/;"	v
vmalloc	nommu.c	/^void *vmalloc(unsigned long size)$/;"	f
vmalloc	vmalloc.c	/^EXPORT_SYMBOL(vmalloc);$/;"	v
vmalloc	vmalloc.c	/^void *vmalloc(unsigned long size)$/;"	f
vmalloc_32	nommu.c	/^EXPORT_SYMBOL(vmalloc_32);$/;"	v
vmalloc_32	nommu.c	/^void *vmalloc_32(unsigned long size)$/;"	f
vmalloc_32	vmalloc.c	/^EXPORT_SYMBOL(vmalloc_32);$/;"	v
vmalloc_32	vmalloc.c	/^void *vmalloc_32(unsigned long size)$/;"	f
vmalloc_32_user	nommu.c	/^EXPORT_SYMBOL(vmalloc_32_user);$/;"	v
vmalloc_32_user	nommu.c	/^void *vmalloc_32_user(unsigned long size)$/;"	f
vmalloc_32_user	vmalloc.c	/^EXPORT_SYMBOL(vmalloc_32_user);$/;"	v
vmalloc_32_user	vmalloc.c	/^void *vmalloc_32_user(unsigned long size)$/;"	f
vmalloc_exec	nommu.c	/^void *vmalloc_exec(unsigned long size)$/;"	f
vmalloc_exec	vmalloc.c	/^void *vmalloc_exec(unsigned long size)$/;"	f
vmalloc_init	vmalloc.c	/^void __init vmalloc_init(void)$/;"	f
vmalloc_node	nommu.c	/^EXPORT_SYMBOL(vmalloc_node);$/;"	v
vmalloc_node	nommu.c	/^void *vmalloc_node(unsigned long size, int node)$/;"	f
vmalloc_node	vmalloc.c	/^EXPORT_SYMBOL(vmalloc_node);$/;"	v
vmalloc_node	vmalloc.c	/^void *vmalloc_node(unsigned long size, int node)$/;"	f
vmalloc_nr_pages	vmalloc.c	/^unsigned long vmalloc_nr_pages(void)$/;"	f
vmalloc_op	vmalloc.c	/^static const struct seq_operations vmalloc_op = {$/;"	v	typeref:struct:seq_operations	file:
vmalloc_sync_mappings	nommu.c	/^void __weak vmalloc_sync_mappings(void)$/;"	f
vmalloc_sync_mappings	vmalloc.c	/^void __weak vmalloc_sync_mappings(void)$/;"	f
vmalloc_sync_unmappings	nommu.c	/^void __weak vmalloc_sync_unmappings(void)$/;"	f
vmalloc_sync_unmappings	vmalloc.c	/^void __weak vmalloc_sync_unmappings(void)$/;"	f
vmalloc_to_page	nommu.c	/^EXPORT_SYMBOL(vmalloc_to_page);$/;"	v
vmalloc_to_page	nommu.c	/^struct page *vmalloc_to_page(const void *addr)$/;"	f
vmalloc_to_page	vmalloc.c	/^EXPORT_SYMBOL(vmalloc_to_page);$/;"	v
vmalloc_to_page	vmalloc.c	/^struct page *vmalloc_to_page(const void *vmalloc_addr)$/;"	f
vmalloc_to_pfn	nommu.c	/^EXPORT_SYMBOL(vmalloc_to_pfn);$/;"	v
vmalloc_to_pfn	nommu.c	/^unsigned long vmalloc_to_pfn(const void *addr)$/;"	f
vmalloc_to_pfn	vmalloc.c	/^EXPORT_SYMBOL(vmalloc_to_pfn);$/;"	v
vmalloc_to_pfn	vmalloc.c	/^unsigned long vmalloc_to_pfn(const void *vmalloc_addr)$/;"	f
vmalloc_user	nommu.c	/^EXPORT_SYMBOL(vmalloc_user);$/;"	v
vmalloc_user	nommu.c	/^void *vmalloc_user(unsigned long size)$/;"	f
vmalloc_user	vmalloc.c	/^EXPORT_SYMBOL(vmalloc_user);$/;"	v
vmalloc_user	vmalloc.c	/^void *vmalloc_user(unsigned long size)$/;"	f
vmap	nommu.c	/^EXPORT_SYMBOL(vmap);$/;"	v
vmap	nommu.c	/^void *vmap(struct page **pages, unsigned int count, unsigned long flags, pgprot_t prot)$/;"	f
vmap	vmalloc.c	/^EXPORT_SYMBOL(vmap);$/;"	v
vmap	vmalloc.c	/^void *vmap(struct page **pages, unsigned int count,$/;"	f
vmap_area_cachep	vmalloc.c	/^static struct kmem_cache *vmap_area_cachep;$/;"	v	typeref:struct:kmem_cache	file:
vmap_area_list	nommu.c	/^LIST_HEAD(vmap_area_list);$/;"	v
vmap_area_list	vmalloc.c	/^LIST_HEAD(vmap_area_list);$/;"	v
vmap_area_root	vmalloc.c	/^static struct rb_root vmap_area_root = RB_ROOT;$/;"	v	typeref:struct:rb_root	file:
vmap_block	vmalloc.c	/^struct vmap_block {$/;"	s	file:
vmap_block_queue	vmalloc.c	/^struct vmap_block_queue {$/;"	s	file:
vmap_block_vaddr	vmalloc.c	/^static void *vmap_block_vaddr(unsigned long va_start, unsigned long pages_off)$/;"	f	file:
vmap_init_free_space	vmalloc.c	/^static void vmap_init_free_space(void)$/;"	f	file:
vmap_lazy_nr	vmalloc.c	/^static atomic_long_t vmap_lazy_nr = ATOMIC_LONG_INIT(0);$/;"	v	file:
vmap_p4d_range	vmalloc.c	/^static int vmap_p4d_range(pgd_t *pgd, unsigned long addr,$/;"	f	file:
vmap_page_range	vmalloc.c	/^static int vmap_page_range(unsigned long start, unsigned long end,$/;"	f	file:
vmap_page_range_noflush	vmalloc.c	/^static int vmap_page_range_noflush(unsigned long start, unsigned long end,$/;"	f	file:
vmap_pmd_range	vmalloc.c	/^static int vmap_pmd_range(pud_t *pud, unsigned long addr,$/;"	f	file:
vmap_pte_range	vmalloc.c	/^static int vmap_pte_range(pmd_t *pmd, unsigned long addr,$/;"	f	file:
vmap_pud_range	vmalloc.c	/^static int vmap_pud_range(p4d_t *p4d, unsigned long addr,$/;"	f	file:
vmem_altmap_free	memremap.c	/^void vmem_altmap_free(struct vmem_altmap *altmap, unsigned long nr_pfns)$/;"	f
vmem_altmap_next_pfn	sparse-vmemmap.c	/^static unsigned long __meminit vmem_altmap_next_pfn(struct vmem_altmap *altmap)$/;"	f	file:
vmem_altmap_nr_free	sparse-vmemmap.c	/^static unsigned long __meminit vmem_altmap_nr_free(struct vmem_altmap *altmap)$/;"	f	file:
vmem_altmap_offset	memremap.c	/^unsigned long vmem_altmap_offset(struct vmem_altmap *altmap)$/;"	f
vmemdup_user	util.c	/^EXPORT_SYMBOL(vmemdup_user);$/;"	v
vmemdup_user	util.c	/^void *vmemdup_user(const void __user *src, size_t len)$/;"	f
vmemmap_alloc_block	sparse-vmemmap.c	/^void * __meminit vmemmap_alloc_block(unsigned long size, int node)$/;"	f
vmemmap_alloc_block_buf	sparse-vmemmap.c	/^void * __meminit vmemmap_alloc_block_buf(unsigned long size, int node)$/;"	f
vmemmap_alloc_block_zero	sparse-vmemmap.c	/^static void * __meminit vmemmap_alloc_block_zero(unsigned long size, int node)$/;"	f	file:
vmemmap_p4d_populate	sparse-vmemmap.c	/^p4d_t * __meminit vmemmap_p4d_populate(pgd_t *pgd, unsigned long addr, int node)$/;"	f
vmemmap_pgd_populate	sparse-vmemmap.c	/^pgd_t * __meminit vmemmap_pgd_populate(unsigned long addr, int node)$/;"	f
vmemmap_pmd_populate	sparse-vmemmap.c	/^pmd_t * __meminit vmemmap_pmd_populate(pud_t *pud, unsigned long addr, int node)$/;"	f
vmemmap_populate_basepages	sparse-vmemmap.c	/^int __meminit vmemmap_populate_basepages(unsigned long start,$/;"	f
vmemmap_populate_print_last	sparse.c	/^void __weak __meminit vmemmap_populate_print_last(void)$/;"	f
vmemmap_pte_populate	sparse-vmemmap.c	/^pte_t * __meminit vmemmap_pte_populate(pmd_t *pmd, unsigned long addr, int node)$/;"	f
vmemmap_pud_populate	sparse-vmemmap.c	/^pud_t * __meminit vmemmap_pud_populate(p4d_t *p4d, unsigned long addr, int node)$/;"	f
vmemmap_verify	sparse-vmemmap.c	/^void __meminit vmemmap_verify(pte_t *pte, int node,$/;"	f
vmf_insert_mixed	memory.c	/^EXPORT_SYMBOL(vmf_insert_mixed);$/;"	v
vmf_insert_mixed	memory.c	/^vm_fault_t vmf_insert_mixed(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vmf_insert_mixed_mkwrite	memory.c	/^EXPORT_SYMBOL(vmf_insert_mixed_mkwrite);$/;"	v
vmf_insert_mixed_mkwrite	memory.c	/^vm_fault_t vmf_insert_mixed_mkwrite(struct vm_area_struct *vma,$/;"	f
vmf_insert_pfn	memory.c	/^EXPORT_SYMBOL(vmf_insert_pfn);$/;"	v
vmf_insert_pfn	memory.c	/^vm_fault_t vmf_insert_pfn(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vmf_insert_pfn_pmd	huge_memory.c	/^EXPORT_SYMBOL_GPL(vmf_insert_pfn_pmd);$/;"	v
vmf_insert_pfn_pmd	huge_memory.c	/^vm_fault_t vmf_insert_pfn_pmd(struct vm_fault *vmf, pfn_t pfn, bool write)$/;"	f
vmf_insert_pfn_prot	memory.c	/^EXPORT_SYMBOL(vmf_insert_pfn_prot);$/;"	v
vmf_insert_pfn_prot	memory.c	/^vm_fault_t vmf_insert_pfn_prot(struct vm_area_struct *vma, unsigned long addr,$/;"	f
vmf_insert_pfn_pud	huge_memory.c	/^EXPORT_SYMBOL_GPL(vmf_insert_pfn_pud);$/;"	v
vmf_insert_pfn_pud	huge_memory.c	/^vm_fault_t vmf_insert_pfn_pud(struct vm_fault *vmf, pfn_t pfn, bool write)$/;"	f
vmpressure	vmpressure.c	/^void vmpressure(gfp_t gfp, struct mem_cgroup *memcg, bool tree,$/;"	f
vmpressure_calc_level	vmpressure.c	/^static enum vmpressure_levels vmpressure_calc_level(unsigned long scanned,$/;"	f	file:
vmpressure_cleanup	vmpressure.c	/^void vmpressure_cleanup(struct vmpressure *vmpr)$/;"	f
vmpressure_event	vmpressure.c	/^static bool vmpressure_event(struct vmpressure *vmpr,$/;"	f	file:
vmpressure_event	vmpressure.c	/^struct vmpressure_event {$/;"	s	file:
vmpressure_init	vmpressure.c	/^void vmpressure_init(struct vmpressure *vmpr)$/;"	f
vmpressure_level	vmpressure.c	/^static enum vmpressure_levels vmpressure_level(unsigned long pressure)$/;"	f	file:
vmpressure_level_critical	vmpressure.c	/^static const unsigned int vmpressure_level_critical = 95;$/;"	v	file:
vmpressure_level_critical_prio	vmpressure.c	/^static const unsigned int vmpressure_level_critical_prio = ilog2(100 \/ 10);$/;"	v	file:
vmpressure_level_med	vmpressure.c	/^static const unsigned int vmpressure_level_med = 60;$/;"	v	file:
vmpressure_levels	vmpressure.c	/^enum vmpressure_levels {$/;"	g	file:
vmpressure_modes	vmpressure.c	/^enum vmpressure_modes {$/;"	g	file:
vmpressure_parent	vmpressure.c	/^static struct vmpressure *vmpressure_parent(struct vmpressure *vmpr)$/;"	f	file:
vmpressure_prio	vmpressure.c	/^void vmpressure_prio(gfp_t gfp, struct mem_cgroup *memcg, int prio)$/;"	f
vmpressure_register_event	vmpressure.c	/^int vmpressure_register_event(struct mem_cgroup *memcg,$/;"	f
vmpressure_str_levels	vmpressure.c	/^static const char * const vmpressure_str_levels[] = {$/;"	v	file:
vmpressure_str_modes	vmpressure.c	/^static const char * const vmpressure_str_modes[] = {$/;"	v	file:
vmpressure_to_css	memcontrol.c	/^struct cgroup_subsys_state *vmpressure_to_css(struct vmpressure *vmpr)$/;"	f
vmpressure_unregister_event	vmpressure.c	/^void vmpressure_unregister_event(struct mem_cgroup *memcg,$/;"	f
vmpressure_win	vmpressure.c	/^static const unsigned long vmpressure_win = SWAP_CLUSTER_MAX * 16;$/;"	v	file:
vmpressure_work_fn	vmpressure.c	/^static void vmpressure_work_fn(struct work_struct *work)$/;"	f	file:
vmstat_cpu_dead	vmstat.c	/^static int vmstat_cpu_dead(unsigned int cpu)$/;"	f	file:
vmstat_cpu_down_prep	vmstat.c	/^static int vmstat_cpu_down_prep(unsigned int cpu)$/;"	f	file:
vmstat_cpu_online	vmstat.c	/^static int vmstat_cpu_online(unsigned int cpu)$/;"	f	file:
vmstat_next	vmstat.c	/^static void *vmstat_next(struct seq_file *m, void *arg, loff_t *pos)$/;"	f	file:
vmstat_op	vmstat.c	/^static const struct seq_operations vmstat_op = {$/;"	v	typeref:struct:seq_operations	file:
vmstat_refresh	vmstat.c	/^int vmstat_refresh(struct ctl_table *table, int write,$/;"	f
vmstat_shepherd	vmstat.c	/^static void vmstat_shepherd(struct work_struct *w)$/;"	f	file:
vmstat_show	vmstat.c	/^static int vmstat_show(struct seq_file *m, void *arg)$/;"	f	file:
vmstat_start	vmstat.c	/^static void *vmstat_start(struct seq_file *m, loff_t *pos)$/;"	f	file:
vmstat_stop	vmstat.c	/^static void vmstat_stop(struct seq_file *m, void *arg)$/;"	f	file:
vmstat_text	vmstat.c	/^const char * const vmstat_text[] = {$/;"	v
vmstat_update	vmstat.c	/^static void vmstat_update(struct work_struct *w)$/;"	f	file:
vread	nommu.c	/^long vread(char *buf, char *addr, unsigned long count)$/;"	f
vread	vmalloc.c	/^long vread(char *buf, char *addr, unsigned long count)$/;"	f
vunmap	nommu.c	/^EXPORT_SYMBOL(vunmap);$/;"	v
vunmap	nommu.c	/^void vunmap(const void *addr)$/;"	f
vunmap	vmalloc.c	/^EXPORT_SYMBOL(vunmap);$/;"	v
vunmap	vmalloc.c	/^void vunmap(const void *addr)$/;"	f
vunmap_p4d_range	vmalloc.c	/^static void vunmap_p4d_range(pgd_t *pgd, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_page_range	vmalloc.c	/^static void vunmap_page_range(unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pmd_range	vmalloc.c	/^static void vunmap_pmd_range(pud_t *pud, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pte_range	vmalloc.c	/^static void vunmap_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end)$/;"	f	file:
vunmap_pud_range	vmalloc.c	/^static void vunmap_pud_range(p4d_t *p4d, unsigned long addr, unsigned long end)$/;"	f	file:
vwrite	nommu.c	/^long vwrite(char *buf, char *addr, unsigned long count)$/;"	f
vwrite	vmalloc.c	/^long vwrite(char *buf, char *addr, unsigned long count)$/;"	f
vzalloc	nommu.c	/^EXPORT_SYMBOL(vzalloc);$/;"	v
vzalloc	nommu.c	/^void *vzalloc(unsigned long size)$/;"	f
vzalloc	vmalloc.c	/^EXPORT_SYMBOL(vzalloc);$/;"	v
vzalloc	vmalloc.c	/^void *vzalloc(unsigned long size)$/;"	f
vzalloc_node	nommu.c	/^EXPORT_SYMBOL(vzalloc_node);$/;"	v
vzalloc_node	nommu.c	/^void *vzalloc_node(unsigned long size, int node)$/;"	f
vzalloc_node	vmalloc.c	/^EXPORT_SYMBOL(vzalloc_node);$/;"	v
vzalloc_node	vmalloc.c	/^void *vzalloc_node(unsigned long size, int node)$/;"	f
wait	filemap.c	/^	wait_queue_entry_t wait;$/;"	m	struct:wait_page_queue	file:
wait	memcontrol.c	/^	wait_queue_entry_t	wait;$/;"	m	struct:oom_wait_info	file:
wait	memcontrol.c	/^	wait_queue_entry_t wait;$/;"	m	struct:mem_cgroup_event	file:
wait_for_isolated_drain	zsmalloc.c	/^static void wait_for_isolated_drain(struct zs_pool *pool)$/;"	f	file:
wait_for_stable_page	page-writeback.c	/^EXPORT_SYMBOL_GPL(wait_for_stable_page);$/;"	v
wait_for_stable_page	page-writeback.c	/^void wait_for_stable_page(struct page *page)$/;"	f
wait_iff_congested	backing-dev.c	/^EXPORT_SYMBOL(wait_iff_congested);$/;"	v
wait_iff_congested	backing-dev.c	/^long wait_iff_congested(int sync, long timeout)$/;"	f
wait_on_page_bit	filemap.c	/^EXPORT_SYMBOL(wait_on_page_bit);$/;"	v
wait_on_page_bit	filemap.c	/^void wait_on_page_bit(struct page *page, int bit_nr)$/;"	f
wait_on_page_bit_common	filemap.c	/^static inline int wait_on_page_bit_common(wait_queue_head_t *q,$/;"	f	file:
wait_on_page_bit_killable	filemap.c	/^EXPORT_SYMBOL(wait_on_page_bit_killable);$/;"	v
wait_on_page_bit_killable	filemap.c	/^int wait_on_page_bit_killable(struct page *page, int bit_nr)$/;"	f
wait_on_page_read	filemap.c	/^static struct page *wait_on_page_read(struct page *page)$/;"	f	file:
wait_on_page_writeback	page-writeback.c	/^EXPORT_SYMBOL_GPL(wait_on_page_writeback);$/;"	v
wait_on_page_writeback	page-writeback.c	/^void wait_on_page_writeback(struct page *page)$/;"	f
wait_page_key	filemap.c	/^struct wait_page_key {$/;"	s	file:
wait_page_queue	filemap.c	/^struct wait_page_queue {$/;"	s	file:
wait_while_offlining	ksm.c	/^static void wait_while_offlining(void)$/;"	f	file:
waitq	memcontrol.c	/^	wait_queue_head_t waitq;		\/* a waitq for other context *\/$/;"	m	struct:move_charge_struct	file:
waitq	shmem.c	/^	wait_queue_head_t *waitq; \/* faults into hole wait for punch to end *\/$/;"	m	struct:shmem_falloc	file:
wake_all_kswapds	page_alloc.c	/^static void wake_all_kswapds(unsigned int order, gfp_t gfp_mask,$/;"	f	file:
wake_oom_reaper	oom_kill.c	/^static void wake_oom_reaper(struct task_struct *tsk)$/;"	f	file:
wake_page_function	filemap.c	/^static int wake_page_function(wait_queue_entry_t *wait, unsigned mode, int sync, void *arg)$/;"	f	file:
wake_up_page	filemap.c	/^static void wake_up_page(struct page *page, int bit)$/;"	f	file:
wake_up_page_bit	filemap.c	/^static void wake_up_page_bit(struct page *page, int bit_nr)$/;"	f	file:
wakeup_kcompactd	compaction.c	/^void wakeup_kcompactd(pg_data_t *pgdat, int order, int classzone_idx)$/;"	f
wakeup_kswapd	vmscan.c	/^void wakeup_kswapd(struct zone *zone, gfp_t gfp_flags, int order,$/;"	f
walk_hugetlb_range	pagewalk.c	/^static int walk_hugetlb_range(unsigned long addr, unsigned long end,$/;"	f	file:
walk_p4d_range	pagewalk.c	/^static int walk_p4d_range(pgd_t *pgd, unsigned long addr, unsigned long end,$/;"	f	file:
walk_page_range	pagewalk.c	/^int walk_page_range(struct mm_struct *mm, unsigned long start,$/;"	f
walk_page_test	pagewalk.c	/^static int walk_page_test(unsigned long start, unsigned long end,$/;"	f	file:
walk_page_vma	pagewalk.c	/^int walk_page_vma(struct vm_area_struct *vma, const struct mm_walk_ops *ops,$/;"	f
walk_pgd_range	pagewalk.c	/^static int walk_pgd_range(unsigned long addr, unsigned long end,$/;"	f	file:
walk_pmd_range	pagewalk.c	/^static int walk_pmd_range(pud_t *pud, unsigned long addr, unsigned long end,$/;"	f	file:
walk_pte_range	pagewalk.c	/^static int walk_pte_range(pmd_t *pmd, unsigned long addr, unsigned long end,$/;"	f	file:
walk_pud_range	pagewalk.c	/^static int walk_pud_range(p4d_t *p4d, unsigned long addr, unsigned long end,$/;"	f	file:
walk_zones_in_node	vmstat.c	/^static void walk_zones_in_node(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
want_pmd_share	hugetlb.c	4956;"	d	file:
want_pmd_share	hugetlb.c	4972;"	d	file:
warn_alloc	page_alloc.c	/^void warn_alloc(gfp_t gfp_mask, nodemask_t *nodemask, const char *fmt, ...)$/;"	f
warn_alloc_show_mem	page_alloc.c	/^static void warn_alloc_show_mem(gfp_t gfp_mask, nodemask_t *nodemask)$/;"	f	file:
warn_or_seq_hex_dump	kmemleak.c	/^static void warn_or_seq_hex_dump(struct seq_file *seq, int prefix_type,$/;"	f	file:
warn_or_seq_printf	kmemleak.c	255;"	d	file:
watermark_boost_factor_sysctl_handler	page_alloc.c	/^int watermark_boost_factor_sysctl_handler(struct ctl_table *table, int write,$/;"	f
watermark_scale_factor	page_alloc.c	/^int watermark_scale_factor = 10;$/;"	v
watermark_scale_factor_sysctl_handler	page_alloc.c	/^int watermark_scale_factor_sysctl_handler(struct ctl_table *table, int write,$/;"	f
wb	page-writeback.c	/^	struct bdi_writeback	*wb;$/;"	m	struct:dirty_throttle_control	typeref:struct:dirty_throttle_control::bdi_writeback	file:
wb_bg_thresh	page-writeback.c	/^	unsigned long		wb_bg_thresh;$/;"	m	struct:dirty_throttle_control	file:
wb_blkcg_offline	backing-dev.c	/^void wb_blkcg_offline(struct blkcg *blkcg)$/;"	f
wb_calc_thresh	page-writeback.c	/^unsigned long wb_calc_thresh(struct bdi_writeback *wb, unsigned long thresh)$/;"	f
wb_completions	page-writeback.c	/^	struct fprop_local_percpu *wb_completions;$/;"	m	struct:dirty_throttle_control	typeref:struct:dirty_throttle_control::fprop_local_percpu	file:
wb_congested_get_create	backing-dev.c	/^wb_congested_get_create(struct backing_dev_info *bdi, int blkcg_id, gfp_t gfp)$/;"	f
wb_congested_put	backing-dev.c	/^void wb_congested_put(struct bdi_writeback_congested *congested)$/;"	f
wb_dirty	page-writeback.c	/^	unsigned long		wb_dirty;	\/* per-wb counterparts *\/$/;"	m	struct:dirty_throttle_control	file:
wb_dirty_limits	page-writeback.c	/^static inline void wb_dirty_limits(struct dirty_throttle_control *dtc)$/;"	f	file:
wb_domain_exit	page-writeback.c	/^void wb_domain_exit(struct wb_domain *dom)$/;"	f
wb_domain_init	page-writeback.c	/^int wb_domain_init(struct wb_domain *dom, gfp_t gfp)$/;"	f
wb_domain_writeout_inc	page-writeback.c	/^static void wb_domain_writeout_inc(struct wb_domain *dom,$/;"	f	file:
wb_exit	backing-dev.c	/^static void wb_exit(struct bdi_writeback *wb)$/;"	f	file:
wb_get_create	backing-dev.c	/^struct bdi_writeback *wb_get_create(struct backing_dev_info *bdi,$/;"	f
wb_get_lookup	backing-dev.c	/^struct bdi_writeback *wb_get_lookup(struct backing_dev_info *bdi,$/;"	f
wb_init	backing-dev.c	/^static int wb_init(struct bdi_writeback *wb, struct backing_dev_info *bdi,$/;"	f	file:
wb_max_pause	page-writeback.c	/^static unsigned long wb_max_pause(struct bdi_writeback *wb,$/;"	f	file:
wb_memcg_completions	page-writeback.c	/^static struct fprop_local_percpu *wb_memcg_completions(struct bdi_writeback *wb)$/;"	f	file:
wb_memcg_offline	backing-dev.c	/^void wb_memcg_offline(struct mem_cgroup *memcg)$/;"	f
wb_min_max_ratio	page-writeback.c	/^static void wb_min_max_ratio(struct bdi_writeback *wb,$/;"	f	file:
wb_min_pause	page-writeback.c	/^static long wb_min_pause(struct bdi_writeback *wb,$/;"	f	file:
wb_over_bg_thresh	page-writeback.c	/^bool wb_over_bg_thresh(struct bdi_writeback *wb)$/;"	f
wb_position_ratio	page-writeback.c	/^static void wb_position_ratio(struct dirty_throttle_control *dtc)$/;"	f	file:
wb_shutdown	backing-dev.c	/^static void wb_shutdown(struct bdi_writeback *wb)$/;"	f	file:
wb_thresh	page-writeback.c	/^	unsigned long		wb_thresh;$/;"	m	struct:dirty_throttle_control	file:
wb_update_bandwidth	page-writeback.c	/^void wb_update_bandwidth(struct bdi_writeback *wb, unsigned long start_time)$/;"	f
wb_update_dirty_ratelimit	page-writeback.c	/^static void wb_update_dirty_ratelimit(struct dirty_throttle_control *dtc,$/;"	f	file:
wb_update_write_bandwidth	page-writeback.c	/^static void wb_update_write_bandwidth(struct bdi_writeback *wb,$/;"	f	file:
wb_wakeup_delayed	backing-dev.c	/^void wb_wakeup_delayed(struct bdi_writeback *wb)$/;"	f
wb_writeout_inc	page-writeback.c	/^EXPORT_SYMBOL_GPL(wb_writeout_inc);$/;"	v
wb_writeout_inc	page-writeback.c	/^void wb_writeout_inc(struct bdi_writeback *wb)$/;"	f
when	slub.c	/^	unsigned long when;	\/* When did the operation occur *\/$/;"	m	struct:track	file:
whole_zone	internal.h	/^	bool whole_zone;		\/* Whole zone should\/has been scanned *\/$/;"	m	struct:compact_control
work	memcontrol.c	/^	struct work_struct work;$/;"	m	struct:memcg_kmem_cache_create_work	typeref:struct:memcg_kmem_cache_create_work::work_struct	file:
work	memcontrol.c	/^	struct work_struct work;$/;"	m	struct:memcg_stock_pcp	typeref:struct:memcg_stock_pcp::work_struct	file:
work	memory-failure.c	/^	struct work_struct work;$/;"	m	struct:memory_failure_cpu	typeref:struct:memory_failure_cpu::work_struct	file:
work	page_alloc.c	/^	struct work_struct work;$/;"	m	struct:pcpu_drain	typeref:struct:pcpu_drain::work_struct	file:
work	slab.h	/^				struct work_struct work;$/;"	m	union:memcg_cache_params::__anon8::__anon10::__anon11	typeref:struct:memcg_cache_params::__anon8::__anon10::__anon11::work_struct
work	z3fold.c	/^	struct work_struct work;$/;"	m	struct:z3fold_header	typeref:struct:z3fold_header::work_struct	file:
work	z3fold.c	/^	struct work_struct work;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::work_struct	file:
work	zswap.c	/^	struct work_struct work;$/;"	m	struct:zswap_pool	typeref:struct:zswap_pool::work_struct	file:
work_fn	slab.h	/^			void (*work_fn)(struct kmem_cache *);$/;"	m	struct:memcg_cache_params::__anon8::__anon10
work_to_vmpressure	vmpressure.c	/^static struct vmpressure *work_to_vmpressure(struct work_struct *work)$/;"	f	file:
workingset_activation	workingset.c	/^void workingset_activation(struct page *page)$/;"	f
workingset_eviction	workingset.c	/^void *workingset_eviction(struct page *page)$/;"	f
workingset_init	workingset.c	/^module_init(workingset_init);$/;"	v
workingset_init	workingset.c	/^static int __init workingset_init(void)$/;"	f	file:
workingset_refault	workingset.c	/^void workingset_refault(struct page *page, void *shadow)$/;"	f
workingset_shadow_shrinker	workingset.c	/^static struct shrinker workingset_shadow_shrinker = {$/;"	v	typeref:struct:shrinker	file:
workingset_update_node	workingset.c	/^void workingset_update_node(struct xa_node *node)$/;"	f
wp_huge_pmd	memory.c	/^static inline vm_fault_t wp_huge_pmd(struct vm_fault *vmf, pmd_t orig_pmd)$/;"	f	file:
wp_huge_pud	memory.c	/^static vm_fault_t wp_huge_pud(struct vm_fault *vmf, pud_t orig_pud)$/;"	f	file:
wp_next_time	page-writeback.c	/^static unsigned long wp_next_time(unsigned long cur_time)$/;"	f	file:
wp_page_copy	memory.c	/^static vm_fault_t wp_page_copy(struct vm_fault *vmf)$/;"	f	file:
wp_pfn_shared	memory.c	/^static vm_fault_t wp_pfn_shared(struct vm_fault *vmf)$/;"	f	file:
wq	vmalloc.c	/^	struct work_struct wq;$/;"	m	struct:vfree_deferred	typeref:struct:vfree_deferred::work_struct	file:
wqh	memcontrol.c	/^	wait_queue_head_t *wqh;$/;"	m	struct:mem_cgroup_event	file:
write_cache_pages	page-writeback.c	/^EXPORT_SYMBOL(write_cache_pages);$/;"	v
write_cache_pages	page-writeback.c	/^int write_cache_pages(struct address_space *mapping,$/;"	f
write_one_page	page-writeback.c	/^EXPORT_SYMBOL(write_one_page);$/;"	v
write_one_page	page-writeback.c	/^int write_one_page(struct page *page)$/;"	f
write_protect_page	ksm.c	/^static int write_protect_page(struct vm_area_struct *vma, struct page *page,$/;"	f	file:
writeback	memory-failure.c	829;"	d	file:
writeback	memory-failure.c	878;"	d	file:
writeback	vmscan.c	/^		unsigned int writeback;$/;"	m	struct:scan_control::__anon2	file:
writeback_set_ratelimit	page-writeback.c	/^void writeback_set_ratelimit(void)$/;"	f
writeback_stat_item	vmstat.c	/^enum writeback_stat_item {$/;"	g	file:
writeout	migrate.c	/^static int writeout(struct address_space *mapping, struct page *page)$/;"	f	file:
writeout_period	page-writeback.c	/^static void writeout_period(struct timer_list *t)$/;"	f	file:
z3fold_alloc	z3fold.c	/^static int z3fold_alloc(struct z3fold_pool *pool, size_t size, gfp_t gfp,$/;"	f	file:
z3fold_aops	z3fold.c	/^static const struct address_space_operations z3fold_aops = {$/;"	v	typeref:struct:address_space_operations	file:
z3fold_aops	z3fold.c	/^static const struct address_space_operations z3fold_aops;$/;"	v	typeref:struct:address_space_operations	file:
z3fold_buddy_slots	z3fold.c	/^struct z3fold_buddy_slots {$/;"	s	file:
z3fold_compact_page	z3fold.c	/^static int z3fold_compact_page(struct z3fold_header *zhdr)$/;"	f	file:
z3fold_create_pool	z3fold.c	/^static struct z3fold_pool *z3fold_create_pool(const char *name, gfp_t gfp,$/;"	f	file:
z3fold_destroy_pool	z3fold.c	/^static void z3fold_destroy_pool(struct z3fold_pool *pool)$/;"	f	file:
z3fold_free	z3fold.c	/^static void z3fold_free(struct z3fold_pool *pool, unsigned long handle)$/;"	f	file:
z3fold_fs	z3fold.c	/^static struct file_system_type z3fold_fs = {$/;"	v	typeref:struct:file_system_type	file:
z3fold_get_pool_size	z3fold.c	/^static u64 z3fold_get_pool_size(struct z3fold_pool *pool)$/;"	f	file:
z3fold_header	z3fold.c	/^struct z3fold_header {$/;"	s	file:
z3fold_init_fs_context	z3fold.c	/^static int z3fold_init_fs_context(struct fs_context *fc)$/;"	f	file:
z3fold_map	z3fold.c	/^static void *z3fold_map(struct z3fold_pool *pool, unsigned long handle)$/;"	f	file:
z3fold_mnt	z3fold.c	/^static struct vfsmount *z3fold_mnt;$/;"	v	typeref:struct:vfsmount	file:
z3fold_mount	z3fold.c	/^static int z3fold_mount(void)$/;"	f	file:
z3fold_ops	z3fold.c	/^struct z3fold_ops {$/;"	s	file:
z3fold_page_flags	z3fold.c	/^enum z3fold_page_flags {$/;"	g	file:
z3fold_page_isolate	z3fold.c	/^static bool z3fold_page_isolate(struct page *page, isolate_mode_t mode)$/;"	f	file:
z3fold_page_lock	z3fold.c	/^static inline void z3fold_page_lock(struct z3fold_header *zhdr)$/;"	f	file:
z3fold_page_migrate	z3fold.c	/^static int z3fold_page_migrate(struct address_space *mapping, struct page *newpage,$/;"	f	file:
z3fold_page_putback	z3fold.c	/^static void z3fold_page_putback(struct page *page)$/;"	f	file:
z3fold_page_trylock	z3fold.c	/^static inline int z3fold_page_trylock(struct z3fold_header *zhdr)$/;"	f	file:
z3fold_page_unlock	z3fold.c	/^static inline void z3fold_page_unlock(struct z3fold_header *zhdr)$/;"	f	file:
z3fold_pool	z3fold.c	/^struct z3fold_pool {$/;"	s	file:
z3fold_reclaim_page	z3fold.c	/^static int z3fold_reclaim_page(struct z3fold_pool *pool, unsigned int retries)$/;"	f	file:
z3fold_register_migration	z3fold.c	/^static int z3fold_register_migration(struct z3fold_pool *pool)$/;"	f	file:
z3fold_unmap	z3fold.c	/^static void z3fold_unmap(struct z3fold_pool *pool, unsigned long handle)$/;"	f	file:
z3fold_unmount	z3fold.c	/^static void z3fold_unmount(void)$/;"	f	file:
z3fold_unregister_migration	z3fold.c	/^static void z3fold_unregister_migration(struct z3fold_pool *pool)$/;"	f	file:
z3fold_zpool_create	z3fold.c	/^static void *z3fold_zpool_create(const char *name, gfp_t gfp,$/;"	f	file:
z3fold_zpool_destroy	z3fold.c	/^static void z3fold_zpool_destroy(void *pool)$/;"	f	file:
z3fold_zpool_driver	z3fold.c	/^static struct zpool_driver z3fold_zpool_driver = {$/;"	v	typeref:struct:zpool_driver	file:
z3fold_zpool_evict	z3fold.c	/^static int z3fold_zpool_evict(struct z3fold_pool *pool, unsigned long handle)$/;"	f	file:
z3fold_zpool_free	z3fold.c	/^static void z3fold_zpool_free(void *pool, unsigned long handle)$/;"	f	file:
z3fold_zpool_malloc	z3fold.c	/^static int z3fold_zpool_malloc(void *pool, size_t size, gfp_t gfp,$/;"	f	file:
z3fold_zpool_map	z3fold.c	/^static void *z3fold_zpool_map(void *pool, unsigned long handle,$/;"	f	file:
z3fold_zpool_ops	z3fold.c	/^static const struct z3fold_ops z3fold_zpool_ops = {$/;"	v	typeref:struct:z3fold_ops	file:
z3fold_zpool_shrink	z3fold.c	/^static int z3fold_zpool_shrink(void *pool, unsigned int pages,$/;"	f	file:
z3fold_zpool_total_size	z3fold.c	/^static u64 z3fold_zpool_total_size(void *pool)$/;"	f	file:
z3fold_zpool_unmap	z3fold.c	/^static void z3fold_zpool_unmap(void *pool, unsigned long handle)$/;"	f	file:
zap_deposited_table	huge_memory.c	/^static inline void zap_deposited_table(struct mm_struct *mm, pmd_t *pmd)$/;"	f	file:
zap_huge_pmd	huge_memory.c	/^int zap_huge_pmd(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
zap_huge_pud	huge_memory.c	/^int zap_huge_pud(struct mmu_gather *tlb, struct vm_area_struct *vma,$/;"	f
zap_p4d_range	memory.c	/^static inline unsigned long zap_p4d_range(struct mmu_gather *tlb,$/;"	f	file:
zap_page_range	memory.c	/^void zap_page_range(struct vm_area_struct *vma, unsigned long start,$/;"	f
zap_page_range_single	memory.c	/^static void zap_page_range_single(struct vm_area_struct *vma, unsigned long address,$/;"	f	file:
zap_pmd_range	memory.c	/^static inline unsigned long zap_pmd_range(struct mmu_gather *tlb,$/;"	f	file:
zap_pte_range	memory.c	/^static unsigned long zap_pte_range(struct mmu_gather *tlb,$/;"	f	file:
zap_pud_range	memory.c	/^static inline unsigned long zap_pud_range(struct mmu_gather *tlb,$/;"	f	file:
zap_vma_ptes	memory.c	/^EXPORT_SYMBOL_GPL(zap_vma_ptes);$/;"	v
zap_vma_ptes	memory.c	/^void zap_vma_ptes(struct vm_area_struct *vma, unsigned long address,$/;"	f
zbud_alloc	zbud.c	/^int zbud_alloc(struct zbud_pool *pool, size_t size, gfp_t gfp,$/;"	f
zbud_create_pool	zbud.c	/^struct zbud_pool *zbud_create_pool(gfp_t gfp, const struct zbud_ops *ops)$/;"	f
zbud_destroy_pool	zbud.c	/^void zbud_destroy_pool(struct zbud_pool *pool)$/;"	f
zbud_free	zbud.c	/^void zbud_free(struct zbud_pool *pool, unsigned long handle)$/;"	f
zbud_get_pool_size	zbud.c	/^u64 zbud_get_pool_size(struct zbud_pool *pool)$/;"	f
zbud_header	zbud.c	/^struct zbud_header {$/;"	s	file:
zbud_map	zbud.c	/^void *zbud_map(struct zbud_pool *pool, unsigned long handle)$/;"	f
zbud_pool	zbud.c	/^struct zbud_pool {$/;"	s	file:
zbud_reclaim_page	zbud.c	/^int zbud_reclaim_page(struct zbud_pool *pool, unsigned int retries)$/;"	f
zbud_unmap	zbud.c	/^void zbud_unmap(struct zbud_pool *pool, unsigned long handle)$/;"	f
zbud_zpool_create	zbud.c	/^static void *zbud_zpool_create(const char *name, gfp_t gfp,$/;"	f	file:
zbud_zpool_destroy	zbud.c	/^static void zbud_zpool_destroy(void *pool)$/;"	f	file:
zbud_zpool_driver	zbud.c	/^static struct zpool_driver zbud_zpool_driver = {$/;"	v	typeref:struct:zpool_driver	file:
zbud_zpool_evict	zbud.c	/^static int zbud_zpool_evict(struct zbud_pool *pool, unsigned long handle)$/;"	f	file:
zbud_zpool_free	zbud.c	/^static void zbud_zpool_free(void *pool, unsigned long handle)$/;"	f	file:
zbud_zpool_malloc	zbud.c	/^static int zbud_zpool_malloc(void *pool, size_t size, gfp_t gfp,$/;"	f	file:
zbud_zpool_map	zbud.c	/^static void *zbud_zpool_map(void *pool, unsigned long handle,$/;"	f	file:
zbud_zpool_ops	zbud.c	/^static const struct zbud_ops zbud_zpool_ops = {$/;"	v	typeref:struct:zbud_ops	file:
zbud_zpool_shrink	zbud.c	/^static int zbud_zpool_shrink(void *pool, unsigned int pages,$/;"	f	file:
zbud_zpool_total_size	zbud.c	/^static u64 zbud_zpool_total_size(void *pool)$/;"	f	file:
zbud_zpool_unmap	zbud.c	/^static void zbud_zpool_unmap(void *pool, unsigned long handle)$/;"	f	file:
zero_global_numa_counters	vmstat.c	/^static void zero_global_numa_counters(void)$/;"	f	file:
zero_p4d_populate	kasan/init.c	/^static int __ref zero_p4d_populate(pgd_t *pgd, unsigned long addr,$/;"	f	file:
zero_pfn	memory.c	/^EXPORT_SYMBOL(zero_pfn);$/;"	v
zero_pfn_range	page_alloc.c	/^static u64 zero_pfn_range(unsigned long spfn, unsigned long epfn)$/;"	f	file:
zero_pmd_populate	kasan/init.c	/^static int __ref zero_pmd_populate(pud_t *pud, unsigned long addr,$/;"	f	file:
zero_pte_populate	kasan/init.c	/^static void __ref zero_pte_populate(pmd_t *pmd, unsigned long addr,$/;"	f	file:
zero_pud_populate	kasan/init.c	/^static int __ref zero_pud_populate(p4d_t *p4d, unsigned long addr,$/;"	f	file:
zero_resv_unavail	page_alloc.c	/^void __init zero_resv_unavail(void)$/;"	f
zero_zone_numa_counters	vmstat.c	/^static void zero_zone_numa_counters(struct zone *zone)$/;"	f	file:
zero_zones_numa_counters	vmstat.c	/^static void zero_zones_numa_counters(void)$/;"	f	file:
zhdr_to_pool	z3fold.c	/^static inline struct z3fold_pool *zhdr_to_pool(struct z3fold_header *zhdr)$/;"	f	file:
zone	internal.h	/^	struct zone *zone;$/;"	m	struct:compact_control	typeref:struct:compact_control::zone
zone	page_alloc.c	/^	struct zone *zone;$/;"	m	struct:pcpu_drain	typeref:struct:pcpu_drain::zone	file:
zone_absent_pages_in_node	page_alloc.c	/^static inline unsigned long __init zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_absent_pages_in_node	page_alloc.c	/^static unsigned long __init zone_absent_pages_in_node(int nid,$/;"	f	file:
zone_allows_reclaim	page_alloc.c	/^static bool zone_allows_reclaim(struct zone *local_zone, struct zone *zone)$/;"	f	file:
zone_batchsize	page_alloc.c	/^static int zone_batchsize(struct zone *zone)$/;"	f	file:
zone_for_pfn_range	memory_hotplug.c	/^struct zone * zone_for_pfn_range(int online_type, int nid, unsigned start_pfn,$/;"	f
zone_init_free_lists	page_alloc.c	/^static void __meminit zone_init_free_lists(struct zone *zone)$/;"	f	file:
zone_init_internals	page_alloc.c	/^static void __meminit zone_init_internals(struct zone *zone, enum zone_type idx, int nid,$/;"	f	file:
zone_names	page_alloc.c	/^static char * const zone_names[MAX_NR_ZONES] = {$/;"	v	file:
zone_pageset_init	page_alloc.c	/^static void __meminit zone_pageset_init(struct zone *zone, int cpu)$/;"	f	file:
zone_pcp_init	page_alloc.c	/^static __meminit void zone_pcp_init(struct zone *zone)$/;"	f	file:
zone_pcp_reset	page_alloc.c	/^void zone_pcp_reset(struct zone *zone)$/;"	f
zone_pcp_update	page_alloc.c	/^void __meminit zone_pcp_update(struct zone *zone)$/;"	f
zone_reclaimable_pages	vmscan.c	/^unsigned long zone_reclaimable_pages(struct zone *zone)$/;"	f
zone_spanned_pages_in_node	page_alloc.c	/^static inline unsigned long __init zone_spanned_pages_in_node(int nid,$/;"	f	file:
zone_spanned_pages_in_node	page_alloc.c	/^static unsigned long __init zone_spanned_pages_in_node(int nid,$/;"	f	file:
zone_spans_last_pfn	hugetlb.c	/^static bool zone_spans_last_pfn(const struct zone *zone,$/;"	f	file:
zone_statistics	page_alloc.c	/^static inline void zone_statistics(struct zone *preferred_zone, struct zone *z)$/;"	f	file:
zone_watermark_fast	page_alloc.c	/^static inline bool zone_watermark_fast(struct zone *z, unsigned int order,$/;"	f	file:
zone_watermark_ok	page_alloc.c	/^bool zone_watermark_ok(struct zone *z, unsigned int order, unsigned long mark,$/;"	f
zone_watermark_ok_safe	page_alloc.c	/^bool zone_watermark_ok_safe(struct zone *z, unsigned int order,$/;"	f
zoneinfo_op	vmstat.c	/^static const struct seq_operations zoneinfo_op = {$/;"	v	typeref:struct:seq_operations	file:
zoneinfo_show	vmstat.c	/^static int zoneinfo_show(struct seq_file *m, void *arg)$/;"	f	file:
zoneinfo_show_print	vmstat.c	/^static void zoneinfo_show_print(struct seq_file *m, pg_data_t *pgdat,$/;"	f	file:
zonelist	internal.h	/^	struct zonelist *zonelist;$/;"	m	struct:alloc_context	typeref:struct:alloc_context::zonelist
zoneref_set_zone	page_alloc.c	/^static void zoneref_set_zone(struct zone *zone, struct zoneref *zoneref)$/;"	f	file:
zpool	z3fold.c	/^	struct zpool *zpool;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::zpool	file:
zpool	zbud.c	/^	struct zpool *zpool;$/;"	m	struct:zbud_pool	typeref:struct:zbud_pool::zpool	file:
zpool	zpool.c	/^struct zpool {$/;"	s	file:
zpool	zswap.c	/^	struct zpool *zpool;$/;"	m	struct:zswap_pool	typeref:struct:zswap_pool::zpool	file:
zpool_create_pool	zpool.c	/^struct zpool *zpool_create_pool(const char *type, const char *name, gfp_t gfp,$/;"	f
zpool_destroy_pool	zpool.c	/^void zpool_destroy_pool(struct zpool *zpool)$/;"	f
zpool_evictable	zpool.c	/^bool zpool_evictable(struct zpool *zpool)$/;"	f
zpool_free	zpool.c	/^void zpool_free(struct zpool *zpool, unsigned long handle)$/;"	f
zpool_get_driver	zpool.c	/^static struct zpool_driver *zpool_get_driver(const char *type)$/;"	f	file:
zpool_get_total_size	zpool.c	/^u64 zpool_get_total_size(struct zpool *zpool)$/;"	f
zpool_get_type	zpool.c	/^const char *zpool_get_type(struct zpool *zpool)$/;"	f
zpool_has_pool	zpool.c	/^EXPORT_SYMBOL(zpool_has_pool);$/;"	v
zpool_has_pool	zpool.c	/^bool zpool_has_pool(char *type)$/;"	f
zpool_malloc	zpool.c	/^int zpool_malloc(struct zpool *zpool, size_t size, gfp_t gfp,$/;"	f
zpool_malloc_support_movable	zpool.c	/^bool zpool_malloc_support_movable(struct zpool *zpool)$/;"	f
zpool_map_handle	zpool.c	/^void *zpool_map_handle(struct zpool *zpool, unsigned long handle,$/;"	f
zpool_ops	z3fold.c	/^	const struct zpool_ops *zpool_ops;$/;"	m	struct:z3fold_pool	typeref:struct:z3fold_pool::zpool_ops	file:
zpool_ops	zbud.c	/^	const struct zpool_ops *zpool_ops;$/;"	m	struct:zbud_pool	typeref:struct:zbud_pool::zpool_ops	file:
zpool_put_driver	zpool.c	/^static void zpool_put_driver(struct zpool_driver *driver)$/;"	f	file:
zpool_register_driver	zpool.c	/^EXPORT_SYMBOL(zpool_register_driver);$/;"	v
zpool_register_driver	zpool.c	/^void zpool_register_driver(struct zpool_driver *driver)$/;"	f
zpool_shrink	zpool.c	/^int zpool_shrink(struct zpool *zpool, unsigned int pages,$/;"	f
zpool_unmap_handle	zpool.c	/^void zpool_unmap_handle(struct zpool *zpool, unsigned long handle)$/;"	f
zpool_unregister_driver	zpool.c	/^EXPORT_SYMBOL(zpool_unregister_driver);$/;"	v
zpool_unregister_driver	zpool.c	/^int zpool_unregister_driver(struct zpool_driver *driver)$/;"	f
zref_in_nodemask	mmzone.c	/^static inline int zref_in_nodemask(struct zoneref *zref, nodemask_t *nodes)$/;"	f	file:
zs_can_compact	zsmalloc.c	/^static unsigned long zs_can_compact(struct size_class *class)$/;"	f	file:
zs_compact	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_compact);$/;"	v
zs_compact	zsmalloc.c	/^unsigned long zs_compact(struct zs_pool *pool)$/;"	f
zs_compact_control	zsmalloc.c	/^struct zs_compact_control {$/;"	s	file:
zs_cpu_dead	zsmalloc.c	/^static int zs_cpu_dead(unsigned int cpu)$/;"	f	file:
zs_cpu_prepare	zsmalloc.c	/^static int zs_cpu_prepare(unsigned int cpu)$/;"	f	file:
zs_create_pool	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_create_pool);$/;"	v
zs_create_pool	zsmalloc.c	/^struct zs_pool *zs_create_pool(const char *name)$/;"	f
zs_destroy_pool	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_destroy_pool);$/;"	v
zs_destroy_pool	zsmalloc.c	/^void zs_destroy_pool(struct zs_pool *pool)$/;"	f
zs_exit	zsmalloc.c	/^module_exit(zs_exit);$/;"	v
zs_exit	zsmalloc.c	/^static void __exit zs_exit(void)$/;"	f	file:
zs_free	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_free);$/;"	v
zs_free	zsmalloc.c	/^void zs_free(struct zs_pool *pool, unsigned long handle)$/;"	f
zs_get_total_pages	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_get_total_pages);$/;"	v
zs_get_total_pages	zsmalloc.c	/^unsigned long zs_get_total_pages(struct zs_pool *pool)$/;"	f
zs_huge_class_size	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_huge_class_size);$/;"	v
zs_huge_class_size	zsmalloc.c	/^size_t zs_huge_class_size(struct zs_pool *pool)$/;"	f
zs_init	zsmalloc.c	/^module_init(zs_init);$/;"	v
zs_init	zsmalloc.c	/^static int __init zs_init(void)$/;"	f	file:
zs_init_fs_context	zsmalloc.c	/^static int zs_init_fs_context(struct fs_context *fc)$/;"	f	file:
zs_malloc	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_malloc);$/;"	v
zs_malloc	zsmalloc.c	/^unsigned long zs_malloc(struct zs_pool *pool, size_t size, gfp_t gfp)$/;"	f
zs_map_object	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_map_object);$/;"	v
zs_map_object	zsmalloc.c	/^void *zs_map_object(struct zs_pool *pool, unsigned long handle,$/;"	f
zs_object_copy	zsmalloc.c	/^static void zs_object_copy(struct size_class *class, unsigned long dst,$/;"	f	file:
zs_page_isolate	zsmalloc.c	/^static bool zs_page_isolate(struct page *page, isolate_mode_t mode)$/;"	f	file:
zs_page_migrate	zsmalloc.c	/^static int zs_page_migrate(struct address_space *mapping, struct page *newpage,$/;"	f	file:
zs_page_putback	zsmalloc.c	/^static void zs_page_putback(struct page *page)$/;"	f	file:
zs_pool	zsmalloc.c	/^struct zs_pool {$/;"	s	file:
zs_pool_dec_isolated	zsmalloc.c	/^static inline void zs_pool_dec_isolated(struct zs_pool *pool)$/;"	f	file:
zs_pool_stat_create	zsmalloc.c	/^static inline void zs_pool_stat_create(struct zs_pool *pool, const char *name)$/;"	f	file:
zs_pool_stat_create	zsmalloc.c	/^static void zs_pool_stat_create(struct zs_pool *pool, const char *name)$/;"	f	file:
zs_pool_stat_destroy	zsmalloc.c	/^static inline void zs_pool_stat_destroy(struct zs_pool *pool)$/;"	f	file:
zs_pool_stat_destroy	zsmalloc.c	/^static void zs_pool_stat_destroy(struct zs_pool *pool)$/;"	f	file:
zs_pool_stats	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_pool_stats);$/;"	v
zs_pool_stats	zsmalloc.c	/^void zs_pool_stats(struct zs_pool *pool, struct zs_pool_stats *stats)$/;"	f
zs_register_migration	zsmalloc.c	/^static int zs_register_migration(struct zs_pool *pool) { return 0; }$/;"	f	file:
zs_register_migration	zsmalloc.c	/^static int zs_register_migration(struct zs_pool *pool)$/;"	f	file:
zs_register_shrinker	zsmalloc.c	/^static int zs_register_shrinker(struct zs_pool *pool)$/;"	f	file:
zs_shrinker_count	zsmalloc.c	/^static unsigned long zs_shrinker_count(struct shrinker *shrinker,$/;"	f	file:
zs_shrinker_scan	zsmalloc.c	/^static unsigned long zs_shrinker_scan(struct shrinker *shrinker,$/;"	f	file:
zs_size_stat	zsmalloc.c	/^struct zs_size_stat {$/;"	s	file:
zs_stat_dec	zsmalloc.c	/^static inline void zs_stat_dec(struct size_class *class,$/;"	f	file:
zs_stat_exit	zsmalloc.c	/^static void __exit zs_stat_exit(void)$/;"	f	file:
zs_stat_get	zsmalloc.c	/^static inline unsigned long zs_stat_get(struct size_class *class,$/;"	f	file:
zs_stat_inc	zsmalloc.c	/^static inline void zs_stat_inc(struct size_class *class,$/;"	f	file:
zs_stat_init	zsmalloc.c	/^static void __init zs_stat_init(void)$/;"	f	file:
zs_stat_root	zsmalloc.c	/^static struct dentry *zs_stat_root;$/;"	v	typeref:struct:dentry	file:
zs_stat_type	zsmalloc.c	/^enum zs_stat_type {$/;"	g	file:
zs_stats_size	zsmalloc.c	/^DEFINE_SHOW_ATTRIBUTE(zs_stats_size);$/;"	v
zs_stats_size_show	zsmalloc.c	/^static int zs_stats_size_show(struct seq_file *s, void *v)$/;"	f	file:
zs_unmap_object	zsmalloc.c	/^EXPORT_SYMBOL_GPL(zs_unmap_object);$/;"	v
zs_unmap_object	zsmalloc.c	/^void zs_unmap_object(struct zs_pool *pool, unsigned long handle)$/;"	f
zs_unregister_migration	zsmalloc.c	/^static void zs_unregister_migration(struct zs_pool *pool) {}$/;"	f	file:
zs_unregister_migration	zsmalloc.c	/^static void zs_unregister_migration(struct zs_pool *pool)$/;"	f	file:
zs_unregister_shrinker	zsmalloc.c	/^static void zs_unregister_shrinker(struct zs_pool *pool)$/;"	f	file:
zs_zpool_create	zsmalloc.c	/^static void *zs_zpool_create(const char *name, gfp_t gfp,$/;"	f	file:
zs_zpool_destroy	zsmalloc.c	/^static void zs_zpool_destroy(void *pool)$/;"	f	file:
zs_zpool_driver	zsmalloc.c	/^static struct zpool_driver zs_zpool_driver = {$/;"	v	typeref:struct:zpool_driver	file:
zs_zpool_free	zsmalloc.c	/^static void zs_zpool_free(void *pool, unsigned long handle)$/;"	f	file:
zs_zpool_malloc	zsmalloc.c	/^static int zs_zpool_malloc(void *pool, size_t size, gfp_t gfp,$/;"	f	file:
zs_zpool_map	zsmalloc.c	/^static void *zs_zpool_map(void *pool, unsigned long handle,$/;"	f	file:
zs_zpool_total_size	zsmalloc.c	/^static u64 zs_zpool_total_size(void *pool)$/;"	f	file:
zs_zpool_unmap	zsmalloc.c	/^static void zs_zpool_unmap(void *pool, unsigned long handle)$/;"	f	file:
zsmalloc_aops	zsmalloc.c	/^static const struct address_space_operations zsmalloc_aops = {$/;"	v	typeref:struct:address_space_operations	file:
zsmalloc_fs	zsmalloc.c	/^static struct file_system_type zsmalloc_fs = {$/;"	v	typeref:struct:file_system_type	file:
zsmalloc_mnt	zsmalloc.c	/^static struct vfsmount *zsmalloc_mnt;$/;"	v	typeref:struct:vfsmount	file:
zsmalloc_mount	zsmalloc.c	/^static int zsmalloc_mount(void) { return 0; }$/;"	f	file:
zsmalloc_mount	zsmalloc.c	/^static int zsmalloc_mount(void)$/;"	f	file:
zsmalloc_unmount	zsmalloc.c	/^static void zsmalloc_unmount(void) {}$/;"	f	file:
zsmalloc_unmount	zsmalloc.c	/^static void zsmalloc_unmount(void)$/;"	f	file:
zspage	zsmalloc.c	/^struct zspage {$/;"	s	file:
zspage_cachep	zsmalloc.c	/^	struct kmem_cache *zspage_cachep;$/;"	m	struct:zs_pool	typeref:struct:zs_pool::kmem_cache	file:
zspage_full	zsmalloc.c	/^static bool zspage_full(struct size_class *class, struct zspage *zspage)$/;"	f	file:
zswap_compressor	zswap.c	/^static char *zswap_compressor = ZSWAP_COMPRESSOR_DEFAULT;$/;"	v	file:
zswap_compressor_param_ops	zswap.c	/^static struct kernel_param_ops zswap_compressor_param_ops = {$/;"	v	typeref:struct:kernel_param_ops	file:
zswap_compressor_param_set	zswap.c	/^static int zswap_compressor_param_set(const char *val,$/;"	f	file:
zswap_cpu_comp_dead	zswap.c	/^static int zswap_cpu_comp_dead(unsigned int cpu, struct hlist_node *node)$/;"	f	file:
zswap_cpu_comp_prepare	zswap.c	/^static int zswap_cpu_comp_prepare(unsigned int cpu, struct hlist_node *node)$/;"	f	file:
zswap_debugfs_exit	zswap.c	/^static void __exit zswap_debugfs_exit(void) { }$/;"	f	file:
zswap_debugfs_exit	zswap.c	/^static void __exit zswap_debugfs_exit(void)$/;"	f	file:
zswap_debugfs_init	zswap.c	/^static int __init zswap_debugfs_init(void)$/;"	f	file:
zswap_debugfs_root	zswap.c	/^static struct dentry *zswap_debugfs_root;$/;"	v	typeref:struct:dentry	file:
zswap_dstmem_dead	zswap.c	/^static int zswap_dstmem_dead(unsigned int cpu)$/;"	f	file:
zswap_dstmem_prepare	zswap.c	/^static int zswap_dstmem_prepare(unsigned int cpu)$/;"	f	file:
zswap_duplicate_entry	zswap.c	/^static u64 zswap_duplicate_entry;$/;"	v	file:
zswap_enabled	zswap.c	/^static bool zswap_enabled;$/;"	v	file:
zswap_enabled_param_ops	zswap.c	/^static struct kernel_param_ops zswap_enabled_param_ops = {$/;"	v	typeref:struct:kernel_param_ops	file:
zswap_enabled_param_set	zswap.c	/^static int zswap_enabled_param_set(const char *val,$/;"	f	file:
zswap_entry	zswap.c	/^struct zswap_entry {$/;"	s	file:
zswap_entry_cache	zswap.c	/^static struct kmem_cache *zswap_entry_cache;$/;"	v	typeref:struct:kmem_cache	file:
zswap_entry_cache_alloc	zswap.c	/^static struct zswap_entry *zswap_entry_cache_alloc(gfp_t gfp)$/;"	f	file:
zswap_entry_cache_create	zswap.c	/^static int __init zswap_entry_cache_create(void)$/;"	f	file:
zswap_entry_cache_destroy	zswap.c	/^static void __init zswap_entry_cache_destroy(void)$/;"	f	file:
zswap_entry_cache_free	zswap.c	/^static void zswap_entry_cache_free(struct zswap_entry *entry)$/;"	f	file:
zswap_entry_find_get	zswap.c	/^static struct zswap_entry *zswap_entry_find_get(struct rb_root *root,$/;"	f	file:
zswap_entry_get	zswap.c	/^static void zswap_entry_get(struct zswap_entry *entry)$/;"	f	file:
zswap_entry_put	zswap.c	/^static void zswap_entry_put(struct zswap_tree *tree,$/;"	f	file:
zswap_fill_page	zswap.c	/^static void zswap_fill_page(void *ptr, unsigned long value)$/;"	f	file:
zswap_free_entry	zswap.c	/^static void zswap_free_entry(struct zswap_entry *entry)$/;"	f	file:
zswap_frontswap_init	zswap.c	/^static void zswap_frontswap_init(unsigned type)$/;"	f	file:
zswap_frontswap_invalidate_area	zswap.c	/^static void zswap_frontswap_invalidate_area(unsigned type)$/;"	f	file:
zswap_frontswap_invalidate_page	zswap.c	/^static void zswap_frontswap_invalidate_page(unsigned type, pgoff_t offset)$/;"	f	file:
zswap_frontswap_load	zswap.c	/^static int zswap_frontswap_load(unsigned type, pgoff_t offset,$/;"	f	file:
zswap_frontswap_ops	zswap.c	/^static struct frontswap_ops zswap_frontswap_ops = {$/;"	v	typeref:struct:frontswap_ops	file:
zswap_frontswap_store	zswap.c	/^static int zswap_frontswap_store(unsigned type, pgoff_t offset,$/;"	f	file:
zswap_get_swap_cache_page	zswap.c	/^static int zswap_get_swap_cache_page(swp_entry_t entry,$/;"	f	file:
zswap_get_swap_ret	zswap.c	/^enum zswap_get_swap_ret {$/;"	g	file:
zswap_has_pool	zswap.c	/^static bool zswap_has_pool;$/;"	v	file:
zswap_header	zswap.c	/^struct zswap_header {$/;"	s	file:
zswap_init_failed	zswap.c	/^static bool zswap_init_failed;$/;"	v	file:
zswap_init_started	zswap.c	/^static bool zswap_init_started;$/;"	v	file:
zswap_is_full	zswap.c	/^static bool zswap_is_full(void)$/;"	f	file:
zswap_is_page_same_filled	zswap.c	/^static int zswap_is_page_same_filled(void *ptr, unsigned long *value)$/;"	f	file:
zswap_max_pool_percent	zswap.c	/^static unsigned int zswap_max_pool_percent = 20;$/;"	v	file:
zswap_pool	zswap.c	/^struct zswap_pool {$/;"	s	file:
zswap_pool_create	zswap.c	/^static struct zswap_pool *zswap_pool_create(char *type, char *compressor)$/;"	f	file:
zswap_pool_current	zswap.c	/^static struct zswap_pool *zswap_pool_current(void)$/;"	f	file:
zswap_pool_current_get	zswap.c	/^static struct zswap_pool *zswap_pool_current_get(void)$/;"	f	file:
zswap_pool_debug	zswap.c	199;"	d	file:
zswap_pool_destroy	zswap.c	/^static void zswap_pool_destroy(struct zswap_pool *pool)$/;"	f	file:
zswap_pool_find_get	zswap.c	/^static struct zswap_pool *zswap_pool_find_get(char *type, char *compressor)$/;"	f	file:
zswap_pool_get	zswap.c	/^static int __must_check zswap_pool_get(struct zswap_pool *pool)$/;"	f	file:
zswap_pool_last_get	zswap.c	/^static struct zswap_pool *zswap_pool_last_get(void)$/;"	f	file:
zswap_pool_limit_hit	zswap.c	/^static u64 zswap_pool_limit_hit;$/;"	v	file:
zswap_pool_put	zswap.c	/^static void zswap_pool_put(struct zswap_pool *pool)$/;"	f	file:
zswap_pool_total_size	zswap.c	/^static u64 zswap_pool_total_size;$/;"	v	file:
zswap_pools_count	zswap.c	/^static atomic_t zswap_pools_count = ATOMIC_INIT(0);$/;"	v	file:
zswap_rb_erase	zswap.c	/^static void zswap_rb_erase(struct rb_root *root, struct zswap_entry *entry)$/;"	f	file:
zswap_rb_insert	zswap.c	/^static int zswap_rb_insert(struct rb_root *root, struct zswap_entry *entry,$/;"	f	file:
zswap_rb_search	zswap.c	/^static struct zswap_entry *zswap_rb_search(struct rb_root *root, pgoff_t offset)$/;"	f	file:
zswap_reject_alloc_fail	zswap.c	/^static u64 zswap_reject_alloc_fail;$/;"	v	file:
zswap_reject_compress_poor	zswap.c	/^static u64 zswap_reject_compress_poor;$/;"	v	file:
zswap_reject_kmemcache_fail	zswap.c	/^static u64 zswap_reject_kmemcache_fail;$/;"	v	file:
zswap_reject_reclaim_fail	zswap.c	/^static u64 zswap_reject_reclaim_fail;$/;"	v	file:
zswap_same_filled_pages	zswap.c	/^static atomic_t zswap_same_filled_pages = ATOMIC_INIT(0);$/;"	v	file:
zswap_same_filled_pages_enabled	zswap.c	/^static bool zswap_same_filled_pages_enabled = true;$/;"	v	file:
zswap_shrink	zswap.c	/^static int zswap_shrink(void)$/;"	f	file:
zswap_stored_pages	zswap.c	/^static atomic_t zswap_stored_pages = ATOMIC_INIT(0);$/;"	v	file:
zswap_tree	zswap.c	/^struct zswap_tree {$/;"	s	file:
zswap_trees	zswap.c	/^static struct zswap_tree *zswap_trees[MAX_SWAPFILES];$/;"	v	typeref:struct:zswap_tree	file:
zswap_update_total_size	zswap.c	/^static void zswap_update_total_size(void)$/;"	f	file:
zswap_writeback_entry	zswap.c	/^static int zswap_writeback_entry(struct zpool *pool, unsigned long handle)$/;"	f	file:
zswap_written_back_pages	zswap.c	/^static u64 zswap_written_back_pages;$/;"	v	file:
zswap_zpool_ops	zswap.c	/^static const struct zpool_ops zswap_zpool_ops = {$/;"	v	typeref:struct:zpool_ops	file:
zswap_zpool_param_ops	zswap.c	/^static struct kernel_param_ops zswap_zpool_param_ops = {$/;"	v	typeref:struct:kernel_param_ops	file:
zswap_zpool_param_set	zswap.c	/^static int zswap_zpool_param_set(const char *val,$/;"	f	file:
zswap_zpool_type	zswap.c	/^static char *zswap_zpool_type = ZSWAP_ZPOOL_DEFAULT;$/;"	v	file:
